(by-file
 (((filename "abstracting-a-domain/board")
   (free
    (any pair?
         cons
         cdr
         car
         error
         memq
         not
         piece=?
         map
         +
         modulo
         make-coords
         find
         piece-coords
         coords=?
         filter
         piece-color
         <=
         get-row
         get-column
         -
         moves-generator
         piece-summarizer
         list-ref
         game-colors
         game-depth
         game-width
         initial-pieces-generator
         %record?
         %record-ref
         eq?
         guarantee
         record-predicate
         record-constructor
         make-record-type))
   (defined
    (<board> %make-board
             board?
             board-game
             board-pieces
             current-color-index
             make-board
             update-board
             board-width
             board-depth
             board-colors
             current-color
             summarize-location
             generate-legal-moves
             board-max-row
             board-max-column
             is-position-on-board?
             current-pieces
             board-get
             flip-coords
             position-info
             is-position-unoccupied?
             is-position-occupied-by-self?
             is-position-occupied-by-opponent?
             board-end-turn
             board-replace-piece
             board-remove-piece
             %delete-piece
             guarantee-piece-on-board)))
  ((filename "abstracting-a-domain/checkers-new")
   (free
    (filter captures-pieces?
            define-aggregate-rule
            should-be-crowned?
            crown-piece
            update-piece
            map
            capture-piece-at
            is-position-occupied-by-opponent?
            list
            null?
            not
            filter-map
            current-board
            compute-new-position
            is-position-unoccupied?
            new-piece-position
            finish-move
            is-position-on-board?
            current-piece
            possible-directions
            define-evolution-rule
            is-pmove-empty?
            generate-moves-using-rule-interpreter
            make-checkers))
   (defined (checkers get-simple-moves get-jumps)))
  ((filename "abstracting-a-domain/checkers-original")
   (free
    (is-position-on-board? position-info
                           coords+
                           is-position-unoccupied?
                           error
                           not
                           filter-map
                           possible-directions
                           null?
                           filter
                           crown-piece
                           should-be-crowned?
                           append-map
                           current-pieces
                           pair?
                           cons
                           coords=?
                           cadr
                           cdr
                           reverse
                           map
                           board-end-turn
                           car
                           any
                           board-replace-piece
                           board-get
                           board-remove-piece
                           piece-move
                           define-record-printer
                           piece-coords
                           list
                           %record?
                           %record-ref
                           eq?
                           guarantee
                           record-predicate
                           record-constructor
                           make-record-type
                           make-checkers))
   (defined
    (checkers <step>
              %make-step
              step?
              step-to
              step-from
              step-board
              step-is-jump?
              make-simple-move
              make-jump
              replace-piece
              %replace-piece
              path-contains-jumps?
              get-final-board
              summarize-move
              generate-moves
              crown-kings
              mandate-jumps
              evolve-paths
              evolve-jumps
              compute-next-steps
              try-step)))
  ((filename "abstracting-a-domain/checkers-shared")
   (free
    (diagonal-directions forward-diagonal-directions
                         piece-new-type
                         =
                         get-row
                         not
                         pair?
                         cons
                         coords=?
                         car
                         cadr
                         cdr
                         pmove->list
                         piece-coords
                         get-piece
                         map
                         piece-type
                         eq?
                         error
                         piece-color
                         string
                         append-map
                         make-piece
                         make-coords
                         iota
                         list
                         *
                         +
                         game-colors
                         make-game
                         make-board
                         checkers
                         new-game))
   (defined
    (new-checkers-game make-checkers
                       checkers-initial-pieces
                       checkers-piece-summary
                       summarize-move
                       piece-is-king?
                       should-be-crowned?
                       crown-piece
                       possible-directions)))
  ((filename "abstracting-a-domain/coords")
   (free (append list sign / * - + = cdr car cons))
   (defined
    (make-coords get-column
                 get-row
                 coords=?
                 coords+
                 coords-
                 offset*
                 offset/
                 offset->direction
                 forward-direction
                 backward-direction
                 left-direction
                 right-direction
                 forward-diagonal-directions
                 backward-diagonal-directions
                 diagonal-directions)))
  ((filename "abstracting-a-domain/game")
   (free
    (set-cdr! cons
              assq
              map
              cdr
              list-of-unique-symbols?
              error
              =
              length
              not
              null?
              procedure?
              %record-set!
              %record?
              %record-ref
              eq?
              guarantee
              record-predicate
              record-constructor
              make-record-type))
   (defined
    (<game> %make-game
            game?
            game-width
            game-depth
            game-colors
            game-types
            initial-pieces-generator
            moves-generator
            piece-summarizer
            %get-evolution-rules
            %set-evolution-rules!
            %get-aggregate-rules
            %set-aggregate-rules!
            make-game
            get-evolution-rules
            get-aggregate-rules
            define-evolution-rule
            define-aggregate-rule
            %define-rule)))
  ((filename "abstracting-a-domain/game-interpreter")
   (free
    (guarantee-list-of is-pmove-derived-from?
                       pmove?
                       list
                       is-pmove-finished?
                       reduce
                       compose
                       append-map
                       get-aggregate-rules
                       get-evolution-rules
                       board-game
                       map
                       initial-pmove
                       current-pieces))
   (defined
    (generate-moves-using-rule-interpreter execute-rules
                                           evolve-pmove-from-text
                                           evolve-pmove
                                           apply-evolution-rule)))
  ((filename "abstracting-a-domain/game-repl")
   (free
    (summarize-location make-coords
                        board-width
                        board-depth
                        reverse
                        not
                        <
                        exact-nonnegative-integer?
                        get-final-board
                        list-ref
                        newline
                        generate-legal-moves
                        =
                        write-string
                        current-color
                        iota
                        length
                        write
                        write-char
                        summarize-move
                        for-each
                        car
                        null?
                        cdr
                        error
                        cons))
   (defined
    (try-history new-game new-board undo restart-board move show-board)))
  ((filename "abstracting-a-domain/piece")
   (free
    (coords=? define-record-printer
              list
              %record?
              %record-ref
              eq?
              guarantee
              record-predicate
              record-constructor
              make-record-type))
   (defined
    (<piece> make-piece
             piece?
             piece-color
             piece-type
             piece-coords
             piece=?
             piece-move
             piece-new-type
             same-color?)))
  ((filename "abstracting-a-domain/pmove")
   (free
    (coords+ offset*
             piece-type
             not
             is-position-occupied-by-opponent?
             board-get
             piece-new-type
             piece-move
             board-end-turn
             memq
             lset-adjoin
             board-remove-piece
             board-replace-piece
             reverse
             cons
             error
             car
             cdr
             null?
             pair?
             list-of-type?
             define-record-printer
             list
             piece-coords
             append
             board?
             piece?
             list-of-unique-symbols?
             %record?
             %record-ref
             eq?
             guarantee
             record-predicate
             record-constructor
             make-record-type))
   (defined
    (<change> %make-change
              change?
              get-board
              get-piece
              get-flags
              make-change
              pmove?
              initial-pmove
              is-pmove-empty?
              final-change
              current-board
              current-piece
              previous-pmove
              add-change
              pmove->list
              update-piece
              remove-piece
              add-flag
              is-flag-set?
              get-final-board
              new-piece-position
              new-piece-type
              capture-piece-at
              finish-move
              is-pmove-finished?
              captures-pieces?
              get-piece-at
              piece-has-type?
              is-pmove-derived-from?
              compute-new-position)))
  ((filename "automatic-differentiation/derivatives")
   (free
    (< apply
       iota
       extract-dx-part
       symbol>?
       uninterned-symbol?
       generate-uninterned-symbol
       >
       length
       ordered-union
       *
       ordered-intersect
       reduce
       append-map
       map
       equal?
       +
       caddr
       cadr
       list
       pair?
       eq?
       filter
       number?
       =
       not
       cdr
       car
       error
       cons
       every
       null?))
   (defined
    (differential-tag make-differential
                      differential?
                      diff-terms
                      diff-term-tag
                      make-diff-term
                      diff-term?
                      diff-coefficient
                      diff-factors
                      +diff-termlists
                      d:+
                      *diff-termlists
                      d:*
                      *diff-terms
                      diff-term>?
                      make-new-dx
                      diff-factor?
                      diff-factor>?
                      make-infinitesimal
                      derivative
                      partial
                      general-derivative)))
  ((filename "automatic-differentiation/extractor")
   (free
    (pair? eqv?
           make-initialized-vector
           vector-length
           vector-ref
           vector?
           diff-term>?
           diff-factor>?
           sort
           not
           error
           function?
           make-new-dx
           map
           define-generic-procedure-handler
           diff-factor?
           differential?
           match-args
           warn
           filter-map
           make-diff-term
           delv
           memv
           diff-terms
           cdr
           diff-factors
           car
           diff-coefficient
           make-differential
           null?
           apply
           shallow-fluid-bind
           cons
           memq
           extract-dx-coefficient-from
           infinitesimal-part
           simple-generic-procedure))
   (defined
    (extract-dx-default extract-dx-part
                        extract-dx-differential-1
                        *active-tags*
                        tag-active?
                        with-active-tag
                        extract-dx-differential
                        extract-dx-function
                        replace-dx-default
                        replace-dx
                        replace-dx-differential
                        replace-dx-function
                        substitute)))
  ((filename "automatic-differentiation/handlers")
   (free
    (any-object? assign-handler!
                 atan
                 acos
                 asin
                 sin
                 cos
                 exp
                 sqrt
                 expt
                 log
                 positive?
                 zero?
                 number?
                 /
                 square
                 *
                 -
                 +
                 d:+
                 d:*
                 diff-factor>?
                 cdr
                 null?
                 pair?
                 car
                 filter-map
                 default-object?
                 error
                 diff-factor?
                 not
                 filter
                 make-differential
                 diff-terms
                 memv
                 diff-factors
                 remove
                 differential?))
   (defined
    (finite-part infinitesimal-part
                 default-maximal-factor
                 maximal-factor
                 choose-maximal-factor
                 diff:unary-proc
                 diff:binary-proc-wrong
                 diff:binary-proc
                 diff:+
                 diff:-
                 diff:*
                 diff:/
                 diff:expt
                 diff:sqrt
                 diff:square
                 diff:exp
                 diff:log
                 diff:sin
                 diff:cos
                 diff:asin
                 diff:acos
                 diff:atan1
                 diff:atan2)))
  ((filename "automatic-differentiation/literal-functions")
   (free
    (= list
       cons
       fold
       d:+
       d:*
       map
       apply
       iota
       finite-part
       infinitesimal-part
       length
       maximal-factor
       differential?
       any))
   (defined (literal-function deriv-expr)))
  ((filename "automatic-differentiation/replace-dx-differential")
   (free
    (define-generic-procedure-handler replace-dx
      differential?
      diff-factor?
      match-args
      equal?
      +
      cons
      cddr
      not
      null?
      eqv?
      car
      cadr
      cdr
      diff-term>?
      append-map
      diff-coefficient
      substitute
      diff-factor>?
      list
      make-diff-term
      diff-factors
      =
      number?
      diff-terms
      sort
      make-differential))
   (defined (replace-dx-differential duplicate-factors? combine-like-terms)))
  ((filename "automatic-differentiation/simplifier")
   (free
    (rule-simplifier sqrt
                     expt
                     /
                     *
                     -
                     append-map
                     +
                     map
                     expr<?
                     make-rule
                     number?
                     >
                     set-cdr!
                     make-parameter
                     null?
                     cdr
                     append
                     compose
                     list
                     cons
                     parameterize*))
   (defined
    (simplify *assumptions*
              assume
              positive-number?
              algebra-3
              combine-derivatives
              composed-operators-multiply)))
  ((filename "automatic-differentiation/utils")
   (free
    (make-differential make-diff-term
                       install-arithmetic!
                       add-to-generic-arithmetic!
                       numeric-arithmetic
                       function-extender
                       extend-generic-arithmetic!
                       symbolic-extender
                       make-simple-dispatch-store
                       make-generic-arithmetic
                       make-key-weak-eqv-hash-table
                       define-generic-procedure-extractor
                       hash-table-ref/default
                       hash-table-set!
                       operation-procedure
                       transform-operation-procedure
                       <
                       number?
                       make-arithmetic
                       arithmetic-domain-predicate
                       list
                       eq?
                       append-map
                       length
                       iota
                       =
                       append
                       -
                       map
                       error
                       cons
                       cdr
                       car
                       eqv?
                       null?))
   (defined
    (ordered-union ordered-intersect
                   combinations
                   all-combinations
                   numerical-simplifier-wrapper
                   simplify:+
                   simplify:*
                   simplify:expt
                   wrap-simplifier
                   numeric-simplifier-forwarding
                   full-arithmetic
                   differential
                   real->diff-terms
                   simplify)))
  ((filename "combinators/function-combinators")
   (free
    (map list-ref
         pair?
         cons
         car
         cdr
         hash-table-ref/default
         procedure-arity
         eqv?
         procedure-arity-min
         procedure-arity-max
         hash-table-set!
         make-key-weak-eqv-hash-table
         -
         exact-nonnegative-integer?
         <
         length
         list-tail
         list-head
         +
         values
         append
         call-with-values
         not
         =
         error
         apply))
   (defined
    (first-compose second-compose
                   simple-compose
                   compose
                   first-parallel-combine
                   simple-parallel-combine
                   parallel-apply
                   parallel-combine
                   simple-spread-combine
                   spread-apply
                   spread-combine
                   discard-argument
                   curry-argument
                   permute-arguments
                   arity-table
                   restrict-arity
                   get-arity
                   list-remove
                   list-insert
                   make-permutation)))
  ((filename "combining-arithmetics/function-variants")
   (free
    (disjoin function-extender
             any-arg
             operator-arity
             make-operation
             arithmetic-domain-predicate
             simple-operation
             map
             apply
             apply-operation
             list
             function?
             make-arithmetic))
   (defined (pure-function-extender function-extender-with-coercion)))
  ((filename "combining-arithmetics/standard-arith")
   (free
    (extend-arithmetic numeric-arithmetic
                       any-object?
                       default-object
                       eq?
                       simple-operation
                       disjoin
                       apply-operation
                       apply
                       map
                       procedure?
                       bundle?
                       not
                       make-arithmetic
                       list
                       arithmetic-domain-predicate
                       cons
                       any-arg
                       operator-arity
                       make-operation
                       register-predicate!
                       pair?
                       symbol?))
   (defined
    (symbolic? symbolic-extender
               function?
               function-extender
               make-arithmetic-1
               symbolic-arithmetic-1
               combined-arithmetic
               literal-function)))
  ((filename "common/applicability")
   (free
    (apply lset-union
           equal?
           all-sequences-of
           make-list
           list
           increment-predicate-count!
           any
           guarantee
           every
           procedure?
           length
           n:=
           cdr
           car
           n:pair?
           not
           n:list?))
   (defined
    (applicability? applicability-arity
                    is-applicable?
                    predicates-match?
                    match-args
                    all-args
                    any-arg
                    applicability-union
                    applicability-union*)))
  ((filename "common/arith")
   (free
    (n:< cddr
         cadr
         make-installable-operation-procedure
         eqv?
         get-implementation-value
         make-metadata-association
         operator-installable?
         filter
         make-package
         with-installed-package!
         install-package!
         n:null?
         operation-union
         constant-union
         disjoin*
         operation-procedure
         cdr
         default-object
         not
         assq
         error
         car
         operator-names
         remove
         default-object?
         n:pair?
         lset-union
         constant-names
         predicate?
         guarantee-list-of
         filter-map
         apply
         length
         n:=
         cons
         map
         %record?
         %record-ref
         eq?
         guarantee
         record-predicate
         record-constructor
         make-record-type))
   (defined
    (<arithmetic> %make-arithmetic
                  arithmetic?
                  arithmetic-name
                  arithmetic-bases
                  arithmetic-domain-predicate
                  arithmetic-constant-alist
                  arithmetic-operation-alist
                  make-arithmetic
                  arithmetic-constant-names-for
                  arithmetic-constants-for
                  arithmetic-operators-for
                  arithmetic-operations-for
                  arithmetic-constant-names
                  arithmetic-constant
                  arithmetic-constant-binding
                  find-arithmetic-constant
                  arithmetic-operators
                  arithmetic-operation
                  arithmetic-procedure
                  find-arithmetic-operation
                  add-arithmetics
                  add-arithmetics*
                  extend-arithmetic
                  *current-arithmetic*
                  install-arithmetic!
                  with-arithmetic
                  arithmetic->package
                  arithmetic->bindings
                  arithmetic-procedure?
                  arithmetic-procedure-metadata
                  set-arithmetic-procedure-metadata!
                  make-installable-procedure
                  +-like
                  identity-name->getter
                  --like
                  comparator
                  min-like
                  pairwise)))
  ((filename "common/collections")
   (free
    (eqv? make-key-weak-eqv-hash-table
          hash-table-keys
          hash-table-exists?
          hash-table-ref
          hash-table-set!
          pair?
          weak-car
          set-cdr!
          weak-pair/car?
          weak-cdr
          weak-set-cdr!
          map
          car
          any
          find
          cdr
          filter-map
          cons
          remove!
          eq?
          error
          not
          weak-cons
          weak-memq
          weak-list->list))
   (defined
    (make-weak-eq-set make-alist-store
                      make-weak-alist-store
                      make-hash-table-store
                      make-metadata-association)))
  ((filename "common/generic-procedures")
   (free
    (equality-predicate-maker equal?
                              eqv?
                              simple-list-memoizer
                              get-a-value
                              set-path-value!
                              make-trie
                              predicates-match?
                              car
                              find
                              assoc
                              %record?
                              %record-ref
                              eq?
                              record-predicate
                              record-constructor
                              make-record-type
                              match-args
                              set-cdr!
                              assq
                              cdar
                              error:not-a
                              pair?
                              not
                              map
                              cdr
                              make-parameter
                              parameterize*
                              cons
                              list
                              trace-output-port
                              newline
                              for-each
                              write
                              display
                              fresh-line
                              error
                              make-key-weak-eqv-hash-table
                              hash-table-intern!
                              apply
                              guarantee
                              n:exact-nonnegative-integer?
                              make-metadata-association))
   (defined
    (generic-procedure? %generic-procedure-metadata
                        set-generic-procedure-metadata!
                        generic-procedure-constructor
                        generic-procedure-dispatch
                        constant-generic-procedure-handler
                        %constant-generic-procedure-handlers
                        error-generic-procedure-handler
                        trace-generic-dispatch
                        trace-generic-dispatch?
                        get-generic-procedure-handler
                        define-generic-procedure-handler
                        generic-procedure-name
                        generic-procedure-arity
                        generic-procedure-rules
                        generic-procedure-handlers
                        generic-procedure-metadata
                        define-generic-procedure-extractor
                        generic-procedure-extractors
                        assign-handler!
                        <generic-metadata>
                        %make-generic-metadata
                        generic-metadata?
                        generic-metadata-name
                        generic-metadata-arity
                        generic-metadata-dispatch-store
                        generic-metadata-getter
                        generic-metadata-default-getter
                        make-generic-metadata
                        make-simple-dispatch-store
                        make-trie-dispatch-store
                        cache-wrapped-dispatch-store
                        simple-generic-procedure
                        make-default-dispatch-store
                        equal*?
                        equal*-predicate)))
  ((filename "common/indexes")
   (free (cons odd? quotient n:+ n:exact-nonnegative-integer? n:< n:- n:expt))
   (defined (index-limit index-all index-predicate index->booleans)))
  ((filename "common/match-utils")
   (free
    (equal? any
            append-map
            reverse
            error
            find
            map
            cons
            list?
            cdr
            cdddr
            null?
            every
            eqv?
            caddr
            cddr
            not
            list
            eq?
            define-generic-procedure-handler
            match-args
            pair?
            n:>=
            length
            cadr
            symbol?
            memq
            guarantee
            car
            constant-generic-procedure-handler
            simple-generic-procedure))
   (defined
    (match:var? match:var-type
                match:var-type?
                match:var-types
                match:var-name
                match:named-var?
                match:element-var?
                match:segment-var?
                match:make-var
                match:satisfies-restriction?
                match:var-has-restriction?
                match:var-restriction
                match:vars-equal?
                match:new-dict
                match:dict?
                match:bindings
                match:new-bindings
                match:make-binding
                match:map-binding-value
                match:binding-name
                match:binding-type
                match:binding-value
                match:extend-dict
                match:map-bindings
                match:lookup
                match:has-binding?
                match:get-value
                match:map-dict-values
                match:all-values
                match:dict->procedure
                match:dict-substitution
                match:single-substitution
                match:map-vars
                match:occurs-in?
                match:equivalent-patterns?)))
  ((filename "common/memoizers")
   (free
    (list default-object?
          modulo
          map
          n:+
          apply
          lset=
          n:pair?
          car
          cdr
          not
          eqv?
          eq?
          eq-hash
          make-hash-table
          equal?
          equal-hash
          error
          eqv-hash
          delete-duplicates
          hash-table-intern!))
   (defined
    (make-list-memoizer make-memoizer-table
                        make-list=
                        make-lset=
                        make-list-hash
                        list-memoizer
                        lset-memoizer
                        make-simple-list-memoizer
                        simple-list-memoizer
                        simple-lset-memoizer
                        memoize-multi-arg-eqv
                        memoize-multi-arg-equal)))
  ((filename "common/numeric-arith")
   (free
    (simple-operation operator->procedure-name
                      get-implementation-value
                      eq?
                      default-object
                      number?
                      make-arithmetic))
   (defined (numeric-arithmetic)))
  ((filename "common/operations")
   (free
    (operator-arity all-args
                    is-applicable?
                    not
                    error
                    find
                    map
                    applicability-union*
                    n:pair?
                    default-object
                    delete-duplicates
                    eqv?
                    default-object?
                    remove
                    apply
                    list
                    n:=
                    length
                    operator?
                    cadr
                    procedure?
                    cadddr
                    caddr
                    applicability?
                    car
                    eq?
                    n:list?))
   (defined
    (operation? make-operation
                operation-operator
                operation-applicability
                operation-procedure
                apply-operation
                make-installable-operation-procedure
                operation-components
                constant-union
                operation-union
                operation-union*
                operation-union-dispatch
                is-operation-applicable?
                simple-operation
                simple-operation-procedure
                transform-operation-procedure)))
  ((filename "common/operators")
   (free
    (values boolean?
            number?
            eq?
            error
            map
            car
            cdr
            environment-define
            system-global-environment
            environment-lookup
            caddr
            cadr
            length
            assq))
   (defined
    (operator? operator-arity
               operator-domains
               operator-codomain
               operator-installable?
               operator->procedure-name
               internal-operators
               constant-names
               operator-names
               %operator-entry
               operator-signature
               %arithmetic-operator-alist)))
  ((filename "common/overrides")
   (free (guarantee system-global-environment))
   (defined
    (n:* n:+
         n:-
         n:/
         n:<
         n:<=
         n:=
         n:>
         n:>=
         n:abs
         n:acos
         n:angle
         n:asin
         n:atan
         n:boolean?
         n:ceiling
         n:cell?
         n:complex?
         n:cos
         n:exact-integer?
         n:exact-nonnegative-integer?
         n:exact-positive-integer?
         n:exact-rational?
         n:exp
         n:expt
         n:floor
         n:imag-part
         n:integer?
         n:list?
         n:log
         n:magnitude
         n:make-bundle-predicate
         n:make-cell
         n:make-polar
         n:make-rectangular
         n:max
         n:min
         n:negative?
         n:non-empty-list?
         n:null?
         n:number?
         n:pair?
         n:positive?
         n:pp
         n:pretty-print
         n:procedure?
         n:rational?
         n:real-part
         n:real?
         n:remainder
         n:round
         n:sin
         n:sqrt
         n:square
         n:string?
         n:symbol?
         n:tan
         n:truncate
         n:vector?
         n:zero?
         n:sign
         n:negate
         n:invert)))
  ((filename "common/package")
   (free
    (define-record-printer shallow-fluid-bind
      list
      environment-define
      cons
      environment-lookup
      environment-assigned?
      lset=
      cdr
      error
      assq
      map
      car
      guarantee-list-of
      any-object?
      n:symbol?
      is-pair-of
      %record?
      %record-ref
      eq?
      guarantee
      record-predicate
      record-constructor
      make-record-type))
   (defined
    (<package> %make-package
               package?
               package-debug-name
               package-bindings
               make-package
               package-names
               package-value
               similar-packages?
               package-installer
               install-package!
               with-installed-package!)))
  ((filename "common/predicate-counter")
   (free
    (parameterize* cons
                   list
                   write-line
                   predicate-name
                   car
                   cdr
                   notification-output-port
                   for-each
                   hash-table->alist
                   hash-table-ref/default
                   hash-table-update!
                   fix:+
                   hash-table-clear!
                   make-key-weak-eqv-hash-table
                   make-parameter))
   (defined
    (%predicate-counts reset-predicate-counts!
                       increment-predicate-count!
                       get-predicate-count
                       get-predicate-counts
                       with-predicate-counts)))
  ((filename "common/predicate-metadata")
   (free
    (boolean? symbol?
              number?
              get-predicate-metadata
              map
              cons
              set-predicate-metadata!))
   (defined
    (register-predicate! register-compound-predicate!
                         predicate-name
                         any-object?)))
  ((filename "common/predicates")
   (free
    (equal? eqv?
            eq?
            register-predicate!
            any
            car
            n:pair?
            cdr
            list
            n:list?
            every
            register-compound-predicate!
            call-with-output-string
            write
            predicate-name
            string-append
            list-of-type?
            error:wrong-type-argument
            not
            make-metadata-association))
   (defined
    (predicate? get-predicate-metadata
                set-predicate-metadata!
                guarantee
                error:not-a
                guarantee-list-of
                error:not-a-list-of
                predicate-description
                object->description
                is-list-of
                is-non-empty-list-of
                is-pair-of
                complement
                disjoin
                disjoin*
                conjoin
                conjoin*
                maybe-register-compound-predicate!
                equality-predicate-maker
                eq-predicate
                eqv-predicate
                equal-predicate)))
  ((filename "common/pretty-printer")
   (free
    (newline iota
             write-char
             for-each
             output-port/x-size
             write-string
             max
             last
             except-last-pair
             =
             <=
             vector?
             vector->list
             with-string-output-port
             write
             define-generic-procedure-handler
             pair?
             match-args
             car
             null?
             list
             cdr
             simple-generic-procedure
             cons
             +
             map
             apply
             -
             *
             length
             guarantee-list-of
             string-length
             string?
             %record?
             %record-ref
             eq?
             guarantee
             record-predicate
             record-constructor
             make-record-type
             current-output-port
             default-object?))
   (defined
    (pretty-print dp
                  space-width
                  <simple-token>
                  %make-simple-token
                  simple-token?
                  simple-token-string
                  make-simple-token
                  simple-token-width
                  <compound-token>
                  %make-compound-token
                  compound-token?
                  compound-token-open-string
                  compound-token-close-string
                  compound-token-separator-string
                  compound-token-contents
                  make-compound-token
                  compound-token-length
                  compound-token-width
                  token?
                  token-width
                  token->tree
                  tokenize
                  object->string
                  fits-in-width?
                  fits-as-column?
                  compound-token-width-as-column
                  fits-as-folded-column?
                  compound-token-width-as-folded-column
                  compute-column-width
                  print-token
                  print-token:flat
                  print-open
                  print-close
                  print-separator
                  print-compound-token:flat
                  print-compound-token:as-column
                  <cursor>
                  %make-cursor
                  cursor?
                  cursor-row
                  cursor-column
                  cursor-port
                  make-cursor
                  cursor-write-string
                  cursor-write-space
                  cursor-remaining-width
                  cursor-newline-indent)))
  ((filename "common/simple-tests")
   (free
    (read-char char-whitespace?
               eof-object?
               error
               pp-to-string
               string?
               member
               read-line
               condition?
               write-to-string
               string-append
               equal?
               read
               ignore-errors
               newline
               for-each
               filter
               call-with-values
               not
               n:=
               fresh-line
               values
               count
               make-bundle-predicate
               alist->bundle
               open-input-string
               call-with-truncated-output-string
               open-output-string
               with-output-to-port
               get-output-string!
               filter-map
               apply
               cpp
               shallow-fluid-bind
               pp
               cadddr
               caddr
               set-car!
               find-tail
               cddr
               null?
               eq?
               map
               list-head
               list-tail
               length
               n:>=
               pair?
               cdr
               cadr
               car
               reverse
               read-file
               pathname-default-type
               default-object
               make-parameter
               eval
               nearest-repl/environment
               display
               ->namestring
               write
               with-notification
               parameterize*
               cons
               list
               default-object?))
   (defined
    (load-inline-test load-inline-test-1
                      *test-eval*
                      *test-env*
                      read-test-expressions
                      group-expressions
                      parse-expectations
                      parse-expectation
                      match-head
                      is-quotation?
                      quotation-text
                      define-expectation-rule
                      expectation-rules
                      make-expectation-rule
                      expectation-rule-keyword
                      expectation-rule-n-args
                      expectation-rule-handler
                      *groups-to-test*
                      *current-group*
                      *test-results*
                      execute-grouped-expressions
                      execute-grouped-expression
                      show-test-expressions?
                      maybe-show-test-expression
                      make-expectation-context
                      expectation-context?
                      skeletal-test-results
                      summarize-test-results
                      summarize-failing-results
                      failing-test-result?
                      summarize-failing-result
                      read-written-value)))
  ((filename "common/trie")
   (free
    (predicate-name filter
                    map
                    increment-predicate-count!
                    append-map
                    list
                    cons
                    assv
                    n:pair?
                    cdr
                    car
                    error
                    %record-set!
                    %record?
                    %record-ref
                    eq?
                    guarantee
                    record-predicate
                    record-constructor
                    make-record-type))
   (defined
    (<trie> %make-trie
            trie?
            %trie-value
            set-trie-value!
            trie-edge-alist
            set-trie-edge-alist!
            make-trie
            trie-has-value?
            trie-value
            intern-path-trie
            add-edge-to-trie
            set-path-value!
            get-matching-tries
            apply-predicate
            get-all-values
            get-a-value
            get-a-value-by-filtering
            get-a-value-by-searching
            %find-all-edges
            %try-edges
            %try-edge
            trie-entries)))
  ((filename "common/utils")
   (free
    (fresh-line display
                string-find-next-char
                call-with-output-string
                pp
                param:pp-forced-x-size
                string-trim
                current-output-port
                param:print-hash-number-in-objects?
                repl:write-result-hash-numbers?
                entity-extra
                entity?
                define-print-method
                record-predicate
                default-object?
                record-type-descriptor
                record-type-name
                standard-print-method
                parameterize*
                param:suppress-loading-message?
                load
                apply
                environment-lookup
                environment-bound?
                system-global-environment
                make-strong-eq-hash-table
                hash-table-intern!
                microcode-type
                object-type?
                ->environment
                object-type
                register-predicate!
                n:make-bundle-predicate
                default-object
                null?
                error:not-a
                alist?
                cadr
                cddr
                list?
                even?
                odd?
                quotient
                n:expt
                sort
                any
                lset-difference
                filter
                lset-adjoin
                pair?
                eqv?
                for-each
                find
                list
                set-cdr!
                guarantee-list-of
                n:non-empty-list?
                append
                take
                drop
                cdr
                guarantee
                n:list?
                append-map
                cons
                list-ref
                map
                iota
                n:pair?
                n:<=
                n:-
                n:magnitude
                n:+
                n:max
                flo:ulp-of-one
                n:*
                exact?
                n:=
                n:>
                n:<
                not
                eq?
                reduce-right
                car
                length
                negative?
                positive?))
   (defined
    (sign compose
          compose*
          ~<?
          ~>?
          ~=?
          default-equality-tolerance
          close-enuf?
          all-permutations-of
          delete-item
          elementwise-lists-of
          partition-by-key
          recursive-substitute
          subsuming-adjoiner
          sort-by
          for-each-distinct-pair
          all-sequences-of
          index->choices
          plist?
          plist->alist
          alist->plist
          plist-value
          make-bundle-predicate
          implementation-type-name
          microcode-type/code->name
          implementation-type-predicate
          %implementation-type-predicates
          has-implementation-value?
          get-implementation-value
          save-environment!
          load-quietly
          define-record-printer
          define-entity-printer
          cpp
          pp-to-string)))
  ((filename "compiling-to-execution-procedures/analyze")
   (free
    (advanced-memo? advanced-value
                    postponed-memo?
                    advance-memo!
                    postponed?
                    postponed-expression
                    postponed-environment
                    pair?
                    car
                    lazy-memo?
                    postpone-memo
                    executor?
                    lazy?
                    postpone
                    compound-procedure?
                    procedure-environment
                    extend-environment
                    procedure-parameter-name
                    procedure-body
                    n:=
                    procedure-parameters
                    length
                    not
                    environment?
                    executors?
                    strict-primitive-procedure?
                    apply-primitive-procedure
                    let*?
                    let*->let-nest
                    let?
                    let->combination
                    cond?
                    cond->if
                    compose
                    definition?
                    define-variable!
                    definition-variable
                    definition-value
                    assignment?
                    set-variable-value!
                    assignment-variable
                    assignment-value
                    begin?
                    reduce-right
                    null?
                    begin-actions
                    if?
                    if-predicate
                    if-consequent
                    if-alternative
                    lambda?
                    make-compound-procedure
                    lambda-parameters
                    lambda-body
                    quoted?
                    text-of-quotation
                    variable?
                    lookup-variable-value
                    define-generic-procedure-handler
                    self-evaluating?
                    match-args
                    operator
                    operands
                    map
                    simple-generic-procedure
                    application?
                    error
                    make-executor))
   (defined
    (x:eval analyze
            default-analyze
            x:analyze
            analyze-application
            analyze-self-evaluating
            analyze-variable
            analyze-quoted
            analyze-lambda
            analyze-if
            analyze-begin
            analyze-assignment
            analyze-definition
            default-apply
            x:apply
            x:handle-operand
            x:advance)))
  ((filename "compiling-to-execution-procedures/executors")
   (free
    (make-bundle-predicate set-car!
                           cdr
                           list
                           car
                           eq?
                           last-pair
                           set-cdr!
                           alist->bundle
                           make-list
                           not
                           default-object?
                           apply
                           cons
                           list?
                           every
                           register-predicate!
                           make-metadata-association))
   (defined
    (executor? get-executor-metadata
               set-executor-metadata!
               executors?
               make-executor
               make-circular-buffer
               circular-buffer?
               get-execution-trace
               execution-trace)))
  ((filename "compiling-to-execution-procedures/repl")
   (free
    (advanced-memo? advanced-value
                    pp
                    define-generic-procedure-handler
                    write
                    deferred?
                    match-args
                    x:advance
                    compose
                    not
                    eof-object?
                    read
                    call-with-input-file
                    write-line
                    the-global-environment
                    x:eval
                    g:read
                    check-repl-initialized))
   (defined (repl load-library)))
  ((filename "continuations-to-amb/ambsch")
   (free
    (>= default-object?
        <=
        eval
        not
        cmdl-message/active
        write
        display
        fresh-line
        abort->nearest
        reset-deque!
        add-to-end!
        for-each
        reverse
        push!
        deque-empty?
        pop!
        make-parameter
        make-deque
        parameterize*
        car
        +
        within-continuation
        call/cc
        ill-formed-syntax
        list
        map
        cons
        null?
        cdr
        pair?))
   (defined
    (amb *number-of-calls-to-fail*
         amb-list
         maybe-set!
         effect-wrapper
         with-depth-first-schedule
         with-breadth-first-schedule
         empty-search-schedule
         *search-schedule*
         yield
         force-next
         add-to-depth-first-search-schedule
         add-to-breadth-first-search-schedule
         init-amb
         add-to-search-schedule
         *top-level*
         require
         amb-eval
         an-integer-between
         amb-collect-values)))
  ((filename "continuations-to-amb/deque")
   (free
    (error cdr
           car
           set-cdr!
           cons
           memq
           not
           pair?
           %record-set!
           %record?
           %record-ref
           eq?
           guarantee
           record-predicate
           record-constructor
           make-record-type))
   (defined
    (<deque> %make-deque
             deque?
             deque-front
             set-deque-front!
             deque-back
             set-deque-back!
             make-deque
             reset-deque!
             deque-empty?
             dequed?
             push!
             add-to-end!
             pop!)))
  ((filename "continuations/analyze-extra")
   (free
    (null? execute-operands
           the-empty-environment
           cadr
           make-executor
           %record?
           %record-ref
           guarantee
           record-predicate
           record-constructor
           make-record-type
           define-generic-procedure-handler
           a:apply
           failure?
           success?
           environment?
           executors?
           match-args
           execute-strict
           car
           error
           n:=
           length
           not
           define-initial-env-binding
           register-predicate!
           eq?
           list))
   (defined
    (call/ccs call/ccs?
              <reified-succeed>
              make-reified-succeed
              reified-succeed?
              reified-succeed-procedure
              <reified-fail>
              make-reified-fail
              reified-fail?
              reified-fail-procedure
              constant-executor)))
  ((filename "dependencies/support-layer")
   (free
    (n:number? n:zero?
               exact?
               <
               support-set-elements
               length
               base-layer-value
               apply
               support-set-union
               map
               layer-accessor
               support-set
               eq?
               list
               cons
               layer?
               alist->bundle
               make-annotation-layer))
   (defined
    (support-layer support-layer-value
                   support:default-procedure
                   support:*
                   support:/
                   support:atan2
                   exact-zero?)))
  ((filename "dependencies/support-sets")
   (free
    (any every
         filter
         lset-difference
         not
         lset<=
         lset=
         map
         lset-union
         eqv?
         lset-adjoin
         apply
         guarantee
         delete-duplicates
         null?
         register-predicate!
         pair?
         list?
         cdr
         car
         eq?
         cons))
   (defined
    (%make-support-set support-set?
                       support-set-elements
                       make-support-set
                       support-set
                       %empty-support-set
                       support-set-empty?
                       support-set-adjoin
                       support-set-union
                       support-set=
                       support-set<=
                       support-set<
                       support-set-remove
                       support-set-filter
                       support-set-every
                       support-set-any)))
  ((filename "design-of-the-matcher/general") (free (eq? pp error not))
                                              (defined (assert)))
  ((filename "design-of-the-matcher/matcher")
   (free
    (reverse memv
             cons
             match:var-name
             match:var?
             match:var-type
             eq?
             map
             pp
             list
             match:new-dict
             =
             match:bindings
             list-tail
             error
             >
             cdr
             null?
             list?
             <=
             +
             list-head
             length
             match:binding-value
             equal?
             match:extend-dict
             match:lookup
             match:satisfies-restriction?
             eqv?
             car
             pair?))
   (defined
    (match:eqv match:element
               match:element-no-restriction
               match:segment
               match:segment-equal?
               match:list
               matcher
               run-matcher
               print-all-matches
               match:compile-pattern
               match:pattern-names)))
  ((filename "efficient-generic-procedures/cached-generics")
   (free
    (cache-wrapped-dispatch-store make-trie-dispatch-store
                                  implementation-type-name
                                  make-default-dispatch-store))
   (defined ()))
  ((filename "efficient-generic-procedures/trie-generics")
   (free (make-trie-dispatch-store make-default-dispatch-store))
   (defined ()))
  ((filename "exploratory-behavior/analyze")
   (free
    (advanced-memo? advanced-value
                    postponed-memo?
                    advance-memo!
                    continue-revert!
                    postponed?
                    postponed-environment
                    postponed-expression
                    lazy-memo?
                    postpone-memo
                    executor?
                    lazy?
                    postpone
                    list
                    compound-procedure?
                    cons
                    extend-environment
                    procedure-parameter-name
                    procedure-environment
                    procedure-body
                    n:=
                    procedure-parameters
                    length
                    environment?
                    executors?
                    strict-primitive-procedure?
                    apply-primitive-procedure
                    amb?
                    pair?
                    cdr
                    car
                    amb-alternatives
                    let*?
                    let*->let-nest
                    let?
                    let->combination
                    cond?
                    cond->if
                    compose
                    definition?
                    define-variable!
                    definition-variable
                    definition-value
                    assignment?
                    undoable-assignment?
                    set-variable-value!
                    assignment-variable
                    assignment-value
                    begin?
                    reduce-right
                    null?
                    begin-actions
                    if?
                    if-predicate
                    if-consequent
                    if-alternative
                    lambda?
                    make-compound-procedure
                    lambda-parameters
                    lambda-body
                    quoted?
                    text-of-quotation
                    variable?
                    lookup-variable-value
                    define-generic-procedure-handler
                    self-evaluating?
                    match-args
                    operator
                    operands
                    map
                    simple-generic-procedure
                    application?
                    not
                    success?
                    error
                    failure?
                    make-executor))
   (defined
    (a:eval analyze
            check-executor-args
            execute-strict
            default-analyze
            a:analyze
            analyze-application
            analyze-self-evaluating
            analyze-variable
            analyze-quoted
            analyze-lambda
            analyze-if
            analyze-begin
            analyze-undoable-assignment
            analyze-assignment
            analyze-definition
            analyze-amb
            default-apply
            a:apply
            execute-operands
            a:handle-operand
            a:advance)))
  ((filename "exploratory-behavior/repl")
   (free
    (advanced-memo? write-line
                    define-generic-procedure-handler
                    write
                    deferred?
                    match-args
                    a:advance
                    not
                    eof-object?
                    error
                    car
                    read
                    call-with-input-file
                    check-repl-initialized
                    prompt-for-command-expression
                    eq?
                    a:eval
                    the-global-environment
                    newline
                    pp
                    display))
   (defined (input-prompt output-prompt repl load-library doit!)))
  ((filename "exploratory-behavior/rtdata")
   (free (vector-set! register-predicate! procedure?))
   (defined (success? failure? continue-revert!)))
  ((filename "generic-interpreter/interp")
   (free
    (procedure-body procedure-environment
                    extend-environment
                    n:=
                    length
                    not
                    compound-procedure?
                    procedure-parameters
                    symbol?
                    every
                    map
                    operands?
                    strict-primitive-procedure?
                    apply-primitive-procedure
                    assignment?
                    assignment-value
                    assignment-variable
                    set-variable-value!
                    definition?
                    definition-value
                    definition-variable
                    define-variable!
                    null?
                    car
                    cdr
                    begin?
                    begin-actions
                    let?
                    let->combination
                    cond?
                    cond->if
                    if?
                    if-alternative
                    if-consequent
                    if-predicate
                    lambda?
                    lambda-body
                    lambda-parameters
                    make-compound-procedure
                    quoted?
                    text-of-quotation
                    variable?
                    lookup-variable-value
                    define-generic-procedure-handler
                    environment?
                    self-evaluating?
                    match-args
                    simple-generic-procedure
                    error
                    operator
                    operands
                    application?))
   (defined
    (default-eval g:eval
                  g:advance
                  evaluate-sequence
                  default-apply
                  g:apply
                  eval-operands
                  strict-compound-procedure?)))
  ((filename "generic-interpreter/repl")
   (free
    (not eof-object?
         read
         call-with-input-file
         write-line
         the-global-environment
         g:eval
         g:read
         check-repl-initialized))
   (defined (repl load-library)))
  ((filename "generic-interpreter/shared-repl")
   (free
    (repl prompt-for-command-expression
          define-generic-procedure-handler
          compound-procedure?
          match-args
          procedure-printable-representation
          compose
          simple-generic-procedure
          user-initial-environment
          eq?
          error
          make-global-environment))
   (defined
    (the-global-environment initialize-repl!
                            check-repl-initialized
                            write
                            write-line
                            pp
                            g:read
                            init
                            go)))
  ((filename "generic-interpreter/shared-rtdata")
   (free
    (define-generic-procedure-handler match-args
      simple-generic-procedure
      constant-generic-procedure-handler
      vector?
      map
      set-cdr!
      assq
      cons
      vector-set!
      set-car!
      lexical-reference
      car
      cdr
      null?
      vector-ref
      not
      length
      fix:=
      error
      fix:<
      vector
      %record?
      %record-ref
      eq?
      guarantee
      record-predicate
      record-constructor
      make-record-type
      apply
      procedure?
      register-predicate!
      list))
   (defined
    (the-unspecified-value true?
                           false?
                           strict-primitive-procedure?
                           apply-primitive-procedure
                           <*compound-procedure>
                           make-compound-procedure
                           compound-procedure?
                           procedure-parameters
                           procedure-body
                           procedure-environment
                           procedure-printable-representation
                           environment?
                           extend-environment
                           environment-variables
                           environment-values
                           environment-parent
                           the-empty-environment
                           lookup-variable-value
                           lookup-scheme-value
                           define-variable!
                           set-variable-value!
                           initial-env-bindings
                           define-initial-env-binding
                           make-global-environment
                           postpone
                           postpone-memo
                           postponed-expression
                           postponed-environment
                           postponed?
                           postponed-memo?
                           advanced-memo?
                           advance-memo!
                           advanced-value
                           deferred?)))
  ((filename "generic-interpreter/shared-syntax")
   (free
    (list? map
           append-map
           error
           cdddr
           null?
           cadddr
           not
           cdr
           memq
           simple-generic-procedure
           list
           cdadr
           cddr
           cons
           caadr
           caddr
           cadr
           pair?
           car
           eq?
           symbol?
           register-predicate!
           boolean?
           string?
           number?))
   (defined
    (self-evaluating? variable?
                      same-variable?
                      tagged-list?
                      quoted?
                      text-of-quotation
                      assignment?
                      undoable-assignment?
                      assignment-variable
                      assignment-value
                      definition?
                      definition-variable
                      definition-value
                      lambda?
                      lambda-parameters
                      lambda-body
                      make-lambda
                      procedure-parameter-name
                      parameter-name
                      lazy?
                      lazy-memo?
                      if?
                      if-predicate
                      if-consequent
                      if-alternative
                      make-if
                      cond?
                      cond-clauses
                      cond-clause-predicate
                      cond-clause-consequent
                      else-clause?
                      cond->if
                      sequence->begin
                      begin?
                      begin-actions
                      make-begin
                      let?
                      let-varspecs
                      let-bound-variables
                      let-bound-values
                      let-body
                      let->combination
                      let*?
                      let*->let-nest
                      application?
                      operands?
                      operand?
                      no-args?
                      args-application?
                      operator
                      operands
                      last-operand?
                      no-operands?
                      first-operand
                      rest-operands
                      amb?
                      amb-alternatives)))
  ((filename "generic-procedures/generic-arith")
   (free
    (*current-arithmetic* find-arithmetic-operation
                          symbol?
                          define-generic-procedure-extractor
                          arithmetic-procedure-metadata
                          arithmetic-procedure?
                          simple-operation-procedure
                          arithmetic-operation
                          operation-procedure
                          operation-applicability
                          define-generic-procedure-handler
                          arithmetic-operators
                          for-each
                          find-arithmetic-constant
                          arithmetic-constant-binding
                          cdr
                          set-cdr!
                          arithmetic-constant-names
                          simple-operation
                          operator-arity
                          generic-procedure-constructor
                          constant-union
                          any-object?
                          make-arithmetic))
   (defined
    (make-generic-arithmetic add-to-generic-arithmetic!
                             add-generic-arith-constants!
                             add-generic-arith-operations!
                             extend-generic-arithmetic!)))
  ((filename "layers/layered-data")
   (free
    (make-arithmetic arithmetic-name
                     operation-procedure
                     any-arg
                     operator-arity
                     make-operation
                     complement
                     arithmetic-domain-predicate
                     conjoin
                     make-weak-alist-store
                     apply
                     filter-map
                     eqv?
                     lset-union
                     procedure?
                     make-metadata-association
                     register-predicate!
                     n:list?
                     n:pair?
                     every
                     guarantee
                     assv
                     cdr
                     car
                     map
                     symbol
                     null?
                     plist->alist
                     list
                     cons
                     alist->bundle
                     make-bundle-predicate))
   (defined
    (make-annotation-layer layer?
                           base-layer
                           layer-accessor
                           base-layer-value
                           layered-datum
                           make-layered-datum
                           layered-datum?
                           layer-alist?
                           layered-procedure?
                           layered-procedure-metadata
                           set-layered-procedure-metadata!
                           make-layered-procedure
                           define-layered-procedure-handler
                           layered-procedure-dispatcher
                           make-layered-metadata
                           layered-metadata?
                           layered-extender)))
  ((filename "layers/units")
   (free
    (not n:*
         n:-
         n:+
         make-arithmetic
         default-object
         simple-operation
         operator-codomain
         operator-arity
         n:=
         make-annotation-layer
         alist->bundle
         layer?
         list
         operator?
         apply
         map
         base-layer-value
         caar
         caadr
         plist?
         sort
         plist->alist
         symbol<?
         for-each
         error
         null?
         define-print-method
         alist->plist
         write
         system-global-environment
         equal?
         guarantee
         cons
         register-predicate!
         eq?
         car
         every
         symbol?
         exact-rational?
         cdr
         list?
         pair?))
   (defined
    (unit? %unit-tag
           alist->unit
           unit->alist
           unit=?
           unit:none
           unitless?
           unit
           sorted-alist-repeated-key?
           unit-layer
           unit-procedure
           unit-arithmetic
           unit:*
           unit:invert
           unit:expt
           unit:/
           unit:remainder
           unit:square
           unit:sqrt
           unit:atan
           unit:unary-comparison
           unit:binary-comparison
           unit:simple-unary-operation
           unit:simple-binary-operation
           unit:unitless-operation)))
  ((filename "non-strict-arguments/general-procedures")
   (free
    (pp write-line
        write
        deferred?
        compose
        advanced-memo?
        advanced-value
        postponed-memo?
        advance-memo!
        postponed?
        postponed-expression
        postponed-environment
        lazy-memo?
        postpone-memo
        operand?
        lazy?
        postpone
        simple-generic-procedure
        g:advance
        g:apply
        environment?
        operands?
        g:eval
        procedure-environment
        extend-environment
        map
        procedure-body
        error
        n:=
        length
        compound-procedure?
        procedure-parameters
        not
        symbol?
        any
        car
        match-args
        pair?
        procedure-parameter-name
        define-generic-procedure-handler))
   (defined (general-compound-procedure? g:handle-operand)))
  ((filename "pattern-matching-on-graphs/chess-board")
   (free
    (make-graph-view append-map
                     -
                     =
                     integer?
                     >=
                     <
                     exact?
                     register-predicate!
                     memq
                     cadr
                     car
                     guarantee
                     display
                     write
                     newline
                     reverse
                     write-string
                     eq?
                     generate-uninterned-symbol
                     match:binding-value
                     match:lookup
                     match:get-value
                     match:extend-dict
                     match:new-dict
                     graph-match
                     not
                     error
                     list-ref
                     graph-node-view
                     even?
                     list
                     cons
                     alist->bundle
                     string
                     make-graph-node
                     map
                     <=
                     +
                     for-each
                     last
                     iota))
   (defined
    (chess-board-size chess-board-indices
                      chess-board-last-index
                      make-chess-board
                      connect-up-square
                      for-each-direction
                      populate-sides
                      make-chess-board-internal
                      simple-move
                      capture?
                      chess-dict:board
                      chess-board:var
                      get-piece-to-move
                      the-board
                      start-chess-game
                      chess-move
                      print-chess-board
                      make-piece
                      piece-type
                      piece-color
                      piece-type?
                      piece-color?
                      no-piece-or-opponent?
                      piece-is-opponent?
                      change-piece-type
                      piece->string
                      make-address
                      address-x
                      address-y
                      address-index?
                      address=
                      address-x+
                      address-y+
                      invert-address
                      board-addresses
                      rotate-45
                      rotate-90
                      rotate-180
                      reflect-ew
                      reflect-ns
                      rotate-180-view)))
  ((filename "pattern-matching-on-graphs/chess-moves")
   (free
    (rotate-45 reflect-ew
               rotate-90
               rotate-180
               chess-dict:board
               not
               no-piece-or-opponent?
               match:get-value
               piece-type
               eq?
               null?
               append
               list
               pair?
               cadr
               match:var?
               symbol?
               cddr
               cons*
               map
               error
               cdar
               caar
               memq
               cdr
               car
               cons))
   (defined
    (rewrite-path-edges symmetrize-move
                        occupied-by
                        maybe-opponent
                        unoccupied
                        piece-in
                        basic-knight-move
                        all-knight-moves
                        basic-rook-move
                        all-rook-moves
                        basic-bishop-move
                        all-bishop-moves
                        basic-king-move
                        all-king-moves
                        basic-queen-move
                        all-queen-moves)))
  ((filename "pattern-matching-on-graphs/graph")
   (free
    (define-record-printer %record?
      %record-ref
      record-predicate
      record-constructor
      make-record-type
      null?
      eq?
      lset-intersection
      map
      newline
      n:pretty-print
      fresh-line
      pp
      entity?
      entity-extra
      guarantee
      apply
      make-entity
      every
      register-predicate!
      for-each
      cdr
      car
      plist->alist
      force
      promise?
      promise-forced?
      make-bundle-predicate
      alist->bundle
      list
      default-object?
      cons
      not
      error
      find
      eqv?
      list-copy))
   (defined
    (make-graph-node graph-node?
                     make-graph-edge
                     graph-edge?
                     graph-node
                     graph-edge-predicate
                     graph-node-applier
                     graph-node-applier->node
                     graph-node-applier?
                     pg
                     disjoint-union-of-graph-nodes
                     <graph-view>
                     make-graph-view
                     graph-view?
                     graph-view-name
                     graph-view-forward
                     graph-view-backward
                     invert-graph-view
                     graph-edge-view
                     graph-node-view)))
  ((filename "pattern-matching-on-graphs/graph-match")
   (free
    (match:var-type list
                    match:map-bindings
                    match:map-binding-value
                    cons
                    match:binding-name
                    match:extend-dict
                    match:lookup
                    match:make-var
                    procedure?
                    caddr
                    eqv?
                    graph-node?
                    map
                    match:binding-value
                    match:binding-type
                    reverse
                    match:var-name
                    define-generic-procedure-handler
                    match:var?
                    match-args
                    constant-generic-procedure-handler
                    list?
                    length
                    n:>=
                    not
                    cadr
                    symbol?
                    null?
                    pair?
                    car
                    match:element-var?
                    cdr
                    error
                    eq?))
   (defined
    (graph-match gmatch:var-type?
                 gmatch:compile-path
                 gmatch:finish-compile-path
                 gmatch:anonymous-var?
                 gmatch:named-sequence-var?
                 gmatch:compile-path-elts
                 gmatch:compile-path-elt
                 gmatch:compile-*
                 gmatch:compile-+
                 gmatch:compile-opt
                 gmatch:compile-or
                 gmatch:compile-and
                 gmatch:*
                 gmatch:seq2
                 gmatch:or
                 gmatch:and
                 gmatch:compile-edge
                 gmatch:compile-target
                 gmatch:compile-var
                 match-list?
                 gmatch:var-matcher
                 gmatch:bind)))
  ((filename "pattern-matching-on-graphs/lists")
   (free
    (eqv? not
          error
          make-graph-node
          make-unforced-promise
          make-promise
          car
          cdr
          pair?))
   (defined
    (list->graph list->lazy-graph
                 list->extensible-lazy-graph
                 nil
                 g:null
                 g:null?
                 g:cons
                 g:car
                 g:cdr
                 g:has-cdr?
                 g:last-pair
                 g:last
                 g:append!)))
  ((filename "propagation/cells")
   (free
    (define-generic-procedure-handler unusable-value?
      match-args
      pp
      parameterize*
      current-reason-source
      set-predicate<=!
      relatable?
      make-bundle-predicate
      make-relations
      *all-cells*
      add-child!
      *my-parent*
      alist->bundle
      cons
      list
      equivalent?
      alert-propagators!
      handle-cell-contradiction
      strongest-value
      get-name
      eq?
      lset-adjoin))
   (defined
    (make-cell cell?
               cell-merge
               add-cell-neighbor!
               cell-content
               cell-strongest
               add-cell-content!
               test-cell-content!
               set-cell-probe!
               clear-cell-probe!
               simple-probe
               the-nothing
               nothing?
               the-contradiction
               contradiction?
               general-contradiction?)))
  ((filename "propagation/constraint-propagators")
   (free
    (binary-amb add-cell-content!
                p:abs
                make-cell
                p:amb
                p:sqrt
                p:square
                p:not
                p:pmi
                p:ro
                p:or
                p:imp
                p:dna
                p:and
                p:=
                p:spst-switch
                p:->
                p:atan
                p:tan
                p:acos
                p:cos
                p:asin
                p:sin
                p:log
                p:exp
                p:invert
                p:negate
                p:/
                p:*
                list
                p:-
                p:+
                compound-propagator))
   (defined
    (constraint-propagator c:+
                           c:*
                           c:negate
                           c:invert
                           c:exp
                           c:sin
                           c:cos
                           c:tan
                           c:same
                           c:controlled-same
                           c:full-same
                           c:and
                           c:or
                           c:implies
                           c:not
                           c:quadratic
                           p:honest-sqrt
                           c:square
                           c:abs
                           c:choose-exactly-one)))
  ((filename "propagation/data-model")
   (free
    (make-layered-procedure the-contradiction
                            contradiction?
                            nothing?
                            constant-generic-procedure-handler
                            define-generic-procedure-handler
                            n:number?
                            match-args
                            ~=?
                            eqv?
                            base-layer-value
                            simple-generic-procedure))
   (defined
    (get-base-value equivalent?
                    g:equivalent?
                    value-implies?
                    unusable-value?
                    strongest-value
                    merge
                    merge-layered
                    merge-metadata
                    merge-metadata-layered)))
  ((filename "propagation/examples/example-support")
   (free
    (c:same p:->
            c:*
            p:amb
            require-distinct
            c:abs
            c:+
            p:>
            p:=
            n:-
            n:*
            n:atan
            extend-arithmetic
            layered-extender
            numeric-arithmetic
            p:<
            p:abs
            p:-
            p:*
            p:not
            p:spst-switch
            p:/
            p:+
            ensure-cell
            make-cell
            list
            compound-propagator))
   (defined
    (heron-step sqrt-network
                sqrt-iter
                good-enuf?
                layered-arith
                :2pi
                :pi
                :pi/2
                :-pi/2
                multiple-dwelling
                killer
                pythagorean-1
                pythagorean-2
                pythagorean-3
                pythagorean-4)))
  ((filename "propagation/examples/hms-dms-radians")
   (free (list - truncate + car cadr caddr / :2pi *))
   (defined
    (degrees->radians radians->degrees
                      xms->x
                      x->xms
                      dms->d
                      d->dms
                      dms->radians
                      radians->dms
                      hours->radians
                      radians->hours
                      hms->h
                      h->hms
                      hms->radians
                      radians->hms)))
  ((filename "propagation/examples/intervals")
   (free
    (the-contradiction merge
                       make-arithmetic
                       numeric-arithmetic
                       default-object
                       make-operation
                       operator-arity
                       map
                       apply
                       ~>?
                       ~<?
                       g:equivalent?
                       match-args
                       ~=?
                       n:abs
                       n:sign
                       n:atan
                       n:<
                       n:tan
                       n:acos
                       :pi
                       n:cos
                       n:asin
                       :pi/2
                       :-pi/2
                       n:sin
                       error
                       n:log
                       n:exp
                       n:sqrt
                       n:square
                       n:/
                       n:*
                       n:-
                       n:+
                       define-generic-procedure-handler
                       value-implies?
                       real?
                       any-arg
                       not
                       n:>=
                       n:<=
                       n:max
                       n:min
                       n:>
                       caddr
                       cadr
                       register-predicate!
                       list?
                       eq?
                       car
                       length
                       n:=
                       list))
   (defined
    (make-interval interval?
                   interval-low
                   interval-high
                   interval
                   ->interval
                   empty-interval?
                   intersect-intervals
                   subinterval?
                   within-interval?
                   add-interval
                   sub-interval
                   mul-interval
                   div-interval
                   square-interval
                   sqrt-interval
                   exp-interval
                   log-interval
                   sin-interval
                   asin-interval
                   cos-interval
                   acos-interval
                   tan-interval
                   atan-interval
                   sign-interval
                   negate-interval
                   invert-interval
                   abs-interval
                   interval=?
                   interval<?
                   interval>?
                   interval<=?
                   interval>=?
                   interval-extender
                   merge-interval-real
                   merge-intervals
                   +->interval
                   interval>+-)))
  ((filename "propagation/examples/puzzle-utilities")
   (free
    (n:= length
         binary-amb
         cadr
         car
         p:conditional
         error
         cdr
         n:>
         list
         map
         ensure-cell
         for-each-distinct-pair
         make-cell
         abhor
         p:=
         compound-propagator))
   (defined (require-distinct one-of one-of-the-cells)))
  ((filename "propagation/examples/time")
   (free
    (install-arithmetic! layered-arith
                         layered-propagator-projector
                         merge-value-sets
                         install-core-propagators!
                         initialize-scheduler
                         multiple-dwelling
                         run
                         map
                         cell-strongest
                         get-base-value
                         cpp
                         error
                         equal?
                         not
                         *number-of-calls-to-fail*
                         show-time))
   (defined (run-timed-test)))
  ((filename "propagation/hierarchy")
   (free
    (pair? find
           equal?
           cdr
           car
           not
           reverse
           symbol?
           error
           map
           make-parameter
           set-predicate<=!
           guarantee
           register-predicate!
           bundle?
           bundle-predicate
           predicate<=
           make-bundle-predicate
           alist->bundle
           cons
           list
           eq?
           lset-adjoin))
   (defined
    (make-relations relations?
                    relatable?
                    get-name
                    get-parent
                    get-children
                    add-child!
                    top-level-parent?
                    universal-ancestor
                    *my-parent*
                    clear-relatable-hierarchy!
                    path-of
                    ancestry
                    path->thing)))
  ((filename "propagation/premises")
   (free
    (set-predicate<=! relatable?
                      path-of
                      add-child!
                      supported
                      support-set
                      add-cell-content!
                      symbol
                      object->string
                      make-relations
                      map
                      *my-parent*
                      parameterize*
                      subsuming-adjoiner
                      support-set=
                      support-set<=
                      support-set-every
                      not
                      hash-table-ref
                      hash-table/intern!
                      hash-table-exists?
                      hash-table/clear!
                      make-key-weak-eqv-hash-table
                      make-bundle-predicate
                      alist->bundle
                      cons
                      list
                      eqv?
                      lset-adjoin
                      for-each
                      test-cell-content!
                      all-cells
                      all-amb-propagators
                      alert-propagator!
                      warn
                      eq?))
   (defined
    (make-premise-metadata premise-metadata?
                           premise-metadata-table
                           *trace-premise-transitions?*
                           clear-premises!
                           premise?
                           register-premise!
                           %premise-metadata
                           premise-in?
                           premise-out?
                           mark-premise-in!
                           mark-premise-out!
                           all-premises-in?
                           premise-nogoods
                           set-premise-nogoods!
                           adjoin-support-with-subsumption
                           make-hypotheticals
                           %make-hypothetical
                           hypothetical?)))
  ((filename "propagation/primitive-propagators")
   (free
    (propagator cell-strongest
                unusable-value?
                add-cell-content!
                compound-propagator
                get-name
                make-package
                cons
                primitive-propagator
                not
                boolean/and
                boolean/or
                car
                caddr
                cadr
                n:number?
                n:<=
                flo:ulp-of-one
                n:*
                n:magnitude
                n:=
                exact?
                get-base-value
                make-arithmetic
                arithmetic-domain-predicate
                transform-operation-procedure
                the-nothing
                arithmetic-name
                arithmetic-operators
                list
                symbol
                arithmetic-operation
                operation-procedure
                map
                eq?
                eqv?
                merge-metadata
                =
                merge-metadata-layered
                make-layered-procedure
                install-package!
                cell-merge))
   (defined
    (install-core-propagators! simple-propagator-projector
                               layered-propagator-projector
                               arithmetic-propagators
                               avoid-0/0-wrapper
                               ~zero?
                               p:*
                               p:+
                               p:-
                               p:->
                               p:/
                               p:<
                               p:<=
                               p:=
                               p:>
                               p:>=
                               p:abs
                               p:acos
                               p:and
                               p:angle
                               p:asin
                               p:atan
                               p:ceiling
                               p:conditional
                               p:conjoiner-dumb
                               p:cos
                               p:disjoiner-dumb
                               p:dna
                               p:exp
                               p:expt
                               p:floor
                               p:imag-part
                               p:imp
                               p:invert
                               p:log
                               p:magnitude
                               p:make-polar
                               p:make-rectangular
                               p:max
                               p:min
                               p:negate
                               p:negative?
                               p:not
                               p:or
                               p:pmi
                               p:positive?
                               p:real-part
                               p:remainder
                               p:ro
                               p:round
                               p:sin
                               p:spdt-switch
                               p:spst-switch
                               p:sqrt
                               p:square
                               p:tan
                               p:truncate
                               p:zero?
                               boolean-propagators
                               boolean/imp
                               boolean/pmi
                               boolean/dna
                               boolean/ro
                               primitive-propagators-package
                               shortcut-boolean-propagators
                               control-propagators)))
  ((filename "propagation/propagators")
   (free
    (every null?
           not
           map
           cell-strongest
           add-cell-content!
           apply
           unusable-value?
           any
           last-pair
           car
           except-last-pair
           parameterize*
           current-reason-source
           set-predicate<=!
           relatable?
           make-bundle-predicate
           get-name
           list
           cons
           alist->bundle
           *my-parent*
           add-child!
           add-cell-neighbor!
           for-each
           alert-propagator!
           make-relations
           cell?
           guarantee-list-of))
   (defined
    (propagator propagator?
                propagator-inputs
                propagator-outputs
                activate-propagator!
                primitive-propagator
                compound-propagator)))
  ((filename "propagation/reasons")
   (free
    (apply lset-union
           nothing?
           remove
           error
           map
           get-name
           propagator-inputs
           path-of
           merge-metadata-layered
           define-layered-procedure-handler
           merge-layered
           base-layer-value
           equivalent?
           strongest-value
           layer-accessor
           make-annotation-layer
           alist->bundle
           layer?
           cons
           make-parameter
           not
           relatable?
           eq?
           caddr
           propagator?
           car
           cadr
           length
           n:=
           list?
           list
           symbol?
           guarantee))
   (defined
    (absolute-reason reason-is-absolute?
                     propagation-reason
                     reason-is-propagation?
                     merge-reason
                     reason-is-merge?
                     reason-source
                     reason-args
                     unknown-reason
                     constant-reason
                     external-reason
                     current-reason-source
                     reason-layer
                     reason-layer-value
                     get-reason
                     decode-reason
                     show-reason-merges?
                     show-reason-merges
                     elide-reason-merges)))
  ((filename "propagation/scheduler")
   (free
    (activate-propagator! not
                          call/cc
                          parameterize*
                          make-parameter
                          for-each
                          guarantee
                          propagator?
                          make-bundle-predicate
                          list-copy
                          reverse!
                          lset-adjoin
                          eq?
                          null?
                          list
                          cons
                          alist->bundle
                          *number-of-calls-to-fail*
                          clear-premises!
                          clear-relatable-hierarchy!))
   (defined
    (*last-value-of-run* *current-propagator*
                         *all-cells*
                         initialize-scheduler
                         propagator-set
                         propagator-set?
                         alerted-propagators
                         propagators-ever-alerted
                         all-amb-propagators
                         alert-propagator!
                         alert-propagators!
                         all-propagators
                         all-cells
                         *abort-process*
                         abort-process
                         run
                         run-alerted)))
  ((filename "propagation/search")
   (free
    (< >
       +
       cdr
       set-cdr!
       assq
       list-ref
       length
       random
       n:=
       filter-map
       n:min
       apply
       add-cell-content!
       support-set
       supported
       abort-process
       bkpt
       adjoin-support-with-subsumption
       support-set-remove
       set-premise-nogoods!
       n:+
       warn
       support-layer-value
       cell-strongest
       error
       contradiction-set
       values
       support-set-empty?
       support-set-filter
       last
       sort-by
       support-set-elements
       hypothetical?
       count
       call-with-values
       append-map
       support-set-union
       reduce-right
       eq?
       for-each
       map
       not
       any
       find
       make-hypotheticals
       cadr
       car
       all-amb-propagators
       cons
       list
       propagator
       filter
       all-premises-in?
       premise-nogoods
       mark-premise-in!
       mark-premise-out!
       null?))
   (defined
    (binary-amb p:amb
                cross-product-union
                pairwise-union
                process-contradictions
                choose-first-premise-in-strong-nogood
                choose-last-premise-in-strong-nogood
                choose-premise-to-disbelieve
                choose-first-hypothetical
                handle-cell-contradiction
                *trace-cell-contradictions*
                *number-of-calls-to-fail*
                *debugging-contradiction*
                update-failure-count!
                save-nogood!
                maybe-kick-out
                require
                abhor
                choose-random-premise-from-strong-nogood
                choose-any-hypothetical
                choose-strongest-and-most-common-premise
                choose-strongest-and-least-common-premise
                choose-most-common-premise
                choose-least-common-premise
                choose-random-premise
                choose-random-element
                make-histogram
                choose-most-common-item
                choose-least-common-item)))
  ((filename "propagation/sugar")
   (free
    (append cadadr
            cadr
            caddr
            caadr
            cdadr
            cddr
            cell?
            make-cell
            add-cell-content!
            cons
            map
            equal?
            ill-formed-syntax
            list
            car
            null?
            cdr
            pair?))
   (defined
    (define-cell let-cells
      normalize-let-clauses
      let-cell
      let-cells*
      ensure-cell
      define-c:prop
      define-p:prop)))
  ((filename "propagation/support-extra")
   (free
    (define-layered-procedure-handler merge-layered
      support-layer
      base-layer-value
      support-set-union
      the-nothing
      all-premises-in?
      unusable-value?
      match-args
      support-set-any
      premise-out?
      define-generic-procedure-handler
      g:equivalent?
      any-object?
      layered-datum?
      any-arg
      support-set=
      get-base-value
      equivalent?
      strongest-value
      support-layer-value))
   (defined (get-support support:merge)))
  ((filename "propagation/ui")
   (free
    (numeric-arithmetic extend-arithmetic
                        layered-extender
                        install-arithmetic!
                        layered-propagator-projector
                        merge-value-sets
                        install-core-propagators!
                        pair?
                        process-contradictions
                        support-set
                        support-set-union
                        reduce
                        support-set?
                        reason-layer
                        support-layer
                        layered-datum
                        simple-generic-procedure
                        support-set-empty?
                        append
                        parameterize*
                        param:flonum-printer-cutoff
                        cell-strongest
                        get-support
                        n:=
                        cadr
                        eq?
                        list?
                        mark-premise-in!
                        mark-premise-out!
                        premise?
                        guarantee
                        cell?
                        register-premise!
                        *last-value-of-run*
                        null?
                        make-support-set
                        add-cell-content!
                        run
                        layered-datum?
                        reason-layer-value
                        support-layer-value
                        get-base-value
                        decode-reason
                        map
                        support-set-elements
                        all-premises-in?
                        cons
                        cpp
                        >
                        length
                        equivalent?
                        car
                        not
                        list
                        value-set-elements
                        value-set?
                        strongest-value
                        fresh-line
                        display
                        write
                        for-each
                        newline
                        cell-content
                        path-of))
   (defined
    (what-is-in write-labeled
                what-is-this
                print-supported
                supported-value-description
                tell!
                retract!
                kick-out!
                assert!
                bring-in!
                print-run-result
                get-value-in
                get-premises
                inquire
                inquire-internal
                inquire-value-description
                presentation-value
                presentation-base-value
                supported
                force-failure!
                all-results
                setup-propagator-system)))
  ((filename "propagation/value-sets")
   (free
    (fold merge-layered
          the-nothing
          all-premises-in?
          filter
          value-implies?
          base-layer-value
          support-layer-value
          support-set<=
          any
          lset-adjoin
          equivalent?
          map
          apply
          strongest-value
          unusable-value?
          define-generic-procedure-handler
          get-base-value
          match-args
          list?
          remove
          nothing?
          register-predicate!
          %record?
          %record-ref
          eq?
          guarantee
          record-predicate
          record-constructor
          make-record-type))
   (defined
    (<value-set> %make-value-set
                 value-set?
                 value-set-elements
                 make-value-set
                 value-set
                 ->value-set
                 map-value-set
                 merge-value-sets
                 value-set-adjoin
                 element-subsumes?
                 strongest-consequence)))
  ((filename "regular-expressions/regexp")
   (free
    (reverse substring
             +
             substring-find-next-char
             <
             run-shell-command
             get-output-string
             open-output-string
             load-option
             char=?
             display
             not
             -
             =
             make-list
             pair?
             car
             cdr
             string-append
             apply
             remove
             append
             cons
             eq?
             eqv?
             lset=
             string-length
             list->string
             string->list
             memv
             list
             append-map))
   (defined
    (r:dot r:bol
           r:eol
           r:quote
           chars-needing-quoting
           r:char-from
           r:char-not-from
           bracket
           quote-bracketed-contents
           chars-needing-quoting-in-brackets
           r:seq
           r:alt
           r:repeat-from-text
           r:repeat
           write-bourne-shell-grep-command
           bourne-shell-grep-command-string
           bourne-shell-quote-string
           r:grep
           r:split-lines)))
  ((filename "term-rewriting/pattern-operator")
   (free
    (make-metadata-association set-cdr!
                               list
                               append
                               last
                               cons
                               except-last-pair
                               pair?
                               try-rules
                               cdr
                               try-rule
                               error))
   (defined
    (make-pattern-operator attach-rule!
                           override-rule!
                           pattern-metadata
                           set-pattern-metadata!)))
  ((filename "term-rewriting/rule-implementation")
   (free
    (list match:pattern-names
          cadr
          caddr
          match:compile-pattern
          match:all-values
          apply
          run-matcher))
   (defined (make-rule rule)))
  ((filename "term-rewriting/rules")
   (free
    (* +
       append
       error
       cdar
       caar
       symbol?
       symbol<?
       number?
       cons
       <
       >
       length
       make-rule
       list
       null?
       cdr
       car
       list?
       map))
   (defined
    (rule-simplifier memoize-simplifier
                     try-rules
                     try-rule
                     algebra-1
                     list<?
                     expr<?
                     algebra-2)))
  ((filename "unification/type-resolver")
   (free
    (last cons*
          >
          append-map
          not
          >=
          list-of-unique-symbols?
          append
          cadddr
          disjoin
          number?
          define-generic-procedure-handler
          any-object?
          boolean?
          match-args
          memq
          call-with-values
          guarantee
          values
          any
          +
          symbol
          default-object?
          null?
          cddr
          cdddr
          symbol?
          list?
          eq?
          length
          =
          unify
          caddr
          cadr
          error
          cdr
          pair?
          set-car!
          car
          assq
          map
          cons
          list
          simple-generic-procedure
          for-each
          match:dict-substitution
          pp))
   (defined
    (noisy-infer-program-types infer-program-types
                               annotate-program
                               annotate-expr
                               top-level-env
                               make-top-level-env-frame
                               new-frame
                               get-var-type
                               make-type-cell
                               define-var-type
                               program-constraints
                               program-constraints-1
                               constrain
                               constraint-lhs
                               constraint-rhs
                               unify-constraints
                               simplify-annotated-program
                               simplify-annotated-program-1
                               make-texpr
                               texpr?
                               texpr-type
                               texpr-expr
                               type-expression?
                               type-variable?
                               type-variable
                               generate-unique-name
                               type-variable-name
                               primitive-type?
                               primitive-predicates
                               primitive-type
                               bottom-type
                               bottom-type?
                               boolean-type
                               boolean-type?
                               numeric-type
                               numeric-type?
                               parametric-type?
                               parametric-type-operators
                               define-parametric-type-operator
                               parametric-type-operator
                               parametric-type-operands
                               parametric-type-predicate
                               procedure-type
                               procedure-type?
                               procedure-type-domains
                               procedure-type-codomain
                               if-expr?
                               if-predicate
                               if-consequent
                               if-alternative
                               make-if-expr
                               lambda-expr?
                               bvl?
                               lambda-bvl
                               lambda-body
                               make-lambda-expr
                               combination-expr?
                               combination-operator
                               combination-operands
                               make-combination-expr
                               define-expr?
                               define-name
                               define-value
                               make-define-expr
                               begin-expr?
                               begin-exprs
                               make-begin-expr
                               splice-begin
                               declare-type-expr)))
  ((filename "unification/unify")
   (free
    (append complement
            match:segment-var?
            any-object?
            match:satisfies-restriction?
            match:extend-dict
            match:single-substitution
            match:map-dict-values
            match:occurs-in?
            match:element-var?
            match:vars-equal?
            match:get-value
            cons
            match:has-binding?
            define-generic-procedure-handler
            match-args
            match:var?
            eqv?
            cdr
            pair?
            car
            simple-generic-procedure
            list
            null?
            error
            list?
            not
            match:new-dict
            match:dict-substitution))
   (defined
    (unifier unify
             unify:internal
             unify:dispatch
             unify:fail
             unify:gdispatch
             car-satisfies
             unify:constant-terms
             constant-term?
             unify:list-terms
             list-term?
             maybe-substitute
             do-substitute
             element-1?
             element?
             unify:segment-var-var
             maybe-grab-segment
             grab-segment)))
  ((filename "user-defined-types/adventure-objects")
   (free
    (tell! map
           tick!
           screen?
           random-number
           possessive
           n:null?
           define-clock-handler
           random-choice
           flip-coin
           unregister-with-clock!
           register-with-clock!
           get-clock
           bias?
           not
           announce!
           get-heaven
           guarantee
           n:exact-positive-integer?
           -
           <
           delv
           n:>
           n:pair?
           cons
           say!
           narrate!
           any-object?
           n:exact-integer?
           most-specific-generic-procedure
           chaining-generic-procedure
           constant-generic-procedure-handler
           property-setter
           for-each
           append
           append-map
           remove
           filter
           find
           eqv?
           every
           n:list?
           direction?
           property-remover
           property-adder
           is-list-of
           send-message!
           message?
           tear-down!
           define-generic-procedure-handler
           set-up!
           match-args
           property-getter
           type-instantiator
           set-predicate<=!
           object?
           make-type
           list
           make-property))
   (defined
    (thing:location thing?
                    make-thing
                    get-location
                    container:things
                    container?
                    get-things
                    add-thing!
                    remove-thing!
                    exit:from
                    exit:to
                    exit:direction
                    exit?
                    make-exit
                    get-from
                    get-to
                    get-direction
                    place:vistas
                    place:exits
                    place?
                    make-place
                    get-vistas
                    add-vista!
                    get-exits
                    add-exit!
                    find-exit-in-direction
                    people-in-place
                    things-in-place
                    all-things-in-place
                    takeable-things
                    mobile-thing:origin
                    mobile-thing?
                    make-mobile-thing
                    set-location!
                    get-origin
                    enter-place!
                    leave-place!
                    person:health
                    person:bag
                    person?
                    get-health
                    set-health!
                    get-bag
                    when-alive
                    people-here
                    things-here
                    vistas-here
                    exits-here
                    peoples-things
                    suffer!
                    die!
                    resurrect!
                    bag:holder
                    bag?
                    make-bag
                    get-holder
                    set-holder!
                    autonomous-agent:restlessness
                    autonomous-agent:acquisitiveness
                    autonomous-agent?
                    get-restlessness
                    get-acquisitiveness
                    move-and-take-stuff!
                    move-somewhere!
                    take-something!
                    student?
                    make-student
                    house-master:irritability
                    house-master?
                    make-house-master
                    get-irritability
                    irritate-students!
                    troll:hunger
                    troll?
                    make-troll
                    get-hunger
                    eat-people!
                    avatar:screen
                    avatar?
                    make-avatar
                    get-screen
                    look-around
                    take-thing!
                    drop-thing!
                    take-exit!
                    move!
                    generic-move!
                    find-exit
                    move-internal!)))
  ((filename "user-defined-types/adventure-substrate")
   (free
    (%record-set! set-predicate<=!
                  output-port?
                  current-output-port
                  string-append
                  fresh-line
                  pair?
                  for-each
                  get-all-places
                  get-location
                  person?
                  tagged-data-description
                  tagged-data-representation
                  append
                  find
                  n:>=
                  n:/
                  n:real?
                  n:<=
                  n:+
                  n:list?
                  list-ref
                  length
                  random
                  n:pair?
                  call-with-output-string
                  display
                  register-predicate!
                  memv
                  delv
                  eqv?
                  lset-adjoin
                  define-generic-procedure-handler
                  match-args
                  symbol
                  most-specific-generic-procedure
                  predicate-accessor
                  set-cdr!
                  cdr
                  assv
                  car
                  procedure?
                  chaining-generic-procedure
                  constant-generic-procedure-handler
                  error
                  map
                  predicate-constructor
                  make-metadata-association
                  filter
                  all-predicate-supersets
                  append-map
                  tagged-data-data
                  guarantee-list-of
                  simple-abstract-predicate
                  define-record-printer
                  list
                  %record?
                  %record-ref
                  eq?
                  record-predicate
                  record-constructor
                  make-record-type
                  cons
                  any-object?
                  plist?
                  count
                  default-object?
                  plist-value
                  not
                  <=
                  n:symbol?
                  guarantee))
   (defined
    (make-property property-list?
                   get-predicate-property
                   get-default-supplier-property
                   property-default-keywords
                   property-keywords
                   <property>
                   %make-property
                   property?
                   property-name
                   property-predicate
                   property-default-supplier
                   property-optional?
                   make-type
                   get-binding
                   get-property-value
                   set-property-value!
                   type-properties
                   all-supertypes
                   type?
                   %type-properties
                   %set-type-properties!
                   type-instantiator
                   parse-plist
                   set-up!
                   tear-down!
                   instance-data?
                   make-instance-data
                   instance-data-bindings
                   instance-data-properties
                   instance-data-binding
                   property-getter
                   property-setter
                   %binding-set-prefix
                   property-modifier
                   property-adder
                   property-remover
                   direction?
                   known-directions
                   display-to-string
                   random-choice
                   random-number
                   bias?
                   random-bias
                   flip-coin
                   object:name
                   object:description
                   object?
                   get-name
                   get-description
                   find-object-by-name
                   send-message!
                   narrate!
                   tell!
                   say!
                   announce!
                   debug-output
                   enable-debugging
                   disable-debugging
                   display-message
                   display-item
                   message?
                   possessive
                   screen:port
                   screen?
                   make-screen
                   get-port
                   make-clock
                   <clock>
                   %make-clock
                   clock?
                   current-time
                   set-current-time!
                   clock-things
                   set-clock-things!
                   register-with-clock!
                   unregister-with-clock!
                   tick!
                   clock-tick!
                   define-clock-handler)))
  ((filename "user-defined-types/adventure-world")
   (free
    (add-vista! make-avatar
                make-screen
                make-troll
                make-house-master
                make-student
                make-exit
                make-place
                make-mobile-thing
                make-thing
                map
                random-bias
                append
                eqv?
                possessive
                place?
                all-things-in-place
                people-here
                find-object-by-name
                n:+
                tick!
                n:<
                not
                say!
                look-around
                n:pair?
                cons*
                get-things
                tell!
                default-object?
                drop-thing!
                take-thing!
                take-exit!
                list
                narrate!
                get-location
                find-exit-in-direction
                random-choice
                make-clock))
   (defined
    (the-clock all-places
               heaven
               all-people
               my-avatar
               start-adventure
               get-all-places
               get-heaven
               get-clock
               go
               take-thing
               drop-thing
               look-in-bag
               whats-here
               say
               tell
               hang-out
               here
               find-person
               find-thing
               person-or-place-things
               person-or-place-name
               local-possessive
               create-mit
               create-people
               create-students
               create-house-masters
               create-trolls
               create-thing
               create-mobile-thing
               create-place
               create-exit
               create-student
               create-house-master
               create-troll
               create-avatar
               can-go-both-ways
               can-see
               can-see-both-ways)))
  ((filename "user-defined-types/functions")
   (free
    (disjoin disjoin*
             object-union-components
             object-union?
             any
             every
             predicate<=
             filter-map
             object-union*
             guarantee-list-of
             make-object-union
             get-predicate
             for-each
             cons
             eqv?
             cdr
             n:null?
             define-generic-procedure-handler
             value-restriction
             predicate?
             match-args
             filter
             generic-procedure-handlers
             n:pair?
             generic-procedure?
             n:=
             value-fit
             combine-fits
             memq
             not
             %record?
             %record-ref
             record-predicate
             record-constructor
             make-record-type
             make-object-applicable
             set-predicate<=!
             applicable-object?
             applicable-object->object
             append-map
             list
             tag->predicate
             predicate->tag
             error:not-a
             apply
             register-predicate!
             guarantee
             n:exact-nonnegative-integer?
             index-predicate
             car
             error
             index->booleans
             eq?
             map
             length
             predicate-template-accessor
             predicate-template-predicate
             predicate-template-instantiator
             applicable-object-tag
             tag<=
             tagging-strategy:never
             make-predicate-template))
   (defined
    (function-template make-function-predicate
                       function-predicate?
                       function-predicate-domains
                       function-predicate-codomain
                       function-predicate-arity
                       extend-function-predicate
                       selectively-extend-function-predicate
                       make-signature-selector
                       function?
                       apply-function
                       function-name
                       function-tag
                       function-predicate
                       function-components
                       map-function
                       append-map-function
                       simple-function?
                       make-simple-function
                       <simple-function-metadata>
                       make-simple-function-metadata
                       simple-function-metadata?
                       simple-function-metadata-name
                       simple-function-metadata-procedure
                       simple-function-name
                       simple-function-tag
                       simple-function-predicate
                       simple-function-procedure
                       simple-function-domains
                       simple-function-codomain
                       simple-function-arity
                       simple-function-apply-fit
                       apply-simple-function
                       simple-generic-function?
                       endo-function-predicate?
                       make-endo-function-predicate
                       endo-function-predicate-domain
                       simple-endo-function?
                       simple-endo-function-domain
                       union-function
                       union-function*
                       apply-union-function
                       union-function-apply-fit
                       union-function-component-fits
                       is-function-subsumed?
                       union-function?
                       union-function-components
                       union-function-name
                       union-function-predicate)))
  ((filename "user-defined-types/generics")
   (free
    (make-default-dispatch-store generic-procedure-constructor
                                 cache-wrapped-dispatch-store
                                 get-tag
                                 apply
                                 cons
                                 pair?
                                 predicate<=
                                 eqv?
                                 simple-function?
                                 simple-function-apply-fit
                                 car
                                 predicates-match?
                                 make-simple-dispatch-store
                                 eq?
                                 filter
                                 sort
                                 cdr
                                 map
                                 n:pair?))
   (defined
    (make-subsetting-dispatch-store-maker
     is-generic-handler-applicable?
     rule<
     make-most-specific-dispatch-store
     make-chaining-dispatch-store
     make-cached-most-specific-dispatch-store
     make-cached-chaining-dispatch-store
     most-specific-generic-procedure
     chaining-generic-procedure)))
  ((filename "user-defined-types/operations")
   (free
    (object-union disjoin
                  function-predicate-codomain
                  function-predicate-domains
                  function-predicate
                  union-function
                  operation-operator
                  simple-function-procedure
                  make-simple-function
                  make-function-predicate
                  operator-signature
                  call-with-values
                  union-function*
                  object-union*
                  define-generic-procedure-handler
                  value-restriction
                  predicate?
                  match-args
                  value-fit
                  applicable-object?
                  applicable-object->object
                  make-object-applicable
                  apply-function
                  map
                  simple-function-domains
                  function-components
                  guarantee
                  symbol?
                  register-predicate!
                  function?))
   (defined
    (operation? make-operation
                operation-procedure
                operation-applicability
                apply-operation
                make-installable-operation-procedure
                installable-operation-procedure?
                operation-components
                constant-union
                operation-union
                operation-union*
                simple-operation
                simple-operation-procedure
                transform-operation-procedure
                extend-operation-function
                make-simple-operation
                operation-domains
                operation-codomain
                extend-operation-domains
                extend-operation-codomain
                extend-predicate
                extend-constant)))
  ((filename "user-defined-types/predicates")
   (free
    (tagged-data? disjoin
                  conjoin
                  every
                  parameter-binding-values
                  parameter-binding-polarity
                  length
                  n:=
                  any
                  hash-table-intern!
                  make-equal-hash-table
                  error
                  not
                  hash-table-clear!
                  lset-difference
                  eqv?
                  append
                  %record?
                  %record-ref
                  record-predicate
                  record-constructor
                  make-record-type
                  make-weak-eq-set
                  set-predicate-metadata!
                  define-record-printer
                  define-generic-procedure-handler
                  match-args
                  simple-generic-procedure
                  constant-generic-procedure-handler
                  predicate?
                  find
                  for-each
                  pair?
                  cdr
                  null?
                  car
                  append-map
                  list
                  delete-duplicates
                  simple-lset-memoizer
                  simple-list-memoizer
                  cons
                  tagging-strategy:optional
                  eq?
                  make-alist-store
                  tagging-strategy:always
                  n:list?
                  map
                  guarantee
                  procedure?
                  tagging-strategy:never
                  get-predicate-metadata))
   (defined
    (predicate->tag tag-data
                    register-predicate!
                    register-compound-predicate!
                    make-simple-predicate
                    simple-abstract-predicate
                    have-compound-operator-registrar?
                    get-compound-operator-registrar
                    define-compound-operator-registrar
                    standard-compound-tag
                    make-listish-memoizer
                    joinish
                    predicate-name
                    predicate-constructor
                    predicate-accessor
                    predicate-supersets
                    all-predicate-supersets
                    predicate<=
                    predicate>=
                    predicate=
                    set-predicate<=!
                    simple-predicate?
                    compound-predicate?
                    compound-predicate-components
                    compound-predicate-predicate
                    disjunction?
                    conjunction?
                    parametric-predicate?
                    parametric-predicate-template
                    tag?
                    get-tag-shared
                    define-tag-type
                    define-tag-record-printer
                    %invoke-tagging-strategy
                    make-tag-shared
                    <tag-shared>
                    %make-tag-shared
                    tag-shared?
                    tag-shared-name
                    tag-shared-predicate
                    tag-shared-constructor
                    tag-shared-accessor
                    tag-shared-supersets
                    make-simple-tag
                    <simple-tag>
                    %make-simple-tag
                    simple-tag?
                    simple-tag-shared
                    make-compound-tag
                    <compound-tag>
                    %make-compound-tag
                    compound-tag?
                    compound-tag-shared
                    compound-tag-operator
                    compound-tag-components
                    make-parametric-tag
                    <parametric-tag>
                    %make-parametric-tag
                    parametric-tag?
                    parametric-tag-shared
                    parametric-tag-template
                    parametric-tag-bindings
                    tag-name
                    tag->predicate
                    tag-constructor
                    tag-accessor
                    tag-supersets
                    tags->predicates
                    get-tag-supersets
                    get-all-tag-supersets
                    set-tag<=!
                    tag=
                    tag<=
                    tag>=
                    tag<=-cache
                    cached-tag<=
                    uncached-tag<=
                    cached-tag>=
                    false-tag<=
                    true-tag<=
                    top-tag?
                    non-top-tag?
                    bottom-tag?
                    non-bottom-tag?
                    top-tag
                    bottom-tag
                    generic-tag<=
                    define-tag<=
                    any-object?
                    no-object?)))
  ((filename "user-defined-types/standard-arith")
   (free
    (disjunction? compound-predicate-components
                  pair?
                  cdr
                  car
                  append-map
                  function?
                  function-name
                  strip-tags
                  apply-function
                  operation-codomain
                  make-simple-function
                  make-function-predicate
                  make-arithmetic
                  list
                  make-simple-operation
                  extend-operation-domains
                  map
                  operation-domains
                  apply
                  cons
                  any
                  extend-operation-codomain
                  extend-operation-function
                  extend-predicate
                  arithmetic-domain-predicate
                  predicate-constructor
                  predicate-template-accessor
                  predicate-template-predicate
                  predicate-template-instantiator
                  any-object?
                  tagging-strategy:always
                  make-predicate-template))
   (defined
    (symbolic-template make-symbolic-predicate
                       symbolic-predicate?
                       symbolic-predicate-base
                       symbolic-constructor
                       make-symbolic-arithmetic
                       make-endo-function-arithmetic
                       make-function-arithmetic
                       get-object-name
                       expand-disjunct-predicates
                       expand-disjunct-predicate)))
  ((filename "user-defined-types/tagging")
   (free
    (tag<= not
           string
           error
           define-pp-describer
           most-specific-generic-procedure
           constant-generic-procedure-handler
           define-print-method
           tag-name
           standard-print-method
           generic-procedure-constructor
           make-chaining-dispatch-store
           list
           equal*?
           define-generic-procedure-handler
           match-args
           %record?
           %record-ref
           eq?
           guarantee
           record-predicate
           record-constructor
           make-record-type
           tag->predicate
           implementation-tag
           simple-generic-procedure))
   (defined
    (get-tag get-predicate
             get-data
             <tagged-data>
             %make-tagged-data
             tagged-data?
             tagged-data-tag
             tagged-data-data
             tagged-data=
             tagged-data-representation
             tagged-data-description
             tagging-strategy:never
             tagging-strategy:always
             tagging-strategy:optional)))
  ((filename "user-defined-types/tags")
   (free
    (make-key-weak-eqv-hash-table for-each
                                  hash-table-set!
                                  eq?
                                  hash-table-intern!
                                  implementation-type-predicate
                                  predicate->tag
                                  implementation-type-name
                                  procedure?
                                  n:non-empty-list?
                                  n:list?
                                  n:exact-positive-integer?
                                  n:exact-nonnegative-integer?
                                  n:vector?
                                  n:symbol?
                                  n:string?
                                  n:real?
                                  n:rational?
                                  n:pair?
                                  n:number?
                                  n:null?
                                  n:integer?
                                  flo:flonum?
                                  n:exact-rational?
                                  n:exact-integer?
                                  n:complex?
                                  n:boolean?
                                  set-predicate<=!
                                  tagging-strategy:optional
                                  make-simple-predicate
                                  register-predicate!
                                  symbol
                                  predicate?
                                  not))
   (defined
    (primitive-predicate boolean?
                         complex?
                         exact-integer?
                         exact-rational?
                         inexact-real?
                         integer?
                         null?
                         number?
                         pair?
                         rational?
                         real?
                         string?
                         symbol?
                         vector?
                         exact-nonnegative-integer?
                         exact-positive-integer?
                         list?
                         non-empty-list?
                         implementation-tag
                         %predefine-tags
                         %object-tag-map)))
  ((filename "user-defined-types/templates")
   (free
    (list n:list?
          n:=
          length
          error:not-a
          map
          n:symbol?
          memq
          n:pair?
          cdr
          n:null?
          cddr
          caddr
          cdddr
          cadr
          car
          n:non-empty-list?
          list-of-unique-symbols?
          every
          not
          error
          tags->predicates
          find
          parametric-tag-bindings
          tag->predicate
          predicate->tag
          apply
          make-parametric-tag
          tag-name
          cons
          tag?
          symbol
          set-predicate<=!
          equal?
          simple-list-memoizer
          parametric-predicate?
          parametric-predicate-template
          eqv?
          register-predicate!
          %record?
          %record-ref
          eq?
          guarantee
          record-predicate
          record-constructor
          make-record-type))
   (defined
    (<predicate-template> %make-predicate-template
                          predicate-template?
                          predicate-template-name
                          predicate-template-pattern
                          predicate-template-tag-instantiator
                          predicate-template-predicate
                          make-predicate-template
                          make-predicate-template-tag-instantiator
                          predicate-template-instantiator
                          predicate-template-parameter-names
                          predicate-template-accessor
                          template-pattern?
                          template-pattern-element?
                          template-pattern-operator?
                          template-pattern-name?
                          polarity?
                          template-pattern-element-operator
                          template-pattern-element-name
                          template-pattern-element-polarity
                          template-pattern-element-single-valued?
                          template-pattern->names
                          match-template-pattern
                          <parameter-binding>
                          make-parameter-binding
                          parameter-binding?
                          parameter-binding-element
                          parameter-binding-value
                          parameter-binding-name
                          parameter-binding-polarity
                          parameter-binding-values
                          map-template-pattern)))
  ((filename "user-defined-types/values")
   (free
    (tag? tag-name
          simple-function?
          simple-function-procedure
          simple-function-tag
          simple-function-name
          vector-map
          n:vector?
          cons
          tagged-data-tag
          tagged-data-data
          tagged-data?
          pp
          lset=
          equal*?
          predicate?
          filter
          define-record-printer
          disjoin*
          get-predicate
          n:list?
          not
          every
          function?
          union-function*
          eqv?
          append-map
          list
          delete-duplicates
          car
          n:null?
          cdr
          n:pair?
          get-data
          define-generic-procedure-handler
          get-tag
          match-args
          tag->predicate
          procedure?
          apply
          predicate->tag
          %record?
          %record-ref
          eq?
          guarantee
          record-predicate
          record-constructor
          make-record-type
          register-predicate!
          make-metadata-association
          error
          map
          simple-generic-procedure
          constant-generic-procedure-handler))
   (defined
    (value-fit value-restriction
               combine-fits
               restriction-error
               applicable-object?
               applicable-object-metadata
               set-applicable-object-metadata!
               <applicable-object-metadata>
               make-applicable-object-metadata
               applicable-object-metadata?
               applicable-object-metadata-tag
               applicable-object-metadata-object
               applicable-object-metadata-applicator
               make-object-applicable
               applicable-object-tag
               applicable-object-predicate
               applicable-object->object
               strip-applicable-wrapper
               object-union
               object-union*
               make-object-union
               <object-union>
               %make-object-union
               object-union?
               object-union-tag
               object-union-components
               map-object-union
               append-map-object-union
               object-union=
               pt
               rewrite-tags
               pto
               tags-of
               strip-tags)))
  ((filename "user-defined-types/vector-arith")
   (free
    (n:< n:+
         vector-map
         iota
         make-simple-operation
         operation-domains
         operation-procedure
         arithmetic-operation
         apply
         operation-codomain
         operator-arity
         make-signature-selector
         for-each
         equal?
         make-alist-store
         car
         eq?
         make-arithmetic
         arithmetic-domain-predicate
         list
         extend-operation-function
         map
         operation-union*
         n:pair?
         not
         error
         n:=
         vector-ref
         vector-length
         tagged-data-data
         cons
         list->vector
         predicate-constructor
         predicate-template-accessor
         predicate-template-predicate
         predicate-template-instantiator
         n:vector?
         vector->list
         tag->predicate
         every
         tagging-strategy:always
         make-predicate-template))
   (defined
    (vector-template make-vector-predicate
                     vector-predicate?
                     vector-predicate-element
                     vector-constructor
                     vector-dimension
                     vector-elt
                     vector-elts
                     same-dimension?
                     guarantee-same-dimension
                     make-vector-arithmetic
                     get-vector-handlers
                     get-matching-vector-handlers
                     set-vector-handler!
                     define-vector-handler
                     make-vector-handler
                     v:map1
                     v:map2
                     dot-product-maker)))
  ((filename "wrappers/units")
   (free
    (- +
       *
       /
       map
       apply
       make-equal-hash-table
       equal?
       error
       hash-table-ref/default
       list
       hash-table-set!
       cons
       n:=
       n:negate
       n:<
       even?
       n:/
       n:-
       compose
       register-predicate!
       apply-hook?
       apply-hook-extra
       %record?
       %record-ref
       eq?
       guarantee
       record-predicate
       record-constructor
       make-record-type
       make-apply-hook
       set-apply-hook-extra!))
   (defined
    (make-unit-conversion <unit-conversion-record>
                          make-unit-conversion-record
                          unit-conversion-record?
                          unit-conversion-record-inverse
                          unit-conversion?
                          unit:invert
                          unit:*
                          unit:/
                          unit:expt
                          register-unit-conversion
                          register-expt-conversion
                          make-converter
                          unit-conversion-table
                          unit-specializer
                          identity-unit-conversion
                          inch-to-meter
                          fahrenheit-to-celsius
                          celsius-to-kelvin
                          pound-to-newton)))))
(by-name
 (((name %arithmetic-operator-alist) (definers ("common/operators"))
                                     (referrers ()))
  ((name %binding-set-prefix)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name %constant-generic-procedure-handlers)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name %define-rule) (definers ("abstracting-a-domain/game"))
                       (referrers ()))
  ((name %delete-piece) (definers ("abstracting-a-domain/board"))
                        (referrers ()))
  ((name %empty-support-set) (definers ("dependencies/support-sets"))
                             (referrers ()))
  ((name %find-all-edges) (definers ("common/trie")) (referrers ()))
  ((name %generic-procedure-metadata) (definers ("common/generic-procedures"))
                                      (referrers ()))
  ((name %get-aggregate-rules) (definers ("abstracting-a-domain/game"))
                               (referrers ()))
  ((name %get-evolution-rules) (definers ("abstracting-a-domain/game"))
                               (referrers ()))
  ((name %implementation-type-predicates) (definers ("common/utils"))
                                          (referrers ()))
  ((name %invoke-tagging-strategy)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name %make-arithmetic) (definers ("common/arith")) (referrers ()))
  ((name %make-board) (definers ("abstracting-a-domain/board"))
                      (referrers ()))
  ((name %make-change) (definers ("abstracting-a-domain/pmove"))
                       (referrers ()))
  ((name %make-clock) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name %make-compound-tag) (definers ("user-defined-types/predicates"))
                             (referrers ()))
  ((name %make-compound-token) (definers ("common/pretty-printer"))
                               (referrers ()))
  ((name %make-cursor) (definers ("common/pretty-printer")) (referrers ()))
  ((name %make-deque) (definers ("continuations-to-amb/deque"))
                      (referrers ()))
  ((name %make-game) (definers ("abstracting-a-domain/game")) (referrers ()))
  ((name %make-generic-metadata) (definers ("common/generic-procedures"))
                                 (referrers ()))
  ((name %make-hypothetical) (definers ("propagation/premises"))
                             (referrers ()))
  ((name %make-object-union) (definers ("user-defined-types/values"))
                             (referrers ()))
  ((name %make-package) (definers ("common/package")) (referrers ()))
  ((name %make-parametric-tag) (definers ("user-defined-types/predicates"))
                               (referrers ()))
  ((name %make-predicate-template) (definers ("user-defined-types/templates"))
                                   (referrers ()))
  ((name %make-property) (definers ("user-defined-types/adventure-substrate"))
                         (referrers ()))
  ((name %make-simple-tag) (definers ("user-defined-types/predicates"))
                           (referrers ()))
  ((name %make-simple-token) (definers ("common/pretty-printer"))
                             (referrers ()))
  ((name %make-step) (definers ("abstracting-a-domain/checkers-original"))
                     (referrers ()))
  ((name %make-support-set) (definers ("dependencies/support-sets"))
                            (referrers ()))
  ((name %make-tag-shared) (definers ("user-defined-types/predicates"))
                           (referrers ()))
  ((name %make-tagged-data) (definers ("user-defined-types/tagging"))
                            (referrers ()))
  ((name %make-trie) (definers ("common/trie")) (referrers ()))
  ((name %make-value-set) (definers ("propagation/value-sets"))
                          (referrers ()))
  ((name %object-tag-map) (definers ("user-defined-types/tags"))
                          (referrers ()))
  ((name %operator-entry) (definers ("common/operators")) (referrers ()))
  ((name %predefine-tags) (definers ("user-defined-types/tags"))
                          (referrers ()))
  ((name %predicate-counts) (definers ("common/predicate-counter"))
                            (referrers ()))
  ((name %premise-metadata) (definers ("propagation/premises"))
                            (referrers ()))
  ((name %record-ref)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "pattern-matching-on-graphs/graph"
                      "generic-interpreter/shared-rtdata"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/generic-procedures"
                      "common/arith"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name %record-set!)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "continuations-to-amb/deque"
                                              "common/trie"
                                              "abstracting-a-domain/game")))
  ((name %record?)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "pattern-matching-on-graphs/graph"
                      "generic-interpreter/shared-rtdata"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/generic-procedures"
                      "common/arith"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name %replace-piece) (definers ("abstracting-a-domain/checkers-original"))
                         (referrers ()))
  ((name %set-aggregate-rules!) (definers ("abstracting-a-domain/game"))
                                (referrers ()))
  ((name %set-evolution-rules!) (definers ("abstracting-a-domain/game"))
                                (referrers ()))
  ((name %set-type-properties!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name %trie-value) (definers ("common/trie")) (referrers ()))
  ((name %try-edge) (definers ("common/trie")) (referrers ()))
  ((name %try-edges) (definers ("common/trie")) (referrers ()))
  ((name %type-properties)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name %unit-tag) (definers ("layers/units")) (referrers ()))
  ((name *)
   (definers ())
   (referrers
    ("wrappers/units" "term-rewriting/rules"
                      "propagation/examples/hms-dms-radians"
                      "common/pretty-printer"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/handlers"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/coords"
                      "abstracting-a-domain/checkers-shared")))
  ((name *abort-process*) (definers ("propagation/scheduler")) (referrers ()))
  ((name *active-tags*) (definers ("automatic-differentiation/extractor"))
                        (referrers ()))
  ((name *all-cells*) (definers ("propagation/scheduler"))
                      (referrers ("propagation/cells")))
  ((name *assumptions*) (definers ("automatic-differentiation/simplifier"))
                        (referrers ()))
  ((name *current-arithmetic*)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name *current-group*) (definers ("common/simple-tests")) (referrers ()))
  ((name *current-propagator*) (definers ("propagation/scheduler"))
                               (referrers ()))
  ((name *debugging-contradiction*) (definers ("propagation/search"))
                                    (referrers ()))
  ((name *diff-termlists) (definers ("automatic-differentiation/derivatives"))
                          (referrers ()))
  ((name *diff-terms) (definers ("automatic-differentiation/derivatives"))
                      (referrers ()))
  ((name *groups-to-test*) (definers ("common/simple-tests")) (referrers ()))
  ((name *last-value-of-run*) (definers ("propagation/scheduler"))
                              (referrers ("propagation/ui")))
  ((name *my-parent*)
   (definers ("propagation/hierarchy"))
   (referrers
    ("propagation/propagators" "propagation/premises" "propagation/cells")))
  ((name *number-of-calls-to-fail*)
   (definers ("propagation/search" "continuations-to-amb/ambsch"))
   (referrers ("propagation/scheduler" "propagation/examples/time")))
  ((name *search-schedule*) (definers ("continuations-to-amb/ambsch"))
                            (referrers ()))
  ((name *test-env*) (definers ("common/simple-tests")) (referrers ()))
  ((name *test-eval*) (definers ("common/simple-tests")) (referrers ()))
  ((name *test-results*) (definers ("common/simple-tests")) (referrers ()))
  ((name *top-level*) (definers ("continuations-to-amb/ambsch"))
                      (referrers ()))
  ((name *trace-cell-contradictions*) (definers ("propagation/search"))
                                      (referrers ()))
  ((name *trace-premise-transitions?*) (definers ("propagation/premises"))
                                       (referrers ()))
  ((name +)
   (definers ())
   (referrers
    ("wrappers/units" "unification/type-resolver"
                      "term-rewriting/rules"
                      "regular-expressions/regexp"
                      "propagation/search"
                      "propagation/examples/hms-dms-radians"
                      "pattern-matching-on-graphs/chess-board"
                      "design-of-the-matcher/matcher"
                      "continuations-to-amb/ambsch"
                      "common/pretty-printer"
                      "combinators/function-combinators"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/replace-dx-differential"
                      "automatic-differentiation/handlers"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/coords"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/board")))
  ((name +->interval) (definers ("propagation/examples/intervals"))
                      (referrers ()))
  ((name +-like) (definers ("common/arith")) (referrers ()))
  ((name +diff-termlists) (definers ("automatic-differentiation/derivatives"))
                          (referrers ()))
  ((name -)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/adventure-objects"
                      "regular-expressions/regexp"
                      "propagation/examples/hms-dms-radians"
                      "pattern-matching-on-graphs/chess-board"
                      "common/pretty-printer"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/handlers"
                      "abstracting-a-domain/coords"
                      "abstracting-a-domain/board")))
  ((name --like) (definers ("common/arith")) (referrers ()))
  ((name ->environment) (definers ()) (referrers ("common/utils")))
  ((name ->interval) (definers ("propagation/examples/intervals"))
                     (referrers ()))
  ((name ->namestring) (definers ()) (referrers ("common/simple-tests")))
  ((name ->value-set) (definers ("propagation/value-sets")) (referrers ()))
  ((name /)
   (definers ())
   (referrers
    ("wrappers/units" "propagation/examples/hms-dms-radians"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/handlers"
                      "abstracting-a-domain/coords")))
  ((name :-pi/2) (definers ("propagation/examples/example-support"))
                 (referrers ("propagation/examples/intervals")))
  ((name :2pi) (definers ("propagation/examples/example-support"))
               (referrers ("propagation/examples/hms-dms-radians")))
  ((name :pi) (definers ("propagation/examples/example-support"))
              (referrers ("propagation/examples/intervals")))
  ((name :pi/2) (definers ("propagation/examples/example-support"))
                (referrers ("propagation/examples/intervals")))
  ((name <)
   (definers ())
   (referrers
    ("user-defined-types/adventure-objects"
     "term-rewriting/rules"
     "regular-expressions/regexp"
     "propagation/search"
     "pattern-matching-on-graphs/chess-board"
     "dependencies/support-layer"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/game-repl")))
  ((name <*compound-procedure>)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ()))
  ((name <=)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "pattern-matching-on-graphs/chess-board"
     "design-of-the-matcher/matcher"
     "continuations-to-amb/ambsch"
     "common/pretty-printer"
     "abstracting-a-domain/board")))
  ((name <applicable-object-metadata>)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name <arithmetic>) (definers ("common/arith")) (referrers ()))
  ((name <board>) (definers ("abstracting-a-domain/board")) (referrers ()))
  ((name <change>) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name <clock>) (definers ("user-defined-types/adventure-substrate"))
                  (referrers ()))
  ((name <compound-tag>) (definers ("user-defined-types/predicates"))
                         (referrers ()))
  ((name <compound-token>) (definers ("common/pretty-printer"))
                           (referrers ()))
  ((name <cursor>) (definers ("common/pretty-printer")) (referrers ()))
  ((name <deque>) (definers ("continuations-to-amb/deque")) (referrers ()))
  ((name <game>) (definers ("abstracting-a-domain/game")) (referrers ()))
  ((name <generic-metadata>) (definers ("common/generic-procedures"))
                             (referrers ()))
  ((name <graph-view>) (definers ("pattern-matching-on-graphs/graph"))
                       (referrers ()))
  ((name <object-union>) (definers ("user-defined-types/values"))
                         (referrers ()))
  ((name <package>) (definers ("common/package")) (referrers ()))
  ((name <parameter-binding>) (definers ("user-defined-types/templates"))
                              (referrers ()))
  ((name <parametric-tag>) (definers ("user-defined-types/predicates"))
                           (referrers ()))
  ((name <piece>) (definers ("abstracting-a-domain/piece")) (referrers ()))
  ((name <predicate-template>) (definers ("user-defined-types/templates"))
                               (referrers ()))
  ((name <property>) (definers ("user-defined-types/adventure-substrate"))
                     (referrers ()))
  ((name <reified-fail>) (definers ("continuations/analyze-extra"))
                         (referrers ()))
  ((name <reified-succeed>) (definers ("continuations/analyze-extra"))
                            (referrers ()))
  ((name <simple-function-metadata>)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name <simple-tag>) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name <simple-token>) (definers ("common/pretty-printer")) (referrers ()))
  ((name <step>) (definers ("abstracting-a-domain/checkers-original"))
                 (referrers ()))
  ((name <tag-shared>) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name <tagged-data>) (definers ("user-defined-types/tagging"))
                        (referrers ()))
  ((name <trie>) (definers ("common/trie")) (referrers ()))
  ((name <unit-conversion-record>) (definers ("wrappers/units"))
                                   (referrers ()))
  ((name <value-set>) (definers ("propagation/value-sets")) (referrers ()))
  ((name =)
   (definers ())
   (referrers
    ("unification/type-resolver"
     "regular-expressions/regexp"
     "propagation/primitive-propagators"
     "pattern-matching-on-graphs/chess-board"
     "design-of-the-matcher/matcher"
     "common/pretty-printer"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/literal-functions"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/game"
     "abstracting-a-domain/coords"
     "abstracting-a-domain/checkers-shared")))
  ((name >)
   (definers ())
   (referrers
    ("unification/type-resolver" "term-rewriting/rules"
                                 "propagation/ui"
                                 "propagation/search"
                                 "design-of-the-matcher/matcher"
                                 "automatic-differentiation/simplifier"
                                 "automatic-differentiation/derivatives")))
  ((name >=)
   (definers ())
   (referrers
    ("unification/type-resolver" "pattern-matching-on-graphs/chess-board"
                                 "continuations-to-amb/ambsch")))
  ((name a:advance) (definers ("exploratory-behavior/analyze"))
                    (referrers ("exploratory-behavior/repl")))
  ((name a:analyze) (definers ("exploratory-behavior/analyze"))
                    (referrers ()))
  ((name a:apply) (definers ("exploratory-behavior/analyze"))
                  (referrers ("continuations/analyze-extra")))
  ((name a:eval) (definers ("exploratory-behavior/analyze"))
                 (referrers ("exploratory-behavior/repl")))
  ((name a:handle-operand) (definers ("exploratory-behavior/analyze"))
                           (referrers ()))
  ((name abhor) (definers ("propagation/search"))
                (referrers ("propagation/examples/puzzle-utilities")))
  ((name abort->nearest) (definers ())
                         (referrers ("continuations-to-amb/ambsch")))
  ((name abort-process) (definers ("propagation/scheduler"))
                        (referrers ("propagation/search")))
  ((name abs-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name absolute-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name acos) (definers ())
               (referrers ("automatic-differentiation/handlers")))
  ((name acos-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name activate-propagator!) (definers ("propagation/propagators"))
                               (referrers ("propagation/scheduler")))
  ((name add-arithmetics) (definers ("common/arith")) (referrers ()))
  ((name add-arithmetics*) (definers ("common/arith")) (referrers ()))
  ((name add-cell-content!)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/ui" "propagation/sugar"
                      "propagation/search"
                      "propagation/propagators"
                      "propagation/primitive-propagators"
                      "propagation/premises"
                      "propagation/constraint-propagators")))
  ((name add-cell-neighbor!) (definers ("propagation/cells"))
                             (referrers ("propagation/propagators")))
  ((name add-change) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name add-child!)
   (definers ("propagation/hierarchy"))
   (referrers
    ("propagation/propagators" "propagation/premises" "propagation/cells")))
  ((name add-edge-to-trie) (definers ("common/trie")) (referrers ()))
  ((name add-exit!) (definers ("user-defined-types/adventure-objects"))
                    (referrers ()))
  ((name add-flag) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name add-generic-arith-constants!)
   (definers ("generic-procedures/generic-arith"))
   (referrers ()))
  ((name add-generic-arith-operations!)
   (definers ("generic-procedures/generic-arith"))
   (referrers ()))
  ((name add-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name add-thing!) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name add-to-breadth-first-search-schedule)
   (definers ("continuations-to-amb/ambsch"))
   (referrers ()))
  ((name add-to-depth-first-search-schedule)
   (definers ("continuations-to-amb/ambsch"))
   (referrers ()))
  ((name add-to-end!) (definers ("continuations-to-amb/deque"))
                      (referrers ("continuations-to-amb/ambsch")))
  ((name add-to-generic-arithmetic!)
   (definers ("generic-procedures/generic-arith"))
   (referrers ("automatic-differentiation/utils")))
  ((name add-to-search-schedule) (definers ("continuations-to-amb/ambsch"))
                                 (referrers ()))
  ((name add-vista!) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name address-index?) (definers ("pattern-matching-on-graphs/chess-board"))
                         (referrers ()))
  ((name address-x) (definers ("pattern-matching-on-graphs/chess-board"))
                    (referrers ()))
  ((name address-x+) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ()))
  ((name address-y) (definers ("pattern-matching-on-graphs/chess-board"))
                    (referrers ()))
  ((name address-y+) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ()))
  ((name address=) (definers ("pattern-matching-on-graphs/chess-board"))
                   (referrers ()))
  ((name adjoin-support-with-subsumption) (definers ("propagation/premises"))
                                          (referrers ("propagation/search")))
  ((name advance-memo!)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name advanced-memo?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/repl"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/repl"
     "compiling-to-execution-procedures/analyze")))
  ((name advanced-value)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/repl"
     "compiling-to-execution-procedures/analyze")))
  ((name alert-propagator!)
   (definers ("propagation/scheduler"))
   (referrers ("propagation/propagators" "propagation/premises")))
  ((name alert-propagators!) (definers ("propagation/scheduler"))
                             (referrers ("propagation/cells")))
  ((name alerted-propagators) (definers ("propagation/scheduler"))
                              (referrers ()))
  ((name algebra-1) (definers ("term-rewriting/rules")) (referrers ()))
  ((name algebra-2) (definers ("term-rewriting/rules")) (referrers ()))
  ((name algebra-3) (definers ("automatic-differentiation/simplifier"))
                    (referrers ()))
  ((name alist->bundle)
   (definers ())
   (referrers
    ("propagation/scheduler" "propagation/reasons"
                             "propagation/propagators"
                             "propagation/premises"
                             "propagation/hierarchy"
                             "propagation/cells"
                             "pattern-matching-on-graphs/graph"
                             "pattern-matching-on-graphs/chess-board"
                             "layers/units"
                             "layers/layered-data"
                             "dependencies/support-layer"
                             "compiling-to-execution-procedures/executors"
                             "common/simple-tests")))
  ((name alist->plist) (definers ("common/utils"))
                       (referrers ("layers/units")))
  ((name alist->unit) (definers ("layers/units")) (referrers ()))
  ((name alist?) (definers ()) (referrers ("common/utils")))
  ((name all-amb-propagators)
   (definers ("propagation/scheduler"))
   (referrers ("propagation/search" "propagation/premises")))
  ((name all-args) (definers ("common/applicability"))
                   (referrers ("common/operations")))
  ((name all-bishop-moves)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name all-cells) (definers ("propagation/scheduler"))
                    (referrers ("propagation/premises")))
  ((name all-combinations) (definers ("automatic-differentiation/utils"))
                           (referrers ()))
  ((name all-king-moves) (definers ("pattern-matching-on-graphs/chess-moves"))
                         (referrers ()))
  ((name all-knight-moves)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name all-people) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name all-permutations-of) (definers ("common/utils")) (referrers ()))
  ((name all-places) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name all-predicate-supersets)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name all-premises-in?)
   (definers ("propagation/premises"))
   (referrers
    ("propagation/value-sets" "propagation/ui"
                              "propagation/support-extra"
                              "propagation/search")))
  ((name all-propagators) (definers ("propagation/scheduler")) (referrers ()))
  ((name all-queen-moves)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name all-results) (definers ("propagation/ui")) (referrers ()))
  ((name all-rook-moves) (definers ("pattern-matching-on-graphs/chess-moves"))
                         (referrers ()))
  ((name all-sequences-of) (definers ("common/utils"))
                           (referrers ("common/applicability")))
  ((name all-supertypes) (definers ("user-defined-types/adventure-substrate"))
                         (referrers ()))
  ((name all-things-in-place)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ("user-defined-types/adventure-world")))
  ((name amb) (definers ("continuations-to-amb/ambsch")) (referrers ()))
  ((name amb-alternatives) (definers ("generic-interpreter/shared-syntax"))
                           (referrers ("exploratory-behavior/analyze")))
  ((name amb-collect-values) (definers ("continuations-to-amb/ambsch"))
                             (referrers ()))
  ((name amb-eval) (definers ("continuations-to-amb/ambsch")) (referrers ()))
  ((name amb-list) (definers ("continuations-to-amb/ambsch")) (referrers ()))
  ((name amb?) (definers ("generic-interpreter/shared-syntax"))
               (referrers ("exploratory-behavior/analyze")))
  ((name an-integer-between) (definers ("continuations-to-amb/ambsch"))
                             (referrers ()))
  ((name analyze)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-amb) (definers ("exploratory-behavior/analyze"))
                      (referrers ()))
  ((name analyze-application)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-assignment)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-begin)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-definition)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-if)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-lambda)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-quoted)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-self-evaluating)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name analyze-undoable-assignment)
   (definers ("exploratory-behavior/analyze"))
   (referrers ()))
  ((name analyze-variable)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name ancestry) (definers ("propagation/hierarchy")) (referrers ()))
  ((name annotate-expr) (definers ("unification/type-resolver"))
                        (referrers ()))
  ((name annotate-program) (definers ("unification/type-resolver"))
                           (referrers ()))
  ((name announce!) (definers ("user-defined-types/adventure-substrate"))
                    (referrers ("user-defined-types/adventure-objects")))
  ((name any)
   (definers ())
   (referrers
    ("user-defined-types/standard-arith"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "unification/type-resolver"
     "propagation/value-sets"
     "propagation/search"
     "propagation/propagators"
     "non-strict-arguments/general-procedures"
     "dependencies/support-sets"
     "common/utils"
     "common/predicates"
     "common/match-utils"
     "common/collections"
     "common/applicability"
     "automatic-differentiation/literal-functions"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/board")))
  ((name any-arg)
   (definers ("common/applicability"))
   (referrers
    ("propagation/support-extra" "propagation/examples/intervals"
                                 "layers/layered-data"
                                 "combining-arithmetics/standard-arith"
                                 "combining-arithmetics/function-variants")))
  ((name any-object?)
   (definers ("user-defined-types/predicates" "common/predicate-metadata"))
   (referrers
    ("user-defined-types/standard-arith"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/unify"
     "unification/type-resolver"
     "propagation/support-extra"
     "generic-procedures/generic-arith"
     "common/package"
     "combining-arithmetics/standard-arith"
     "automatic-differentiation/handlers")))
  ((name append)
   (definers ())
   (referrers
    ("user-defined-types/predicates" "user-defined-types/adventure-world"
                                     "user-defined-types/adventure-substrate"
                                     "user-defined-types/adventure-objects"
                                     "unification/unify"
                                     "unification/type-resolver"
                                     "term-rewriting/rules"
                                     "term-rewriting/pattern-operator"
                                     "regular-expressions/regexp"
                                     "propagation/ui"
                                     "propagation/sugar"
                                     "pattern-matching-on-graphs/chess-moves"
                                     "common/utils"
                                     "combinators/function-combinators"
                                     "automatic-differentiation/utils"
                                     "automatic-differentiation/simplifier"
                                     "abstracting-a-domain/pmove"
                                     "abstracting-a-domain/coords")))
  ((name append-map)
   (definers ())
   (referrers
    ("user-defined-types/values"
     "user-defined-types/standard-arith"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/type-resolver"
     "regular-expressions/regexp"
     "propagation/search"
     "pattern-matching-on-graphs/chess-board"
     "generic-interpreter/shared-syntax"
     "common/utils"
     "common/trie"
     "common/match-utils"
     "automatic-differentiation/utils"
     "automatic-differentiation/simplifier"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/game-interpreter"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original")))
  ((name append-map-function) (definers ("user-defined-types/functions"))
                              (referrers ()))
  ((name append-map-object-union) (definers ("user-defined-types/values"))
                                  (referrers ()))
  ((name applicability-arity) (definers ("common/applicability"))
                              (referrers ()))
  ((name applicability-union) (definers ("common/applicability"))
                              (referrers ()))
  ((name applicability-union*) (definers ("common/applicability"))
                               (referrers ("common/operations")))
  ((name applicability?) (definers ("common/applicability"))
                         (referrers ("common/operations")))
  ((name applicable-object->object)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name applicable-object-metadata) (definers ("user-defined-types/values"))
                                     (referrers ()))
  ((name applicable-object-metadata-applicator)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name applicable-object-metadata-object)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name applicable-object-metadata-tag)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name applicable-object-metadata?) (definers ("user-defined-types/values"))
                                      (referrers ()))
  ((name applicable-object-predicate) (definers ("user-defined-types/values"))
                                      (referrers ()))
  ((name applicable-object-tag) (definers ("user-defined-types/values"))
                                (referrers ("user-defined-types/functions")))
  ((name applicable-object?)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name application?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name apply)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/standard-arith"
                      "user-defined-types/generics"
                      "user-defined-types/functions"
                      "term-rewriting/rule-implementation"
                      "regular-expressions/regexp"
                      "propagation/value-sets"
                      "propagation/search"
                      "propagation/reasons"
                      "propagation/propagators"
                      "propagation/examples/intervals"
                      "pattern-matching-on-graphs/graph"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-rtdata"
                      "dependencies/support-sets"
                      "dependencies/support-layer"
                      "compiling-to-execution-procedures/executors"
                      "common/utils"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/operations"
                      "common/memoizers"
                      "common/generic-procedures"
                      "common/arith"
                      "common/applicability"
                      "combining-arithmetics/standard-arith"
                      "combining-arithmetics/function-variants"
                      "combinators/function-combinators"
                      "automatic-differentiation/literal-functions"
                      "automatic-differentiation/extractor"
                      "automatic-differentiation/derivatives")))
  ((name apply-evolution-rule)
   (definers ("abstracting-a-domain/game-interpreter"))
   (referrers ()))
  ((name apply-function)
   (definers ("user-defined-types/functions"))
   (referrers
    ("user-defined-types/standard-arith" "user-defined-types/operations")))
  ((name apply-hook-extra) (definers ()) (referrers ("wrappers/units")))
  ((name apply-hook?) (definers ()) (referrers ("wrappers/units")))
  ((name apply-operation)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers
    ("combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants")))
  ((name apply-predicate) (definers ("common/trie")) (referrers ()))
  ((name apply-primitive-procedure)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name apply-simple-function) (definers ("user-defined-types/functions"))
                                (referrers ()))
  ((name apply-union-function) (definers ("user-defined-types/functions"))
                               (referrers ()))
  ((name args-application?) (definers ("generic-interpreter/shared-syntax"))
                            (referrers ()))
  ((name arithmetic->bindings) (definers ("common/arith")) (referrers ()))
  ((name arithmetic->package) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-bases) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-constant) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-constant-alist) (definers ("common/arith"))
                                    (referrers ()))
  ((name arithmetic-constant-binding)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name arithmetic-constant-names)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name arithmetic-constant-names-for) (definers ("common/arith"))
                                        (referrers ()))
  ((name arithmetic-constants-for) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-domain-predicate)
   (definers ("common/arith"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/standard-arith"
     "propagation/primitive-propagators"
     "layers/layered-data"
     "combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants"
     "automatic-differentiation/utils")))
  ((name arithmetic-name)
   (definers ("common/arith"))
   (referrers ("propagation/primitive-propagators" "layers/layered-data")))
  ((name arithmetic-operation)
   (definers ("common/arith"))
   (referrers
    ("user-defined-types/vector-arith" "propagation/primitive-propagators"
                                       "generic-procedures/generic-arith")))
  ((name arithmetic-operation-alist) (definers ("common/arith"))
                                     (referrers ()))
  ((name arithmetic-operations-for) (definers ("common/arith"))
                                    (referrers ()))
  ((name arithmetic-operators)
   (definers ("common/arith"))
   (referrers
    ("propagation/primitive-propagators" "generic-procedures/generic-arith")))
  ((name arithmetic-operators-for) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-procedure) (definers ("common/arith")) (referrers ()))
  ((name arithmetic-procedure-metadata)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name arithmetic-procedure?)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name arithmetic-propagators)
   (definers ("propagation/primitive-propagators"))
   (referrers ()))
  ((name arithmetic?) (definers ("common/arith")) (referrers ()))
  ((name arity-table) (definers ("combinators/function-combinators"))
                      (referrers ()))
  ((name asin) (definers ())
               (referrers ("automatic-differentiation/handlers")))
  ((name asin-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name assert) (definers ("design-of-the-matcher/general")) (referrers ()))
  ((name assert!) (definers ("propagation/ui")) (referrers ()))
  ((name assign-handler!) (definers ("common/generic-procedures"))
                          (referrers ("automatic-differentiation/handlers")))
  ((name assignment-value)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name assignment-variable)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name assignment?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name assoc) (definers ()) (referrers ("common/generic-procedures")))
  ((name assq)
   (definers ())
   (referrers
    ("unification/type-resolver" "propagation/search"
                                 "generic-interpreter/shared-rtdata"
                                 "common/package"
                                 "common/operators"
                                 "common/generic-procedures"
                                 "common/arith"
                                 "abstracting-a-domain/game")))
  ((name assume) (definers ("automatic-differentiation/simplifier"))
                 (referrers ()))
  ((name assv)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "layers/layered-data"
                                              "common/trie")))
  ((name atan) (definers ())
               (referrers ("automatic-differentiation/handlers")))
  ((name atan-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name attach-rule!) (definers ("term-rewriting/pattern-operator"))
                       (referrers ()))
  ((name autonomous-agent:acquisitiveness)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name autonomous-agent:restlessness)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name autonomous-agent?)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name avatar:screen) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name avatar?) (definers ("user-defined-types/adventure-objects"))
                  (referrers ()))
  ((name avoid-0/0-wrapper) (definers ("propagation/primitive-propagators"))
                            (referrers ()))
  ((name backward-diagonal-directions)
   (definers ("abstracting-a-domain/coords"))
   (referrers ()))
  ((name backward-direction) (definers ("abstracting-a-domain/coords"))
                             (referrers ()))
  ((name bag:holder) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name bag?) (definers ("user-defined-types/adventure-objects"))
               (referrers ()))
  ((name base-layer) (definers ("layers/layered-data")) (referrers ()))
  ((name base-layer-value)
   (definers ("layers/layered-data"))
   (referrers
    ("propagation/value-sets" "propagation/support-extra"
                              "propagation/reasons"
                              "propagation/data-model"
                              "layers/units"
                              "dependencies/support-layer")))
  ((name basic-bishop-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name basic-king-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name basic-knight-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name basic-queen-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name basic-rook-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name begin-actions)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name begin-expr?) (definers ("unification/type-resolver")) (referrers ()))
  ((name begin-exprs) (definers ("unification/type-resolver")) (referrers ()))
  ((name begin?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name bias?) (definers ("user-defined-types/adventure-substrate"))
                (referrers ("user-defined-types/adventure-objects")))
  ((name binary-amb)
   (definers ("propagation/search"))
   (referrers
    ("propagation/examples/puzzle-utilities"
     "propagation/constraint-propagators")))
  ((name bkpt) (definers ()) (referrers ("propagation/search")))
  ((name board-addresses)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name board-colors) (definers ("abstracting-a-domain/board"))
                       (referrers ()))
  ((name board-depth) (definers ("abstracting-a-domain/board"))
                      (referrers ("abstracting-a-domain/game-repl")))
  ((name board-end-turn)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name board-game) (definers ("abstracting-a-domain/board"))
                     (referrers ("abstracting-a-domain/game-interpreter")))
  ((name board-get)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name board-max-column) (definers ("abstracting-a-domain/board"))
                           (referrers ()))
  ((name board-max-row) (definers ("abstracting-a-domain/board"))
                        (referrers ()))
  ((name board-pieces) (definers ("abstracting-a-domain/board"))
                       (referrers ()))
  ((name board-remove-piece)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name board-replace-piece)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name board-width) (definers ("abstracting-a-domain/board"))
                      (referrers ("abstracting-a-domain/game-repl")))
  ((name board?) (definers ("abstracting-a-domain/board"))
                 (referrers ("abstracting-a-domain/pmove")))
  ((name boolean-propagators) (definers ("propagation/primitive-propagators"))
                              (referrers ()))
  ((name boolean-type) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name boolean-type?) (definers ("unification/type-resolver"))
                        (referrers ()))
  ((name boolean/and) (definers ())
                      (referrers ("propagation/primitive-propagators")))
  ((name boolean/dna) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name boolean/imp) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name boolean/or) (definers ())
                     (referrers ("propagation/primitive-propagators")))
  ((name boolean/pmi) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name boolean/ro) (definers ("propagation/primitive-propagators"))
                     (referrers ()))
  ((name boolean?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"
                                 "common/predicate-metadata"
                                 "common/operators")))
  ((name bottom-tag) (definers ("user-defined-types/predicates"))
                     (referrers ()))
  ((name bottom-tag?) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name bottom-type) (definers ("unification/type-resolver")) (referrers ()))
  ((name bottom-type?) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name bourne-shell-grep-command-string)
   (definers ("regular-expressions/regexp"))
   (referrers ()))
  ((name bourne-shell-quote-string) (definers ("regular-expressions/regexp"))
                                    (referrers ()))
  ((name bracket) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name bring-in!) (definers ("propagation/ui")) (referrers ()))
  ((name bundle-predicate) (definers ())
                           (referrers ("propagation/hierarchy")))
  ((name bundle?)
   (definers ())
   (referrers
    ("propagation/hierarchy" "combining-arithmetics/standard-arith")))
  ((name bvl?) (definers ("unification/type-resolver")) (referrers ()))
  ((name c:*) (definers ("propagation/constraint-propagators"))
              (referrers ("propagation/examples/example-support")))
  ((name c:+) (definers ("propagation/constraint-propagators"))
              (referrers ("propagation/examples/example-support")))
  ((name c:abs) (definers ("propagation/constraint-propagators"))
                (referrers ("propagation/examples/example-support")))
  ((name c:and) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name c:choose-exactly-one)
   (definers ("propagation/constraint-propagators"))
   (referrers ()))
  ((name c:controlled-same) (definers ("propagation/constraint-propagators"))
                            (referrers ()))
  ((name c:cos) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name c:exp) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name c:full-same) (definers ("propagation/constraint-propagators"))
                      (referrers ()))
  ((name c:implies) (definers ("propagation/constraint-propagators"))
                    (referrers ()))
  ((name c:invert) (definers ("propagation/constraint-propagators"))
                   (referrers ()))
  ((name c:negate) (definers ("propagation/constraint-propagators"))
                   (referrers ()))
  ((name c:not) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name c:or) (definers ("propagation/constraint-propagators"))
               (referrers ()))
  ((name c:quadratic) (definers ("propagation/constraint-propagators"))
                      (referrers ()))
  ((name c:same) (definers ("propagation/constraint-propagators"))
                 (referrers ("propagation/examples/example-support")))
  ((name c:sin) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name c:square) (definers ("propagation/constraint-propagators"))
                   (referrers ()))
  ((name c:tan) (definers ("propagation/constraint-propagators"))
                (referrers ()))
  ((name caadr)
   (definers ())
   (referrers
    ("propagation/sugar" "layers/units" "generic-interpreter/shared-syntax")))
  ((name caar)
   (definers ())
   (referrers
    ("term-rewriting/rules" "pattern-matching-on-graphs/chess-moves"
                            "layers/units")))
  ((name cache-wrapped-dispatch-store)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/generics"
     "efficient-generic-procedures/cached-generics")))
  ((name cached-tag<=) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name cached-tag>=) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name cadadr) (definers ()) (referrers ("propagation/sugar")))
  ((name cadddr)
   (definers ())
   (referrers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"
                                 "common/simple-tests"
                                 "common/operations")))
  ((name caddr)
   (definers ())
   (referrers
    ("user-defined-types/templates" "unification/type-resolver"
                                    "term-rewriting/rule-implementation"
                                    "propagation/sugar"
                                    "propagation/reasons"
                                    "propagation/primitive-propagators"
                                    "propagation/examples/intervals"
                                    "propagation/examples/hms-dms-radians"
                                    "pattern-matching-on-graphs/graph-match"
                                    "generic-interpreter/shared-syntax"
                                    "common/simple-tests"
                                    "common/operators"
                                    "common/operations"
                                    "common/match-utils"
                                    "automatic-differentiation/derivatives")))
  ((name cadr)
   (definers ())
   (referrers
    ("user-defined-types/templates"
     "unification/type-resolver"
     "term-rewriting/rule-implementation"
     "propagation/ui"
     "propagation/sugar"
     "propagation/search"
     "propagation/reasons"
     "propagation/primitive-propagators"
     "propagation/examples/puzzle-utilities"
     "propagation/examples/intervals"
     "propagation/examples/hms-dms-radians"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/chess-moves"
     "pattern-matching-on-graphs/chess-board"
     "generic-interpreter/shared-syntax"
     "continuations/analyze-extra"
     "common/utils"
     "common/simple-tests"
     "common/operators"
     "common/operations"
     "common/match-utils"
     "common/arith"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original")))
  ((name call-with-input-file)
   (definers ())
   (referrers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl")))
  ((name call-with-output-string)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "common/utils"
                                              "common/predicates")))
  ((name call-with-truncated-output-string)
   (definers ())
   (referrers ("common/simple-tests")))
  ((name call-with-values)
   (definers ())
   (referrers
    ("user-defined-types/operations" "unification/type-resolver"
                                     "propagation/search"
                                     "common/simple-tests"
                                     "combinators/function-combinators")))
  ((name call/cc)
   (definers ())
   (referrers ("propagation/scheduler" "continuations-to-amb/ambsch")))
  ((name call/ccs) (definers ("continuations/analyze-extra")) (referrers ()))
  ((name call/ccs?) (definers ("continuations/analyze-extra")) (referrers ()))
  ((name can-go-both-ways) (definers ("user-defined-types/adventure-world"))
                           (referrers ()))
  ((name can-see) (definers ("user-defined-types/adventure-world"))
                  (referrers ()))
  ((name can-see-both-ways) (definers ("user-defined-types/adventure-world"))
                            (referrers ()))
  ((name capture-piece-at) (definers ("abstracting-a-domain/pmove"))
                           (referrers ("abstracting-a-domain/checkers-new")))
  ((name capture?) (definers ("pattern-matching-on-graphs/chess-board"))
                   (referrers ()))
  ((name captures-pieces?) (definers ("abstracting-a-domain/pmove"))
                           (referrers ("abstracting-a-domain/checkers-new")))
  ((name car)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/standard-arith"
     "user-defined-types/predicates"
     "user-defined-types/generics"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "unification/unify"
     "unification/type-resolver"
     "term-rewriting/rules"
     "regular-expressions/regexp"
     "propagation/ui"
     "propagation/sugar"
     "propagation/search"
     "propagation/reasons"
     "propagation/propagators"
     "propagation/primitive-propagators"
     "propagation/hierarchy"
     "propagation/examples/puzzle-utilities"
     "propagation/examples/intervals"
     "propagation/examples/hms-dms-radians"
     "pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/graph"
     "pattern-matching-on-graphs/chess-moves"
     "pattern-matching-on-graphs/chess-board"
     "non-strict-arguments/general-procedures"
     "layers/units"
     "layers/layered-data"
     "generic-interpreter/shared-syntax"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/interp"
     "exploratory-behavior/repl"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/matcher"
     "dependencies/support-sets"
     "continuations/analyze-extra"
     "continuations-to-amb/deque"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/executors"
     "compiling-to-execution-procedures/analyze"
     "common/utils"
     "common/trie"
     "common/simple-tests"
     "common/pretty-printer"
     "common/predicates"
     "common/predicate-counter"
     "common/package"
     "common/operators"
     "common/operations"
     "common/memoizers"
     "common/match-utils"
     "common/generic-procedures"
     "common/collections"
     "common/arith"
     "common/applicability"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/coords"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/board")))
  ((name car-satisfies) (definers ("unification/unify")) (referrers ()))
  ((name cdadr)
   (definers ())
   (referrers ("propagation/sugar" "generic-interpreter/shared-syntax")))
  ((name cdar)
   (definers ())
   (referrers
    ("term-rewriting/rules" "pattern-matching-on-graphs/chess-moves"
                            "common/generic-procedures")))
  ((name cdddr)
   (definers ())
   (referrers
    ("user-defined-types/templates" "unification/type-resolver"
                                    "generic-interpreter/shared-syntax"
                                    "common/match-utils")))
  ((name cddr)
   (definers ())
   (referrers
    ("user-defined-types/templates"
     "unification/type-resolver"
     "propagation/sugar"
     "pattern-matching-on-graphs/chess-moves"
     "generic-interpreter/shared-syntax"
     "common/utils"
     "common/simple-tests"
     "common/match-utils"
     "common/arith"
     "automatic-differentiation/replace-dx-differential")))
  ((name cdr)
   (definers ())
   (referrers
    ("user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/standard-arith"
     "user-defined-types/predicates"
     "user-defined-types/generics"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "unification/unify"
     "unification/type-resolver"
     "term-rewriting/rules"
     "term-rewriting/pattern-operator"
     "regular-expressions/regexp"
     "propagation/sugar"
     "propagation/search"
     "propagation/hierarchy"
     "propagation/examples/puzzle-utilities"
     "pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/graph"
     "pattern-matching-on-graphs/chess-moves"
     "layers/units"
     "layers/layered-data"
     "generic-procedures/generic-arith"
     "generic-interpreter/shared-syntax"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/matcher"
     "dependencies/support-sets"
     "continuations-to-amb/deque"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/executors"
     "common/utils"
     "common/trie"
     "common/simple-tests"
     "common/pretty-printer"
     "common/predicates"
     "common/predicate-counter"
     "common/package"
     "common/operators"
     "common/memoizers"
     "common/match-utils"
     "common/generic-procedures"
     "common/collections"
     "common/arith"
     "common/applicability"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/simplifier"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/game"
     "abstracting-a-domain/coords"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/board")))
  ((name cell-content) (definers ("propagation/cells"))
                       (referrers ("propagation/ui")))
  ((name cell-merge) (definers ("propagation/cells"))
                     (referrers ("propagation/primitive-propagators")))
  ((name cell-strongest)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/ui" "propagation/search"
                      "propagation/propagators"
                      "propagation/primitive-propagators"
                      "propagation/examples/time")))
  ((name cell?)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/ui" "propagation/sugar" "propagation/propagators")))
  ((name celsius-to-kelvin) (definers ("wrappers/units")) (referrers ()))
  ((name chaining-generic-procedure)
   (definers ("user-defined-types/generics"))
   (referrers
    ("user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects")))
  ((name change-piece-type)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name change?) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name char-whitespace?) (definers ()) (referrers ("common/simple-tests")))
  ((name char=?) (definers ()) (referrers ("regular-expressions/regexp")))
  ((name chars-needing-quoting) (definers ("regular-expressions/regexp"))
                                (referrers ()))
  ((name chars-needing-quoting-in-brackets)
   (definers ("regular-expressions/regexp"))
   (referrers ()))
  ((name check-executor-args) (definers ("exploratory-behavior/analyze"))
                              (referrers ()))
  ((name check-repl-initialized)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl")))
  ((name checkers)
   (definers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new"))
   (referrers ("abstracting-a-domain/checkers-shared")))
  ((name checkers-initial-pieces)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers ()))
  ((name checkers-piece-summary)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers ()))
  ((name chess-board-indices)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name chess-board-last-index)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name chess-board-size)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name chess-board:var)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name chess-dict:board)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name chess-move) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ()))
  ((name choose-any-hypothetical) (definers ("propagation/search"))
                                  (referrers ()))
  ((name choose-first-hypothetical) (definers ("propagation/search"))
                                    (referrers ()))
  ((name choose-first-premise-in-strong-nogood)
   (definers ("propagation/search"))
   (referrers ()))
  ((name choose-last-premise-in-strong-nogood)
   (definers ("propagation/search"))
   (referrers ()))
  ((name choose-least-common-item) (definers ("propagation/search"))
                                   (referrers ()))
  ((name choose-least-common-premise) (definers ("propagation/search"))
                                      (referrers ()))
  ((name choose-maximal-factor)
   (definers ("automatic-differentiation/handlers"))
   (referrers ()))
  ((name choose-most-common-item) (definers ("propagation/search"))
                                  (referrers ()))
  ((name choose-most-common-premise) (definers ("propagation/search"))
                                     (referrers ()))
  ((name choose-premise-to-disbelieve) (definers ("propagation/search"))
                                       (referrers ()))
  ((name choose-random-element) (definers ("propagation/search"))
                                (referrers ()))
  ((name choose-random-premise) (definers ("propagation/search"))
                                (referrers ()))
  ((name choose-random-premise-from-strong-nogood)
   (definers ("propagation/search"))
   (referrers ()))
  ((name choose-strongest-and-least-common-premise)
   (definers ("propagation/search"))
   (referrers ()))
  ((name choose-strongest-and-most-common-premise)
   (definers ("propagation/search"))
   (referrers ()))
  ((name circular-buffer?)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name clear-cell-probe!) (definers ("propagation/cells")) (referrers ()))
  ((name clear-premises!) (definers ("propagation/premises"))
                          (referrers ("propagation/scheduler")))
  ((name clear-relatable-hierarchy!) (definers ("propagation/hierarchy"))
                                     (referrers ("propagation/scheduler")))
  ((name clock-things) (definers ("user-defined-types/adventure-substrate"))
                       (referrers ()))
  ((name clock-tick!) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name clock?) (definers ("user-defined-types/adventure-substrate"))
                 (referrers ()))
  ((name close-enuf?) (definers ("common/utils")) (referrers ()))
  ((name cmdl-message/active) (definers ())
                              (referrers ("continuations-to-amb/ambsch")))
  ((name combination-expr?) (definers ("unification/type-resolver"))
                            (referrers ()))
  ((name combination-operands) (definers ("unification/type-resolver"))
                               (referrers ()))
  ((name combination-operator) (definers ("unification/type-resolver"))
                               (referrers ()))
  ((name combinations) (definers ("automatic-differentiation/utils"))
                       (referrers ()))
  ((name combine-derivatives)
   (definers ("automatic-differentiation/simplifier"))
   (referrers ()))
  ((name combine-fits) (definers ("user-defined-types/values"))
                       (referrers ("user-defined-types/functions")))
  ((name combine-like-terms)
   (definers ("automatic-differentiation/replace-dx-differential"))
   (referrers ()))
  ((name combined-arithmetic)
   (definers ("combining-arithmetics/standard-arith"))
   (referrers ()))
  ((name comparator) (definers ("common/arith")) (referrers ()))
  ((name complement) (definers ("common/predicates"))
                     (referrers ("unification/unify" "layers/layered-data")))
  ((name complex?) (definers ("user-defined-types/tags")) (referrers ()))
  ((name compose)
   (definers ("common/utils" "combinators/function-combinators"))
   (referrers
    ("wrappers/units" "non-strict-arguments/general-procedures"
                      "generic-interpreter/shared-repl"
                      "exploratory-behavior/analyze"
                      "compiling-to-execution-procedures/repl"
                      "compiling-to-execution-procedures/analyze"
                      "automatic-differentiation/simplifier"
                      "abstracting-a-domain/game-interpreter")))
  ((name compose*) (definers ("common/utils")) (referrers ()))
  ((name composed-operators-multiply)
   (definers ("automatic-differentiation/simplifier"))
   (referrers ()))
  ((name compound-predicate-components)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/standard-arith")))
  ((name compound-predicate-predicate)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name compound-predicate?) (definers ("user-defined-types/predicates"))
                              (referrers ()))
  ((name compound-procedure?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/shared-repl"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name compound-propagator)
   (definers ("propagation/propagators"))
   (referrers
    ("propagation/primitive-propagators"
     "propagation/examples/puzzle-utilities"
     "propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name compound-tag-components) (definers ("user-defined-types/predicates"))
                                  (referrers ()))
  ((name compound-tag-operator) (definers ("user-defined-types/predicates"))
                                (referrers ()))
  ((name compound-tag-shared) (definers ("user-defined-types/predicates"))
                              (referrers ()))
  ((name compound-tag?) (definers ("user-defined-types/predicates"))
                        (referrers ()))
  ((name compound-token-close-string) (definers ("common/pretty-printer"))
                                      (referrers ()))
  ((name compound-token-contents) (definers ("common/pretty-printer"))
                                  (referrers ()))
  ((name compound-token-length) (definers ("common/pretty-printer"))
                                (referrers ()))
  ((name compound-token-open-string) (definers ("common/pretty-printer"))
                                     (referrers ()))
  ((name compound-token-separator-string) (definers ("common/pretty-printer"))
                                          (referrers ()))
  ((name compound-token-width) (definers ("common/pretty-printer"))
                               (referrers ()))
  ((name compound-token-width-as-column) (definers ("common/pretty-printer"))
                                         (referrers ()))
  ((name compound-token-width-as-folded-column)
   (definers ("common/pretty-printer"))
   (referrers ()))
  ((name compound-token?) (definers ("common/pretty-printer")) (referrers ()))
  ((name compute-column-width) (definers ("common/pretty-printer"))
                               (referrers ()))
  ((name compute-new-position)
   (definers ("abstracting-a-domain/pmove"))
   (referrers ("abstracting-a-domain/checkers-new")))
  ((name compute-next-steps)
   (definers ("abstracting-a-domain/checkers-original"))
   (referrers ()))
  ((name cond->if)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name cond-clause-consequent)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers ()))
  ((name cond-clause-predicate)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers ()))
  ((name cond-clauses) (definers ("generic-interpreter/shared-syntax"))
                       (referrers ()))
  ((name cond?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name condition?) (definers ()) (referrers ("common/simple-tests")))
  ((name conjoin)
   (definers ("common/predicates"))
   (referrers ("user-defined-types/predicates" "layers/layered-data")))
  ((name conjoin*) (definers ("common/predicates")) (referrers ()))
  ((name conjunction?) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name connect-up-square)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name cons)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/standard-arith"
                      "user-defined-types/predicates"
                      "user-defined-types/generics"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "user-defined-types/adventure-objects"
                      "unification/unify"
                      "unification/type-resolver"
                      "term-rewriting/rules"
                      "term-rewriting/pattern-operator"
                      "regular-expressions/regexp"
                      "propagation/ui"
                      "propagation/sugar"
                      "propagation/search"
                      "propagation/scheduler"
                      "propagation/reasons"
                      "propagation/propagators"
                      "propagation/primitive-propagators"
                      "propagation/premises"
                      "propagation/hierarchy"
                      "propagation/cells"
                      "pattern-matching-on-graphs/graph-match"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-moves"
                      "pattern-matching-on-graphs/chess-board"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "exploratory-behavior/analyze"
                      "design-of-the-matcher/matcher"
                      "dependencies/support-sets"
                      "dependencies/support-layer"
                      "continuations-to-amb/deque"
                      "continuations-to-amb/ambsch"
                      "compiling-to-execution-procedures/executors"
                      "common/utils"
                      "common/trie"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/predicate-metadata"
                      "common/predicate-counter"
                      "common/package"
                      "common/match-utils"
                      "common/indexes"
                      "common/generic-procedures"
                      "common/collections"
                      "common/arith"
                      "combining-arithmetics/standard-arith"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/replace-dx-differential"
                      "automatic-differentiation/literal-functions"
                      "automatic-differentiation/extractor"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/game-repl"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/coords"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name cons*)
   (definers ())
   (referrers
    ("user-defined-types/adventure-world"
     "unification/type-resolver"
     "pattern-matching-on-graphs/chess-moves")))
  ((name constant-executor) (definers ("continuations/analyze-extra"))
                            (referrers ()))
  ((name constant-generic-procedure-handler)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/values" "user-defined-types/tagging"
                                 "user-defined-types/predicates"
                                 "user-defined-types/adventure-substrate"
                                 "user-defined-types/adventure-objects"
                                 "propagation/data-model"
                                 "pattern-matching-on-graphs/graph-match"
                                 "generic-interpreter/shared-rtdata"
                                 "common/match-utils")))
  ((name constant-names) (definers ("common/operators"))
                         (referrers ("common/arith")))
  ((name constant-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name constant-term?) (definers ("unification/unify")) (referrers ()))
  ((name constant-union)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("generic-procedures/generic-arith" "common/arith")))
  ((name constrain) (definers ("unification/type-resolver")) (referrers ()))
  ((name constraint-lhs) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name constraint-propagator)
   (definers ("propagation/constraint-propagators"))
   (referrers ()))
  ((name constraint-rhs) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name container:things) (definers ("user-defined-types/adventure-objects"))
                           (referrers ()))
  ((name container?) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name continue-revert!) (definers ("exploratory-behavior/rtdata"))
                           (referrers ("exploratory-behavior/analyze")))
  ((name contradiction-set) (definers ()) (referrers ("propagation/search")))
  ((name contradiction?) (definers ("propagation/cells"))
                         (referrers ("propagation/data-model")))
  ((name control-propagators) (definers ("propagation/primitive-propagators"))
                              (referrers ()))
  ((name coords+)
   (definers ("abstracting-a-domain/coords"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name coords-) (definers ("abstracting-a-domain/coords")) (referrers ()))
  ((name coords=?)
   (definers ("abstracting-a-domain/coords"))
   (referrers
    ("abstracting-a-domain/piece" "abstracting-a-domain/checkers-shared"
                                  "abstracting-a-domain/checkers-original"
                                  "abstracting-a-domain/board")))
  ((name cos) (definers ())
              (referrers ("automatic-differentiation/handlers")))
  ((name cos-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name count)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "propagation/search"
                                              "common/simple-tests")))
  ((name cpp)
   (definers ("common/utils"))
   (referrers
    ("propagation/ui" "propagation/examples/time" "common/simple-tests")))
  ((name create-avatar) (definers ("user-defined-types/adventure-world"))
                        (referrers ()))
  ((name create-exit) (definers ("user-defined-types/adventure-world"))
                      (referrers ()))
  ((name create-house-master)
   (definers ("user-defined-types/adventure-world"))
   (referrers ()))
  ((name create-house-masters)
   (definers ("user-defined-types/adventure-world"))
   (referrers ()))
  ((name create-mit) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name create-mobile-thing)
   (definers ("user-defined-types/adventure-world"))
   (referrers ()))
  ((name create-people) (definers ("user-defined-types/adventure-world"))
                        (referrers ()))
  ((name create-place) (definers ("user-defined-types/adventure-world"))
                       (referrers ()))
  ((name create-student) (definers ("user-defined-types/adventure-world"))
                         (referrers ()))
  ((name create-students) (definers ("user-defined-types/adventure-world"))
                          (referrers ()))
  ((name create-thing) (definers ("user-defined-types/adventure-world"))
                       (referrers ()))
  ((name create-troll) (definers ("user-defined-types/adventure-world"))
                       (referrers ()))
  ((name create-trolls) (definers ("user-defined-types/adventure-world"))
                        (referrers ()))
  ((name cross-product-union) (definers ("propagation/search"))
                              (referrers ()))
  ((name crown-kings) (definers ("abstracting-a-domain/checkers-original"))
                      (referrers ()))
  ((name crown-piece)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name current-board) (definers ("abstracting-a-domain/pmove"))
                        (referrers ("abstracting-a-domain/checkers-new")))
  ((name current-color) (definers ("abstracting-a-domain/board"))
                        (referrers ("abstracting-a-domain/game-repl")))
  ((name current-color-index) (definers ("abstracting-a-domain/board"))
                              (referrers ()))
  ((name current-output-port)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "common/utils"
                                              "common/pretty-printer")))
  ((name current-piece) (definers ("abstracting-a-domain/pmove"))
                        (referrers ("abstracting-a-domain/checkers-new")))
  ((name current-pieces)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/game-interpreter"
     "abstracting-a-domain/checkers-original")))
  ((name current-reason-source)
   (definers ("propagation/reasons"))
   (referrers ("propagation/propagators" "propagation/cells")))
  ((name current-time) (definers ("user-defined-types/adventure-substrate"))
                       (referrers ()))
  ((name curry-argument) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name cursor-column) (definers ("common/pretty-printer")) (referrers ()))
  ((name cursor-newline-indent) (definers ("common/pretty-printer"))
                                (referrers ()))
  ((name cursor-port) (definers ("common/pretty-printer")) (referrers ()))
  ((name cursor-remaining-width) (definers ("common/pretty-printer"))
                                 (referrers ()))
  ((name cursor-row) (definers ("common/pretty-printer")) (referrers ()))
  ((name cursor-write-space) (definers ("common/pretty-printer"))
                             (referrers ()))
  ((name cursor-write-string) (definers ("common/pretty-printer"))
                              (referrers ()))
  ((name cursor?) (definers ("common/pretty-printer")) (referrers ()))
  ((name d->dms) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name d:*)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/literal-functions"
     "automatic-differentiation/handlers")))
  ((name d:+)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/literal-functions"
     "automatic-differentiation/handlers")))
  ((name debug-output) (definers ("user-defined-types/adventure-substrate"))
                       (referrers ()))
  ((name declare-type-expr) (definers ("unification/type-resolver"))
                            (referrers ()))
  ((name decode-reason) (definers ("propagation/reasons"))
                        (referrers ("propagation/ui")))
  ((name default-analyze)
   (definers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name default-apply)
   (definers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name default-equality-tolerance) (definers ("common/utils"))
                                     (referrers ()))
  ((name default-eval) (definers ("generic-interpreter/interp"))
                       (referrers ()))
  ((name default-maximal-factor)
   (definers ("automatic-differentiation/handlers"))
   (referrers ()))
  ((name default-object)
   (definers ())
   (referrers
    ("propagation/examples/intervals"
     "layers/units"
     "common/utils"
     "common/simple-tests"
     "common/operations"
     "common/numeric-arith"
     "common/arith"
     "combining-arithmetics/standard-arith")))
  ((name default-object?)
   (definers ())
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate"
     "unification/type-resolver"
     "pattern-matching-on-graphs/graph"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/executors"
     "common/utils"
     "common/simple-tests"
     "common/pretty-printer"
     "common/operations"
     "common/memoizers"
     "common/arith"
     "automatic-differentiation/handlers")))
  ((name deferred?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/repl"
     "compiling-to-execution-procedures/repl")))
  ((name define-aggregate-rule)
   (definers ("abstracting-a-domain/game"))
   (referrers ("abstracting-a-domain/checkers-new")))
  ((name define-c:prop) (definers ("propagation/sugar")) (referrers ()))
  ((name define-cell) (definers ("propagation/sugar")) (referrers ()))
  ((name define-clock-handler)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name define-compound-operator-registrar)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name define-entity-printer) (definers ("common/utils")) (referrers ()))
  ((name define-evolution-rule)
   (definers ("abstracting-a-domain/game"))
   (referrers ("abstracting-a-domain/checkers-new")))
  ((name define-expectation-rule) (definers ("common/simple-tests"))
                                  (referrers ()))
  ((name define-expr?) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name define-generic-procedure-extractor)
   (definers ("common/generic-procedures"))
   (referrers
    ("generic-procedures/generic-arith" "automatic-differentiation/utils")))
  ((name define-generic-procedure-handler)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/values"
     "user-defined-types/tagging"
     "user-defined-types/predicates"
     "user-defined-types/operations"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/unify"
     "unification/type-resolver"
     "propagation/value-sets"
     "propagation/support-extra"
     "propagation/examples/intervals"
     "propagation/data-model"
     "propagation/cells"
     "pattern-matching-on-graphs/graph-match"
     "non-strict-arguments/general-procedures"
     "generic-procedures/generic-arith"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/shared-repl"
     "generic-interpreter/interp"
     "exploratory-behavior/repl"
     "exploratory-behavior/analyze"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/repl"
     "compiling-to-execution-procedures/analyze"
     "common/pretty-printer"
     "common/match-utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name define-initial-env-binding)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ("continuations/analyze-extra")))
  ((name define-layered-procedure-handler)
   (definers ("layers/layered-data"))
   (referrers ("propagation/support-extra" "propagation/reasons")))
  ((name define-name) (definers ("unification/type-resolver")) (referrers ()))
  ((name define-p:prop) (definers ("propagation/sugar")) (referrers ()))
  ((name define-parametric-type-operator)
   (definers ("unification/type-resolver"))
   (referrers ()))
  ((name define-pp-describer) (definers ())
                              (referrers ("user-defined-types/tagging")))
  ((name define-print-method)
   (definers ())
   (referrers ("user-defined-types/tagging" "layers/units" "common/utils")))
  ((name define-record-printer)
   (definers ("common/utils"))
   (referrers
    ("user-defined-types/values" "user-defined-types/predicates"
                                 "user-defined-types/adventure-substrate"
                                 "pattern-matching-on-graphs/graph"
                                 "common/package"
                                 "abstracting-a-domain/pmove"
                                 "abstracting-a-domain/piece"
                                 "abstracting-a-domain/checkers-original")))
  ((name define-tag-record-printer)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name define-tag-type) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name define-tag<=) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name define-value) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name define-var-type) (definers ("unification/type-resolver"))
                          (referrers ()))
  ((name define-variable!)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name define-vector-handler) (definers ("user-defined-types/vector-arith"))
                                (referrers ()))
  ((name definition-value)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name definition-variable)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name definition?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name degrees->radians) (definers ("propagation/examples/hms-dms-radians"))
                           (referrers ()))
  ((name delete-duplicates)
   (definers ())
   (referrers
    ("user-defined-types/values" "user-defined-types/predicates"
                                 "dependencies/support-sets"
                                 "common/operations"
                                 "common/memoizers")))
  ((name delete-item) (definers ("common/utils")) (referrers ()))
  ((name delv)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "automatic-differentiation/extractor")))
  ((name deque-back) (definers ("continuations-to-amb/deque")) (referrers ()))
  ((name deque-empty?) (definers ("continuations-to-amb/deque"))
                       (referrers ("continuations-to-amb/ambsch")))
  ((name deque-front) (definers ("continuations-to-amb/deque"))
                      (referrers ()))
  ((name deque?) (definers ("continuations-to-amb/deque")) (referrers ()))
  ((name dequed?) (definers ("continuations-to-amb/deque")) (referrers ()))
  ((name deriv-expr)
   (definers ("automatic-differentiation/literal-functions"))
   (referrers ()))
  ((name derivative) (definers ("automatic-differentiation/derivatives"))
                     (referrers ()))
  ((name diagonal-directions)
   (definers ("abstracting-a-domain/coords"))
   (referrers ("abstracting-a-domain/checkers-shared")))
  ((name die!) (definers ("user-defined-types/adventure-objects"))
               (referrers ()))
  ((name diff-coefficient)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name diff-factor>?)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name diff-factor?)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name diff-factors)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name diff-term-tag) (definers ("automatic-differentiation/derivatives"))
                        (referrers ()))
  ((name diff-term>?)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name diff-term?) (definers ("automatic-differentiation/derivatives"))
                     (referrers ()))
  ((name diff-terms)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name diff:*) (definers ("automatic-differentiation/handlers"))
                 (referrers ()))
  ((name diff:+) (definers ("automatic-differentiation/handlers"))
                 (referrers ()))
  ((name diff:-) (definers ("automatic-differentiation/handlers"))
                 (referrers ()))
  ((name diff:/) (definers ("automatic-differentiation/handlers"))
                 (referrers ()))
  ((name diff:acos) (definers ("automatic-differentiation/handlers"))
                    (referrers ()))
  ((name diff:asin) (definers ("automatic-differentiation/handlers"))
                    (referrers ()))
  ((name diff:atan1) (definers ("automatic-differentiation/handlers"))
                     (referrers ()))
  ((name diff:atan2) (definers ("automatic-differentiation/handlers"))
                     (referrers ()))
  ((name diff:binary-proc) (definers ("automatic-differentiation/handlers"))
                           (referrers ()))
  ((name diff:binary-proc-wrong)
   (definers ("automatic-differentiation/handlers"))
   (referrers ()))
  ((name diff:cos) (definers ("automatic-differentiation/handlers"))
                   (referrers ()))
  ((name diff:exp) (definers ("automatic-differentiation/handlers"))
                   (referrers ()))
  ((name diff:expt) (definers ("automatic-differentiation/handlers"))
                    (referrers ()))
  ((name diff:log) (definers ("automatic-differentiation/handlers"))
                   (referrers ()))
  ((name diff:sin) (definers ("automatic-differentiation/handlers"))
                   (referrers ()))
  ((name diff:sqrt) (definers ("automatic-differentiation/handlers"))
                    (referrers ()))
  ((name diff:square) (definers ("automatic-differentiation/handlers"))
                      (referrers ()))
  ((name diff:unary-proc) (definers ("automatic-differentiation/handlers"))
                          (referrers ()))
  ((name differential) (definers ("automatic-differentiation/utils"))
                       (referrers ()))
  ((name differential-tag)
   (definers ("automatic-differentiation/derivatives"))
   (referrers ()))
  ((name differential?)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/literal-functions"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name direction?) (definers ("user-defined-types/adventure-substrate"))
                     (referrers ("user-defined-types/adventure-objects")))
  ((name disable-debugging)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name discard-argument) (definers ("combinators/function-combinators"))
                           (referrers ()))
  ((name disjoin)
   (definers ("common/predicates"))
   (referrers
    ("user-defined-types/predicates"
     "user-defined-types/operations"
     "user-defined-types/functions"
     "unification/type-resolver"
     "combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants")))
  ((name disjoin*)
   (definers ("common/predicates"))
   (referrers
    ("user-defined-types/values" "user-defined-types/functions"
                                 "common/arith")))
  ((name disjoint-union-of-graph-nodes)
   (definers ("pattern-matching-on-graphs/graph"))
   (referrers ()))
  ((name disjunction?) (definers ("user-defined-types/predicates"))
                       (referrers ("user-defined-types/standard-arith")))
  ((name display)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "regular-expressions/regexp"
     "propagation/ui"
     "pattern-matching-on-graphs/chess-board"
     "exploratory-behavior/repl"
     "continuations-to-amb/ambsch"
     "common/utils"
     "common/simple-tests"
     "common/generic-procedures")))
  ((name display-item) (definers ("user-defined-types/adventure-substrate"))
                       (referrers ()))
  ((name display-message)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name display-to-string)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name div-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name dms->d) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name dms->radians) (definers ("propagation/examples/hms-dms-radians"))
                       (referrers ()))
  ((name do-substitute) (definers ("unification/unify")) (referrers ()))
  ((name doit!) (definers ("exploratory-behavior/repl")) (referrers ()))
  ((name dot-product-maker) (definers ("user-defined-types/vector-arith"))
                            (referrers ()))
  ((name dp) (definers ("common/pretty-printer")) (referrers ()))
  ((name drop) (definers ()) (referrers ("common/utils")))
  ((name drop-thing) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name drop-thing!) (definers ("user-defined-types/adventure-objects"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name duplicate-factors?)
   (definers ("automatic-differentiation/replace-dx-differential"))
   (referrers ()))
  ((name eat-people!) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name effect-wrapper) (definers ("continuations-to-amb/ambsch"))
                         (referrers ()))
  ((name element-1?) (definers ("unification/unify")) (referrers ()))
  ((name element-subsumes?) (definers ("propagation/value-sets"))
                            (referrers ()))
  ((name element?) (definers ("unification/unify")) (referrers ()))
  ((name elementwise-lists-of) (definers ("common/utils")) (referrers ()))
  ((name elide-reason-merges) (definers ("propagation/reasons"))
                              (referrers ()))
  ((name else-clause?) (definers ("generic-interpreter/shared-syntax"))
                       (referrers ()))
  ((name empty-interval?) (definers ("propagation/examples/intervals"))
                          (referrers ()))
  ((name empty-search-schedule) (definers ("continuations-to-amb/ambsch"))
                                (referrers ()))
  ((name enable-debugging)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name endo-function-predicate-domain)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name endo-function-predicate?) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name ensure-cell)
   (definers ("propagation/sugar"))
   (referrers
    ("propagation/examples/puzzle-utilities"
     "propagation/examples/example-support")))
  ((name enter-place!) (definers ("user-defined-types/adventure-objects"))
                       (referrers ()))
  ((name entity-extra)
   (definers ())
   (referrers ("pattern-matching-on-graphs/graph" "common/utils")))
  ((name entity?)
   (definers ())
   (referrers ("pattern-matching-on-graphs/graph" "common/utils")))
  ((name environment-assigned?) (definers ()) (referrers ("common/package")))
  ((name environment-bound?) (definers ()) (referrers ("common/utils")))
  ((name environment-define)
   (definers ())
   (referrers ("common/package" "common/operators")))
  ((name environment-lookup)
   (definers ())
   (referrers ("common/utils" "common/package" "common/operators")))
  ((name environment-parent) (definers ("generic-interpreter/shared-rtdata"))
                             (referrers ()))
  ((name environment-values) (definers ("generic-interpreter/shared-rtdata"))
                             (referrers ()))
  ((name environment-variables)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ()))
  ((name environment?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/analyze")))
  ((name eof-object?)
   (definers ())
   (referrers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl"
                                "common/simple-tests")))
  ((name eq-hash) (definers ()) (referrers ("common/memoizers")))
  ((name eq-predicate) (definers ("common/predicates")) (referrers ()))
  ((name eq?)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tags"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/generics"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "unification/type-resolver"
                      "regular-expressions/regexp"
                      "propagation/value-sets"
                      "propagation/ui"
                      "propagation/search"
                      "propagation/scheduler"
                      "propagation/reasons"
                      "propagation/primitive-propagators"
                      "propagation/premises"
                      "propagation/hierarchy"
                      "propagation/examples/intervals"
                      "propagation/cells"
                      "pattern-matching-on-graphs/graph-match"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-moves"
                      "pattern-matching-on-graphs/chess-board"
                      "layers/units"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "generic-interpreter/shared-repl"
                      "exploratory-behavior/repl"
                      "design-of-the-matcher/matcher"
                      "design-of-the-matcher/general"
                      "dependencies/support-sets"
                      "dependencies/support-layer"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "compiling-to-execution-procedures/executors"
                      "common/utils"
                      "common/trie"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/predicates"
                      "common/package"
                      "common/operators"
                      "common/operations"
                      "common/numeric-arith"
                      "common/memoizers"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/collections"
                      "common/arith"
                      "combining-arithmetics/standard-arith"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name equal*-predicate) (definers ("common/generic-procedures"))
                           (referrers ()))
  ((name equal*?)
   (definers ("common/generic-procedures"))
   (referrers ("user-defined-types/values" "user-defined-types/tagging")))
  ((name equal-hash) (definers ()) (referrers ("common/memoizers")))
  ((name equal-predicate) (definers ("common/predicates")) (referrers ()))
  ((name equal?)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/templates"
                      "propagation/sugar"
                      "propagation/hierarchy"
                      "propagation/examples/time"
                      "layers/units"
                      "design-of-the-matcher/matcher"
                      "common/simple-tests"
                      "common/predicates"
                      "common/memoizers"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/applicability"
                      "automatic-differentiation/replace-dx-differential"
                      "automatic-differentiation/derivatives")))
  ((name equality-predicate-maker) (definers ("common/predicates"))
                                   (referrers ("common/generic-procedures")))
  ((name equivalent?)
   (definers ("propagation/data-model"))
   (referrers
    ("propagation/value-sets" "propagation/ui"
                              "propagation/support-extra"
                              "propagation/reasons"
                              "propagation/cells")))
  ((name eqv-hash) (definers ()) (referrers ("common/memoizers")))
  ((name eqv-predicate) (definers ("common/predicates")) (referrers ()))
  ((name eqv?)
   (definers ())
   (referrers
    ("user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/predicates"
     "user-defined-types/generics"
     "user-defined-types/functions"
     "user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/unify"
     "regular-expressions/regexp"
     "propagation/primitive-propagators"
     "propagation/premises"
     "propagation/data-model"
     "pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/graph"
     "layers/layered-data"
     "design-of-the-matcher/matcher"
     "dependencies/support-sets"
     "common/utils"
     "common/predicates"
     "common/operations"
     "common/memoizers"
     "common/match-utils"
     "common/generic-procedures"
     "common/collections"
     "common/arith"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name error)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "unification/unify"
                      "unification/type-resolver"
                      "term-rewriting/rules"
                      "term-rewriting/pattern-operator"
                      "propagation/search"
                      "propagation/reasons"
                      "propagation/hierarchy"
                      "propagation/examples/time"
                      "propagation/examples/puzzle-utilities"
                      "propagation/examples/intervals"
                      "pattern-matching-on-graphs/lists"
                      "pattern-matching-on-graphs/graph-match"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-moves"
                      "pattern-matching-on-graphs/chess-board"
                      "non-strict-arguments/general-procedures"
                      "layers/units"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "generic-interpreter/shared-repl"
                      "generic-interpreter/interp"
                      "exploratory-behavior/repl"
                      "exploratory-behavior/analyze"
                      "design-of-the-matcher/matcher"
                      "design-of-the-matcher/general"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "compiling-to-execution-procedures/analyze"
                      "common/trie"
                      "common/simple-tests"
                      "common/package"
                      "common/operators"
                      "common/operations"
                      "common/memoizers"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/collections"
                      "common/arith"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/handlers"
                      "automatic-differentiation/extractor"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/game-repl"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name error-generic-procedure-handler)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name error:not-a)
   (definers ("common/predicates"))
   (referrers
    ("user-defined-types/templates" "user-defined-types/functions"
                                    "common/utils"
                                    "common/generic-procedures")))
  ((name error:not-a-list-of) (definers ("common/predicates")) (referrers ()))
  ((name error:wrong-type-argument) (definers ())
                                    (referrers ("common/predicates")))
  ((name eval)
   (definers ())
   (referrers ("continuations-to-amb/ambsch" "common/simple-tests")))
  ((name eval-operands) (definers ("generic-interpreter/interp"))
                        (referrers ()))
  ((name evaluate-sequence) (definers ("generic-interpreter/interp"))
                            (referrers ()))
  ((name even?)
   (definers ())
   (referrers
    ("wrappers/units" "pattern-matching-on-graphs/chess-board"
                      "common/utils")))
  ((name every)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "user-defined-types/adventure-objects"
     "propagation/propagators"
     "pattern-matching-on-graphs/graph"
     "layers/units"
     "layers/layered-data"
     "generic-interpreter/interp"
     "dependencies/support-sets"
     "compiling-to-execution-procedures/executors"
     "common/predicates"
     "common/match-utils"
     "common/applicability"
     "automatic-differentiation/derivatives")))
  ((name evolve-jumps) (definers ("abstracting-a-domain/checkers-original"))
                       (referrers ()))
  ((name evolve-paths) (definers ("abstracting-a-domain/checkers-original"))
                       (referrers ()))
  ((name evolve-pmove) (definers ("abstracting-a-domain/game-interpreter"))
                       (referrers ()))
  ((name evolve-pmove-from-text)
   (definers ("abstracting-a-domain/game-interpreter"))
   (referrers ()))
  ((name exact-integer?) (definers ("user-defined-types/tags"))
                         (referrers ()))
  ((name exact-nonnegative-integer?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("combinators/function-combinators" "abstracting-a-domain/game-repl")))
  ((name exact-positive-integer?) (definers ("user-defined-types/tags"))
                                  (referrers ()))
  ((name exact-rational?) (definers ("user-defined-types/tags"))
                          (referrers ("layers/units")))
  ((name exact-zero?) (definers ("dependencies/support-layer"))
                      (referrers ()))
  ((name exact?)
   (definers ())
   (referrers
    ("propagation/primitive-propagators"
     "pattern-matching-on-graphs/chess-board"
     "dependencies/support-layer"
     "common/utils")))
  ((name except-last-pair)
   (definers ())
   (referrers
    ("term-rewriting/pattern-operator" "propagation/propagators"
                                       "common/pretty-printer")))
  ((name execute-grouped-expression) (definers ("common/simple-tests"))
                                     (referrers ()))
  ((name execute-grouped-expressions) (definers ("common/simple-tests"))
                                      (referrers ()))
  ((name execute-operands) (definers ("exploratory-behavior/analyze"))
                           (referrers ("continuations/analyze-extra")))
  ((name execute-rules) (definers ("abstracting-a-domain/game-interpreter"))
                        (referrers ()))
  ((name execute-strict) (definers ("exploratory-behavior/analyze"))
                         (referrers ("continuations/analyze-extra")))
  ((name execution-trace)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name executor?)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name executors?)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers
    ("exploratory-behavior/analyze"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/analyze")))
  ((name exit:direction) (definers ("user-defined-types/adventure-objects"))
                         (referrers ()))
  ((name exit:from) (definers ("user-defined-types/adventure-objects"))
                    (referrers ()))
  ((name exit:to) (definers ("user-defined-types/adventure-objects"))
                  (referrers ()))
  ((name exit?) (definers ("user-defined-types/adventure-objects"))
                (referrers ()))
  ((name exits-here) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name exp) (definers ())
              (referrers ("automatic-differentiation/handlers")))
  ((name exp-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name expand-disjunct-predicate)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name expand-disjunct-predicates)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name expectation-context?) (definers ("common/simple-tests"))
                               (referrers ()))
  ((name expectation-rule-handler) (definers ("common/simple-tests"))
                                   (referrers ()))
  ((name expectation-rule-keyword) (definers ("common/simple-tests"))
                                   (referrers ()))
  ((name expectation-rule-n-args) (definers ("common/simple-tests"))
                                  (referrers ()))
  ((name expectation-rules) (definers ("common/simple-tests")) (referrers ()))
  ((name expr<?) (definers ("term-rewriting/rules"))
                 (referrers ("automatic-differentiation/simplifier")))
  ((name expt)
   (definers ())
   (referrers
    ("automatic-differentiation/simplifier"
     "automatic-differentiation/handlers")))
  ((name extend-arithmetic)
   (definers ("common/arith"))
   (referrers
    ("propagation/ui" "propagation/examples/example-support"
                      "combining-arithmetics/standard-arith")))
  ((name extend-constant) (definers ("user-defined-types/operations"))
                          (referrers ()))
  ((name extend-environment)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name extend-function-predicate)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name extend-generic-arithmetic!)
   (definers ("generic-procedures/generic-arith"))
   (referrers ("automatic-differentiation/utils")))
  ((name extend-operation-codomain)
   (definers ("user-defined-types/operations"))
   (referrers ("user-defined-types/standard-arith")))
  ((name extend-operation-domains)
   (definers ("user-defined-types/operations"))
   (referrers ("user-defined-types/standard-arith")))
  ((name extend-operation-function)
   (definers ("user-defined-types/operations"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith")))
  ((name extend-predicate) (definers ("user-defined-types/operations"))
                           (referrers ("user-defined-types/standard-arith")))
  ((name external-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name extract-dx-coefficient-from)
   (definers ())
   (referrers ("automatic-differentiation/extractor")))
  ((name extract-dx-default)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name extract-dx-differential)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name extract-dx-differential-1)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name extract-dx-function)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name extract-dx-part)
   (definers ("automatic-differentiation/extractor"))
   (referrers ("automatic-differentiation/derivatives")))
  ((name fahrenheit-to-celsius) (definers ("wrappers/units")) (referrers ()))
  ((name failing-test-result?) (definers ("common/simple-tests"))
                               (referrers ()))
  ((name failure?)
   (definers ("exploratory-behavior/rtdata"))
   (referrers ("exploratory-behavior/analyze" "continuations/analyze-extra")))
  ((name false-tag<=) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name false?) (definers ("generic-interpreter/shared-rtdata"))
                 (referrers ()))
  ((name filter)
   (definers ())
   (referrers
    ("user-defined-types/values" "user-defined-types/generics"
                                 "user-defined-types/functions"
                                 "user-defined-types/adventure-substrate"
                                 "user-defined-types/adventure-objects"
                                 "propagation/value-sets"
                                 "propagation/search"
                                 "dependencies/support-sets"
                                 "common/utils"
                                 "common/trie"
                                 "common/simple-tests"
                                 "common/arith"
                                 "automatic-differentiation/handlers"
                                 "automatic-differentiation/derivatives"
                                 "abstracting-a-domain/checkers-original"
                                 "abstracting-a-domain/checkers-new"
                                 "abstracting-a-domain/board")))
  ((name filter-map)
   (definers ())
   (referrers
    ("user-defined-types/functions" "propagation/search"
                                    "layers/layered-data"
                                    "common/simple-tests"
                                    "common/collections"
                                    "common/arith"
                                    "automatic-differentiation/handlers"
                                    "automatic-differentiation/extractor"
                                    "abstracting-a-domain/checkers-original"
                                    "abstracting-a-domain/checkers-new")))
  ((name final-change) (definers ("abstracting-a-domain/pmove"))
                       (referrers ()))
  ((name find)
   (definers ())
   (referrers
    ("user-defined-types/templates" "user-defined-types/predicates"
                                    "user-defined-types/adventure-substrate"
                                    "user-defined-types/adventure-objects"
                                    "propagation/search"
                                    "propagation/hierarchy"
                                    "pattern-matching-on-graphs/graph"
                                    "common/utils"
                                    "common/operations"
                                    "common/match-utils"
                                    "common/generic-procedures"
                                    "common/collections"
                                    "abstracting-a-domain/board")))
  ((name find-arithmetic-constant)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name find-arithmetic-operation)
   (definers ("common/arith"))
   (referrers ("generic-procedures/generic-arith")))
  ((name find-exit) (definers ("user-defined-types/adventure-objects"))
                    (referrers ()))
  ((name find-exit-in-direction)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ("user-defined-types/adventure-world")))
  ((name find-object-by-name)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-world")))
  ((name find-person) (definers ("user-defined-types/adventure-world"))
                      (referrers ()))
  ((name find-tail) (definers ()) (referrers ("common/simple-tests")))
  ((name find-thing) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name finish-move) (definers ("abstracting-a-domain/pmove"))
                      (referrers ("abstracting-a-domain/checkers-new")))
  ((name finite-part)
   (definers ("automatic-differentiation/handlers"))
   (referrers ("automatic-differentiation/literal-functions")))
  ((name first-compose) (definers ("combinators/function-combinators"))
                        (referrers ()))
  ((name first-operand) (definers ("generic-interpreter/shared-syntax"))
                        (referrers ()))
  ((name first-parallel-combine)
   (definers ("combinators/function-combinators"))
   (referrers ()))
  ((name fits-as-column?) (definers ("common/pretty-printer")) (referrers ()))
  ((name fits-as-folded-column?) (definers ("common/pretty-printer"))
                                 (referrers ()))
  ((name fits-in-width?) (definers ("common/pretty-printer")) (referrers ()))
  ((name fix:+) (definers ()) (referrers ("common/predicate-counter")))
  ((name fix:<) (definers ())
                (referrers ("generic-interpreter/shared-rtdata")))
  ((name fix:=) (definers ())
                (referrers ("generic-interpreter/shared-rtdata")))
  ((name flip-coin) (definers ("user-defined-types/adventure-substrate"))
                    (referrers ("user-defined-types/adventure-objects")))
  ((name flip-coords) (definers ("abstracting-a-domain/board"))
                      (referrers ()))
  ((name flo:flonum?) (definers ()) (referrers ("user-defined-types/tags")))
  ((name flo:ulp-of-one)
   (definers ())
   (referrers ("propagation/primitive-propagators" "common/utils")))
  ((name fold)
   (definers ())
   (referrers
    ("propagation/value-sets" "automatic-differentiation/literal-functions")))
  ((name for-each)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/tags"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/type-resolver"
     "propagation/ui"
     "propagation/search"
     "propagation/scheduler"
     "propagation/propagators"
     "propagation/premises"
     "pattern-matching-on-graphs/graph"
     "pattern-matching-on-graphs/chess-board"
     "layers/units"
     "generic-procedures/generic-arith"
     "continuations-to-amb/ambsch"
     "common/utils"
     "common/simple-tests"
     "common/pretty-printer"
     "common/predicate-counter"
     "common/generic-procedures"
     "abstracting-a-domain/game-repl")))
  ((name for-each-direction)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name for-each-distinct-pair)
   (definers ("common/utils"))
   (referrers ("propagation/examples/puzzle-utilities")))
  ((name force) (definers ())
                (referrers ("pattern-matching-on-graphs/graph")))
  ((name force-failure!) (definers ("propagation/ui")) (referrers ()))
  ((name force-next) (definers ("continuations-to-amb/ambsch"))
                     (referrers ()))
  ((name forward-diagonal-directions)
   (definers ("abstracting-a-domain/coords"))
   (referrers ("abstracting-a-domain/checkers-shared")))
  ((name forward-direction) (definers ("abstracting-a-domain/coords"))
                            (referrers ()))
  ((name fresh-line)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "propagation/ui"
     "pattern-matching-on-graphs/graph"
     "continuations-to-amb/ambsch"
     "common/utils"
     "common/simple-tests"
     "common/generic-procedures")))
  ((name full-arithmetic) (definers ("automatic-differentiation/utils"))
                          (referrers ()))
  ((name function-components) (definers ("user-defined-types/functions"))
                              (referrers ("user-defined-types/operations")))
  ((name function-extender)
   (definers ("combining-arithmetics/standard-arith"))
   (referrers
    ("combining-arithmetics/function-variants"
     "automatic-differentiation/utils")))
  ((name function-extender-with-coercion)
   (definers ("combining-arithmetics/function-variants"))
   (referrers ()))
  ((name function-name) (definers ("user-defined-types/functions"))
                        (referrers ("user-defined-types/standard-arith")))
  ((name function-predicate) (definers ("user-defined-types/functions"))
                             (referrers ("user-defined-types/operations")))
  ((name function-predicate-arity) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name function-predicate-codomain)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/operations")))
  ((name function-predicate-domains)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/operations")))
  ((name function-predicate?) (definers ("user-defined-types/functions"))
                              (referrers ()))
  ((name function-tag) (definers ("user-defined-types/functions"))
                       (referrers ()))
  ((name function-template) (definers ("user-defined-types/functions"))
                            (referrers ()))
  ((name function?)
   (definers
    ("user-defined-types/functions" "combining-arithmetics/standard-arith"))
   (referrers
    ("user-defined-types/values" "user-defined-types/standard-arith"
                                 "user-defined-types/operations"
                                 "combining-arithmetics/function-variants"
                                 "automatic-differentiation/extractor")))
  ((name g:advance) (definers ("generic-interpreter/interp"))
                    (referrers ("non-strict-arguments/general-procedures")))
  ((name g:append!) (definers ("pattern-matching-on-graphs/lists"))
                    (referrers ()))
  ((name g:apply) (definers ("generic-interpreter/interp"))
                  (referrers ("non-strict-arguments/general-procedures")))
  ((name g:car) (definers ("pattern-matching-on-graphs/lists"))
                (referrers ()))
  ((name g:cdr) (definers ("pattern-matching-on-graphs/lists"))
                (referrers ()))
  ((name g:cons) (definers ("pattern-matching-on-graphs/lists"))
                 (referrers ()))
  ((name g:equivalent?)
   (definers ("propagation/data-model"))
   (referrers ("propagation/support-extra" "propagation/examples/intervals")))
  ((name g:eval)
   (definers ("generic-interpreter/interp"))
   (referrers
    ("non-strict-arguments/general-procedures" "generic-interpreter/repl")))
  ((name g:handle-operand)
   (definers ("non-strict-arguments/general-procedures"))
   (referrers ()))
  ((name g:has-cdr?) (definers ("pattern-matching-on-graphs/lists"))
                     (referrers ()))
  ((name g:last) (definers ("pattern-matching-on-graphs/lists"))
                 (referrers ()))
  ((name g:last-pair) (definers ("pattern-matching-on-graphs/lists"))
                      (referrers ()))
  ((name g:null) (definers ("pattern-matching-on-graphs/lists"))
                 (referrers ()))
  ((name g:null?) (definers ("pattern-matching-on-graphs/lists"))
                  (referrers ()))
  ((name g:read)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("generic-interpreter/repl" "compiling-to-execution-procedures/repl")))
  ((name game-colors)
   (definers ("abstracting-a-domain/game"))
   (referrers
    ("abstracting-a-domain/checkers-shared" "abstracting-a-domain/board")))
  ((name game-depth) (definers ("abstracting-a-domain/game"))
                     (referrers ("abstracting-a-domain/board")))
  ((name game-types) (definers ("abstracting-a-domain/game")) (referrers ()))
  ((name game-width) (definers ("abstracting-a-domain/game"))
                     (referrers ("abstracting-a-domain/board")))
  ((name game?) (definers ("abstracting-a-domain/game")) (referrers ()))
  ((name general-compound-procedure?)
   (definers ("non-strict-arguments/general-procedures"))
   (referrers ()))
  ((name general-contradiction?) (definers ("propagation/cells"))
                                 (referrers ()))
  ((name general-derivative)
   (definers ("automatic-differentiation/derivatives"))
   (referrers ()))
  ((name generate-legal-moves) (definers ("abstracting-a-domain/board"))
                               (referrers ("abstracting-a-domain/game-repl")))
  ((name generate-moves) (definers ("abstracting-a-domain/checkers-original"))
                         (referrers ()))
  ((name generate-moves-using-rule-interpreter)
   (definers ("abstracting-a-domain/game-interpreter"))
   (referrers ("abstracting-a-domain/checkers-new")))
  ((name generate-uninterned-symbol)
   (definers ())
   (referrers
    ("pattern-matching-on-graphs/chess-board"
     "automatic-differentiation/derivatives")))
  ((name generate-unique-name) (definers ("unification/type-resolver"))
                               (referrers ()))
  ((name generic-metadata-arity) (definers ("common/generic-procedures"))
                                 (referrers ()))
  ((name generic-metadata-default-getter)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name generic-metadata-dispatch-store)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name generic-metadata-getter) (definers ("common/generic-procedures"))
                                  (referrers ()))
  ((name generic-metadata-name) (definers ("common/generic-procedures"))
                                (referrers ()))
  ((name generic-metadata?) (definers ("common/generic-procedures"))
                            (referrers ()))
  ((name generic-move!) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name generic-procedure-arity) (definers ("common/generic-procedures"))
                                  (referrers ()))
  ((name generic-procedure-constructor)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/tagging" "user-defined-types/generics"
                                  "generic-procedures/generic-arith")))
  ((name generic-procedure-dispatch) (definers ("common/generic-procedures"))
                                     (referrers ()))
  ((name generic-procedure-extractors)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name generic-procedure-handlers)
   (definers ("common/generic-procedures"))
   (referrers ("user-defined-types/functions")))
  ((name generic-procedure-metadata) (definers ("common/generic-procedures"))
                                     (referrers ()))
  ((name generic-procedure-name) (definers ("common/generic-procedures"))
                                 (referrers ()))
  ((name generic-procedure-rules) (definers ("common/generic-procedures"))
                                  (referrers ()))
  ((name generic-procedure?) (definers ("common/generic-procedures"))
                             (referrers ("user-defined-types/functions")))
  ((name generic-tag<=) (definers ("user-defined-types/predicates"))
                        (referrers ()))
  ((name get-a-value) (definers ("common/trie"))
                      (referrers ("common/generic-procedures")))
  ((name get-a-value-by-filtering) (definers ("common/trie")) (referrers ()))
  ((name get-a-value-by-searching) (definers ("common/trie")) (referrers ()))
  ((name get-acquisitiveness)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name get-aggregate-rules)
   (definers ("abstracting-a-domain/game"))
   (referrers ("abstracting-a-domain/game-interpreter")))
  ((name get-all-places)
   (definers ("user-defined-types/adventure-world"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name get-all-tag-supersets) (definers ("user-defined-types/predicates"))
                                (referrers ()))
  ((name get-all-values) (definers ("common/trie")) (referrers ()))
  ((name get-arity) (definers ("combinators/function-combinators"))
                    (referrers ()))
  ((name get-bag) (definers ("user-defined-types/adventure-objects"))
                  (referrers ()))
  ((name get-base-value)
   (definers ("propagation/data-model"))
   (referrers
    ("propagation/value-sets" "propagation/ui"
                              "propagation/support-extra"
                              "propagation/primitive-propagators"
                              "propagation/examples/time")))
  ((name get-binding) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name get-board) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name get-children) (definers ("propagation/hierarchy")) (referrers ()))
  ((name get-clock) (definers ("user-defined-types/adventure-world"))
                    (referrers ("user-defined-types/adventure-objects")))
  ((name get-column) (definers ("abstracting-a-domain/coords"))
                     (referrers ("abstracting-a-domain/board")))
  ((name get-compound-operator-registrar)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name get-data) (definers ("user-defined-types/tagging"))
                   (referrers ("user-defined-types/values")))
  ((name get-default-supplier-property)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name get-description)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name get-direction) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name get-evolution-rules)
   (definers ("abstracting-a-domain/game"))
   (referrers ("abstracting-a-domain/game-interpreter")))
  ((name get-execution-trace)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name get-executor-metadata)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name get-exits) (definers ("user-defined-types/adventure-objects"))
                    (referrers ()))
  ((name get-final-board)
   (definers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original"))
   (referrers ("abstracting-a-domain/game-repl")))
  ((name get-flags) (definers ("abstracting-a-domain/pmove")) (referrers ()))
  ((name get-from) (definers ("user-defined-types/adventure-objects"))
                   (referrers ()))
  ((name get-generic-procedure-handler)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name get-health) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name get-heaven) (definers ("user-defined-types/adventure-world"))
                     (referrers ("user-defined-types/adventure-objects")))
  ((name get-holder) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name get-hunger) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name get-implementation-value)
   (definers ("common/utils"))
   (referrers ("common/numeric-arith" "common/arith")))
  ((name get-irritability) (definers ("user-defined-types/adventure-objects"))
                           (referrers ()))
  ((name get-jumps) (definers ("abstracting-a-domain/checkers-new"))
                    (referrers ()))
  ((name get-location)
   (definers ("user-defined-types/adventure-objects"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate")))
  ((name get-matching-tries) (definers ("common/trie")) (referrers ()))
  ((name get-matching-vector-handlers)
   (definers ("user-defined-types/vector-arith"))
   (referrers ()))
  ((name get-name)
   (definers
    ("user-defined-types/adventure-substrate" "propagation/hierarchy"))
   (referrers
    ("propagation/reasons" "propagation/propagators"
                           "propagation/primitive-propagators"
                           "propagation/cells")))
  ((name get-object-name) (definers ("user-defined-types/standard-arith"))
                          (referrers ()))
  ((name get-origin) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name get-output-string) (definers ())
                            (referrers ("regular-expressions/regexp")))
  ((name get-output-string!) (definers ())
                             (referrers ("common/simple-tests")))
  ((name get-parent) (definers ("propagation/hierarchy")) (referrers ()))
  ((name get-piece) (definers ("abstracting-a-domain/pmove"))
                    (referrers ("abstracting-a-domain/checkers-shared")))
  ((name get-piece-at) (definers ("abstracting-a-domain/pmove"))
                       (referrers ()))
  ((name get-piece-to-move)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name get-port) (definers ("user-defined-types/adventure-substrate"))
                   (referrers ()))
  ((name get-predicate)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/values" "user-defined-types/functions")))
  ((name get-predicate-count) (definers ("common/predicate-counter"))
                              (referrers ()))
  ((name get-predicate-counts) (definers ("common/predicate-counter"))
                               (referrers ()))
  ((name get-predicate-metadata)
   (definers ("common/predicates"))
   (referrers ("user-defined-types/predicates" "common/predicate-metadata")))
  ((name get-predicate-property)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name get-premises) (definers ("propagation/ui")) (referrers ()))
  ((name get-property-value)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name get-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name get-restlessness) (definers ("user-defined-types/adventure-objects"))
                           (referrers ()))
  ((name get-row)
   (definers ("abstracting-a-domain/coords"))
   (referrers
    ("abstracting-a-domain/checkers-shared" "abstracting-a-domain/board")))
  ((name get-screen) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name get-simple-moves) (definers ("abstracting-a-domain/checkers-new"))
                           (referrers ()))
  ((name get-support) (definers ("propagation/support-extra"))
                      (referrers ("propagation/ui")))
  ((name get-tag)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/values" "user-defined-types/generics")))
  ((name get-tag-shared) (definers ("user-defined-types/predicates"))
                         (referrers ()))
  ((name get-tag-supersets) (definers ("user-defined-types/predicates"))
                            (referrers ()))
  ((name get-things) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name get-to) (definers ("user-defined-types/adventure-objects"))
                 (referrers ()))
  ((name get-value-in) (definers ("propagation/ui")) (referrers ()))
  ((name get-var-type) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name get-vector-handlers) (definers ("user-defined-types/vector-arith"))
                              (referrers ()))
  ((name get-vistas) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name gmatch:*) (definers ("pattern-matching-on-graphs/graph-match"))
                   (referrers ()))
  ((name gmatch:and) (definers ("pattern-matching-on-graphs/graph-match"))
                     (referrers ()))
  ((name gmatch:anonymous-var?)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:bind) (definers ("pattern-matching-on-graphs/graph-match"))
                      (referrers ()))
  ((name gmatch:compile-*)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-+)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-and)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-edge)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-opt)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-or)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-path)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-path-elt)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-path-elts)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-target)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:compile-var)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:finish-compile-path)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:named-sequence-var?)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:or) (definers ("pattern-matching-on-graphs/graph-match"))
                    (referrers ()))
  ((name gmatch:seq2) (definers ("pattern-matching-on-graphs/graph-match"))
                      (referrers ()))
  ((name gmatch:var-matcher)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name gmatch:var-type?)
   (definers ("pattern-matching-on-graphs/graph-match"))
   (referrers ()))
  ((name go)
   (definers
    ("user-defined-types/adventure-world" "generic-interpreter/shared-repl"))
   (referrers ()))
  ((name good-enuf?) (definers ("propagation/examples/example-support"))
                     (referrers ()))
  ((name grab-segment) (definers ("unification/unify")) (referrers ()))
  ((name graph-edge-predicate) (definers ("pattern-matching-on-graphs/graph"))
                               (referrers ()))
  ((name graph-edge-view) (definers ("pattern-matching-on-graphs/graph"))
                          (referrers ()))
  ((name graph-edge?) (definers ("pattern-matching-on-graphs/graph"))
                      (referrers ()))
  ((name graph-match) (definers ("pattern-matching-on-graphs/graph-match"))
                      (referrers ("pattern-matching-on-graphs/chess-board")))
  ((name graph-node) (definers ("pattern-matching-on-graphs/graph"))
                     (referrers ()))
  ((name graph-node-applier) (definers ("pattern-matching-on-graphs/graph"))
                             (referrers ()))
  ((name graph-node-applier->node)
   (definers ("pattern-matching-on-graphs/graph"))
   (referrers ()))
  ((name graph-node-applier?) (definers ("pattern-matching-on-graphs/graph"))
                              (referrers ()))
  ((name graph-node-view)
   (definers ("pattern-matching-on-graphs/graph"))
   (referrers ("pattern-matching-on-graphs/chess-board")))
  ((name graph-node?) (definers ("pattern-matching-on-graphs/graph"))
                      (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name graph-view-backward) (definers ("pattern-matching-on-graphs/graph"))
                              (referrers ()))
  ((name graph-view-forward) (definers ("pattern-matching-on-graphs/graph"))
                             (referrers ()))
  ((name graph-view-name) (definers ("pattern-matching-on-graphs/graph"))
                          (referrers ()))
  ((name graph-view?) (definers ("pattern-matching-on-graphs/graph"))
                      (referrers ()))
  ((name group-expressions) (definers ("common/simple-tests")) (referrers ()))
  ((name guarantee)
   (definers ("common/predicates"))
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/operations"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "user-defined-types/adventure-objects"
                      "unification/type-resolver"
                      "propagation/value-sets"
                      "propagation/ui"
                      "propagation/scheduler"
                      "propagation/reasons"
                      "propagation/hierarchy"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-board"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-rtdata"
                      "dependencies/support-sets"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/utils"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/overrides"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/arith"
                      "common/applicability"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name guarantee-list-of)
   (definers ("common/predicates"))
   (referrers
    ("user-defined-types/functions" "user-defined-types/adventure-substrate"
                                    "propagation/propagators"
                                    "common/utils"
                                    "common/pretty-printer"
                                    "common/package"
                                    "common/arith"
                                    "abstracting-a-domain/game-interpreter")))
  ((name guarantee-piece-on-board) (definers ("abstracting-a-domain/board"))
                                   (referrers ()))
  ((name guarantee-same-dimension)
   (definers ("user-defined-types/vector-arith"))
   (referrers ()))
  ((name h->hms) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name handle-cell-contradiction) (definers ("propagation/search"))
                                    (referrers ("propagation/cells")))
  ((name hang-out) (definers ("user-defined-types/adventure-world"))
                   (referrers ()))
  ((name has-implementation-value?) (definers ("common/utils"))
                                    (referrers ()))
  ((name hash-table->alist) (definers ())
                            (referrers ("common/predicate-counter")))
  ((name hash-table-clear!)
   (definers ())
   (referrers ("user-defined-types/predicates" "common/predicate-counter")))
  ((name hash-table-exists?)
   (definers ())
   (referrers ("propagation/premises" "common/collections")))
  ((name hash-table-intern!)
   (definers ())
   (referrers
    ("user-defined-types/tags" "user-defined-types/predicates"
                               "common/utils"
                               "common/memoizers"
                               "common/generic-procedures")))
  ((name hash-table-keys) (definers ()) (referrers ("common/collections")))
  ((name hash-table-ref)
   (definers ())
   (referrers ("propagation/premises" "common/collections")))
  ((name hash-table-ref/default)
   (definers ())
   (referrers
    ("wrappers/units" "common/predicate-counter"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils")))
  ((name hash-table-set!)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/tags"
                      "common/collections"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils")))
  ((name hash-table-update!) (definers ())
                             (referrers ("common/predicate-counter")))
  ((name hash-table/clear!) (definers ())
                            (referrers ("propagation/premises")))
  ((name hash-table/intern!) (definers ())
                             (referrers ("propagation/premises")))
  ((name have-compound-operator-registrar?)
   (definers ("user-defined-types/predicates"))
   (referrers ()))
  ((name heaven) (definers ("user-defined-types/adventure-world"))
                 (referrers ()))
  ((name here) (definers ("user-defined-types/adventure-world"))
               (referrers ()))
  ((name heron-step) (definers ("propagation/examples/example-support"))
                     (referrers ()))
  ((name hms->h) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name hms->radians) (definers ("propagation/examples/hms-dms-radians"))
                       (referrers ()))
  ((name hours->radians) (definers ("propagation/examples/hms-dms-radians"))
                         (referrers ()))
  ((name house-master:irritability)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name house-master?) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name hypothetical?) (definers ("propagation/premises"))
                        (referrers ("propagation/search")))
  ((name identity-name->getter) (definers ("common/arith")) (referrers ()))
  ((name identity-unit-conversion) (definers ("wrappers/units"))
                                   (referrers ()))
  ((name if-alternative)
   (definers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name if-consequent)
   (definers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name if-expr?) (definers ("unification/type-resolver")) (referrers ()))
  ((name if-predicate)
   (definers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name if?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name ignore-errors) (definers ()) (referrers ("common/simple-tests")))
  ((name ill-formed-syntax)
   (definers ())
   (referrers ("propagation/sugar" "continuations-to-amb/ambsch")))
  ((name implementation-tag) (definers ("user-defined-types/tags"))
                             (referrers ("user-defined-types/tagging")))
  ((name implementation-type-name)
   (definers ("common/utils"))
   (referrers
    ("user-defined-types/tags"
     "efficient-generic-procedures/cached-generics")))
  ((name implementation-type-predicate)
   (definers ("common/utils"))
   (referrers ("user-defined-types/tags")))
  ((name inch-to-meter) (definers ("wrappers/units")) (referrers ()))
  ((name increment-predicate-count!)
   (definers ("common/predicate-counter"))
   (referrers ("common/trie" "common/applicability")))
  ((name index->booleans) (definers ("common/indexes"))
                          (referrers ("user-defined-types/functions")))
  ((name index->choices) (definers ("common/utils")) (referrers ()))
  ((name index-all) (definers ("common/indexes")) (referrers ()))
  ((name index-limit) (definers ("common/indexes")) (referrers ()))
  ((name index-predicate) (definers ("common/indexes"))
                          (referrers ("user-defined-types/functions")))
  ((name inexact-real?) (definers ("user-defined-types/tags")) (referrers ()))
  ((name infer-program-types) (definers ("unification/type-resolver"))
                              (referrers ()))
  ((name infinitesimal-part)
   (definers ("automatic-differentiation/handlers"))
   (referrers
    ("automatic-differentiation/literal-functions"
     "automatic-differentiation/extractor")))
  ((name init) (definers ("generic-interpreter/shared-repl")) (referrers ()))
  ((name init-amb) (definers ("continuations-to-amb/ambsch")) (referrers ()))
  ((name initial-env-bindings)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ()))
  ((name initial-pieces-generator) (definers ("abstracting-a-domain/game"))
                                   (referrers ("abstracting-a-domain/board")))
  ((name initial-pmove) (definers ("abstracting-a-domain/pmove"))
                        (referrers ("abstracting-a-domain/game-interpreter")))
  ((name initialize-repl!) (definers ("generic-interpreter/shared-repl"))
                           (referrers ()))
  ((name initialize-scheduler) (definers ("propagation/scheduler"))
                               (referrers ("propagation/examples/time")))
  ((name input-prompt) (definers ("exploratory-behavior/repl"))
                       (referrers ()))
  ((name inquire) (definers ("propagation/ui")) (referrers ()))
  ((name inquire-internal) (definers ("propagation/ui")) (referrers ()))
  ((name inquire-value-description) (definers ("propagation/ui"))
                                    (referrers ()))
  ((name install-arithmetic!)
   (definers ("common/arith"))
   (referrers
    ("propagation/ui" "propagation/examples/time"
                      "automatic-differentiation/utils")))
  ((name install-core-propagators!)
   (definers ("propagation/primitive-propagators"))
   (referrers ("propagation/ui" "propagation/examples/time")))
  ((name install-package!)
   (definers ("common/package"))
   (referrers ("propagation/primitive-propagators" "common/arith")))
  ((name installable-operation-procedure?)
   (definers ("user-defined-types/operations"))
   (referrers ()))
  ((name instance-data-binding)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name instance-data-bindings)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name instance-data-properties)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name instance-data?) (definers ("user-defined-types/adventure-substrate"))
                         (referrers ()))
  ((name integer?) (definers ("user-defined-types/tags"))
                   (referrers ("pattern-matching-on-graphs/chess-board")))
  ((name intern-path-trie) (definers ("common/trie")) (referrers ()))
  ((name internal-operators) (definers ("common/operators")) (referrers ()))
  ((name intersect-intervals) (definers ("propagation/examples/intervals"))
                              (referrers ()))
  ((name interval) (definers ("propagation/examples/intervals"))
                   (referrers ()))
  ((name interval-extender) (definers ("propagation/examples/intervals"))
                            (referrers ()))
  ((name interval-high) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name interval-low) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name interval<=?) (definers ("propagation/examples/intervals"))
                      (referrers ()))
  ((name interval<?) (definers ("propagation/examples/intervals"))
                     (referrers ()))
  ((name interval=?) (definers ("propagation/examples/intervals"))
                     (referrers ()))
  ((name interval>+-) (definers ("propagation/examples/intervals"))
                      (referrers ()))
  ((name interval>=?) (definers ("propagation/examples/intervals"))
                      (referrers ()))
  ((name interval>?) (definers ("propagation/examples/intervals"))
                     (referrers ()))
  ((name interval?) (definers ("propagation/examples/intervals"))
                    (referrers ()))
  ((name invert-address) (definers ("pattern-matching-on-graphs/chess-board"))
                         (referrers ()))
  ((name invert-graph-view) (definers ("pattern-matching-on-graphs/graph"))
                            (referrers ()))
  ((name invert-interval) (definers ("propagation/examples/intervals"))
                          (referrers ()))
  ((name iota)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "pattern-matching-on-graphs/chess-board"
     "common/utils"
     "common/pretty-printer"
     "automatic-differentiation/utils"
     "automatic-differentiation/literal-functions"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/checkers-shared")))
  ((name irritate-students!)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name is-applicable?) (definers ("common/applicability"))
                         (referrers ("common/operations")))
  ((name is-flag-set?) (definers ("abstracting-a-domain/pmove"))
                       (referrers ()))
  ((name is-function-subsumed?) (definers ("user-defined-types/functions"))
                                (referrers ()))
  ((name is-generic-handler-applicable?)
   (definers ("user-defined-types/generics"))
   (referrers ()))
  ((name is-list-of) (definers ("common/predicates"))
                     (referrers ("user-defined-types/adventure-objects")))
  ((name is-non-empty-list-of) (definers ("common/predicates"))
                               (referrers ()))
  ((name is-operation-applicable?) (definers ("common/operations"))
                                   (referrers ()))
  ((name is-pair-of) (definers ("common/predicates"))
                     (referrers ("common/package")))
  ((name is-pmove-derived-from?)
   (definers ("abstracting-a-domain/pmove"))
   (referrers ("abstracting-a-domain/game-interpreter")))
  ((name is-pmove-empty?) (definers ("abstracting-a-domain/pmove"))
                          (referrers ("abstracting-a-domain/checkers-new")))
  ((name is-pmove-finished?)
   (definers ("abstracting-a-domain/pmove"))
   (referrers ("abstracting-a-domain/game-interpreter")))
  ((name is-position-occupied-by-opponent?)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-new")))
  ((name is-position-occupied-by-self?)
   (definers ("abstracting-a-domain/board"))
   (referrers ()))
  ((name is-position-on-board?)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name is-position-unoccupied?)
   (definers ("abstracting-a-domain/board"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name is-quotation?) (definers ("common/simple-tests")) (referrers ()))
  ((name joinish) (definers ("user-defined-types/predicates")) (referrers ()))
  ((name kick-out!) (definers ("propagation/ui")) (referrers ()))
  ((name killer) (definers ("propagation/examples/example-support"))
                 (referrers ()))
  ((name known-directions)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name lambda-body)
   (definers
    ("unification/type-resolver" "generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name lambda-bvl) (definers ("unification/type-resolver")) (referrers ()))
  ((name lambda-expr?) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name lambda-parameters)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name lambda?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name last)
   (definers ())
   (referrers
    ("unification/type-resolver" "term-rewriting/pattern-operator"
                                 "propagation/search"
                                 "pattern-matching-on-graphs/chess-board"
                                 "common/pretty-printer")))
  ((name last-operand?) (definers ("generic-interpreter/shared-syntax"))
                        (referrers ()))
  ((name last-pair)
   (definers ())
   (referrers
    ("propagation/propagators"
     "compiling-to-execution-procedures/executors")))
  ((name layer-accessor)
   (definers ("layers/layered-data"))
   (referrers ("propagation/reasons" "dependencies/support-layer")))
  ((name layer-alist?) (definers ("layers/layered-data")) (referrers ()))
  ((name layer?)
   (definers ("layers/layered-data"))
   (referrers
    ("propagation/reasons" "layers/units" "dependencies/support-layer")))
  ((name layered-arith) (definers ("propagation/examples/example-support"))
                        (referrers ("propagation/examples/time")))
  ((name layered-datum) (definers ("layers/layered-data"))
                        (referrers ("propagation/ui")))
  ((name layered-datum?)
   (definers ("layers/layered-data"))
   (referrers ("propagation/ui" "propagation/support-extra")))
  ((name layered-extender)
   (definers ("layers/layered-data"))
   (referrers ("propagation/ui" "propagation/examples/example-support")))
  ((name layered-metadata?) (definers ("layers/layered-data")) (referrers ()))
  ((name layered-procedure-dispatcher) (definers ("layers/layered-data"))
                                       (referrers ()))
  ((name layered-procedure-metadata) (definers ("layers/layered-data"))
                                     (referrers ()))
  ((name layered-procedure?) (definers ("layers/layered-data"))
                             (referrers ()))
  ((name layered-propagator-projector)
   (definers ("propagation/primitive-propagators"))
   (referrers ("propagation/ui" "propagation/examples/time")))
  ((name lazy-memo?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name lazy?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name leave-place!) (definers ("user-defined-types/adventure-objects"))
                       (referrers ()))
  ((name left-direction) (definers ("abstracting-a-domain/coords"))
                         (referrers ()))
  ((name length)
   (definers ())
   (referrers
    ("user-defined-types/templates"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "unification/type-resolver"
     "term-rewriting/rules"
     "propagation/ui"
     "propagation/search"
     "propagation/reasons"
     "propagation/examples/puzzle-utilities"
     "propagation/examples/intervals"
     "pattern-matching-on-graphs/graph-match"
     "non-strict-arguments/general-procedures"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/matcher"
     "dependencies/support-layer"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/analyze"
     "common/utils"
     "common/simple-tests"
     "common/pretty-printer"
     "common/operators"
     "common/operations"
     "common/match-utils"
     "common/arith"
     "common/applicability"
     "combinators/function-combinators"
     "automatic-differentiation/utils"
     "automatic-differentiation/literal-functions"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/game")))
  ((name let*->let-nest)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name let*?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name let->combination)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name let-body) (definers ("generic-interpreter/shared-syntax"))
                   (referrers ()))
  ((name let-bound-values) (definers ("generic-interpreter/shared-syntax"))
                           (referrers ()))
  ((name let-bound-variables) (definers ("generic-interpreter/shared-syntax"))
                              (referrers ()))
  ((name let-cell) (definers ("propagation/sugar")) (referrers ()))
  ((name let-cells) (definers ("propagation/sugar")) (referrers ()))
  ((name let-cells*) (definers ("propagation/sugar")) (referrers ()))
  ((name let-varspecs) (definers ("generic-interpreter/shared-syntax"))
                       (referrers ()))
  ((name let?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name lexical-reference) (definers ())
                            (referrers ("generic-interpreter/shared-rtdata")))
  ((name list)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/standard-arith"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-world"
                      "user-defined-types/adventure-substrate"
                      "user-defined-types/adventure-objects"
                      "unification/unify"
                      "unification/type-resolver"
                      "term-rewriting/rules"
                      "term-rewriting/rule-implementation"
                      "term-rewriting/pattern-operator"
                      "regular-expressions/regexp"
                      "propagation/ui"
                      "propagation/sugar"
                      "propagation/search"
                      "propagation/scheduler"
                      "propagation/reasons"
                      "propagation/propagators"
                      "propagation/primitive-propagators"
                      "propagation/premises"
                      "propagation/hierarchy"
                      "propagation/examples/puzzle-utilities"
                      "propagation/examples/intervals"
                      "propagation/examples/hms-dms-radians"
                      "propagation/examples/example-support"
                      "propagation/constraint-propagators"
                      "propagation/cells"
                      "pattern-matching-on-graphs/graph-match"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-moves"
                      "pattern-matching-on-graphs/chess-board"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "exploratory-behavior/analyze"
                      "design-of-the-matcher/matcher"
                      "dependencies/support-layer"
                      "continuations/analyze-extra"
                      "continuations-to-amb/ambsch"
                      "compiling-to-execution-procedures/executors"
                      "common/utils"
                      "common/trie"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/predicates"
                      "common/predicate-counter"
                      "common/package"
                      "common/operations"
                      "common/memoizers"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/applicability"
                      "combining-arithmetics/standard-arith"
                      "combining-arithmetics/function-variants"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/replace-dx-differential"
                      "automatic-differentiation/literal-functions"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game-interpreter"
                      "abstracting-a-domain/coords"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/checkers-new")))
  ((name list->extensible-lazy-graph)
   (definers ("pattern-matching-on-graphs/lists"))
   (referrers ()))
  ((name list->graph) (definers ("pattern-matching-on-graphs/lists"))
                      (referrers ()))
  ((name list->lazy-graph) (definers ("pattern-matching-on-graphs/lists"))
                           (referrers ()))
  ((name list->string) (definers ())
                       (referrers ("regular-expressions/regexp")))
  ((name list->vector) (definers ())
                       (referrers ("user-defined-types/vector-arith")))
  ((name list-copy)
   (definers ())
   (referrers ("propagation/scheduler" "pattern-matching-on-graphs/graph")))
  ((name list-head)
   (definers ())
   (referrers
    ("design-of-the-matcher/matcher" "common/simple-tests"
                                     "combinators/function-combinators")))
  ((name list-insert) (definers ("combinators/function-combinators"))
                      (referrers ()))
  ((name list-memoizer) (definers ("common/memoizers")) (referrers ()))
  ((name list-of-type?)
   (definers ())
   (referrers ("common/predicates" "abstracting-a-domain/pmove")))
  ((name list-of-unique-symbols?)
   (definers ())
   (referrers
    ("user-defined-types/templates" "unification/type-resolver"
                                    "abstracting-a-domain/pmove"
                                    "abstracting-a-domain/game")))
  ((name list-ref)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "propagation/search"
     "pattern-matching-on-graphs/chess-board"
     "common/utils"
     "combinators/function-combinators"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/board")))
  ((name list-remove) (definers ("combinators/function-combinators"))
                      (referrers ()))
  ((name list-tail)
   (definers ())
   (referrers
    ("design-of-the-matcher/matcher" "common/simple-tests"
                                     "combinators/function-combinators")))
  ((name list-term?) (definers ("unification/unify")) (referrers ()))
  ((name list<?) (definers ("term-rewriting/rules")) (referrers ()))
  ((name list?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("unification/unify" "unification/type-resolver"
                         "term-rewriting/rules"
                         "propagation/value-sets"
                         "propagation/ui"
                         "propagation/reasons"
                         "propagation/examples/intervals"
                         "pattern-matching-on-graphs/graph-match"
                         "layers/units"
                         "generic-interpreter/shared-syntax"
                         "design-of-the-matcher/matcher"
                         "dependencies/support-sets"
                         "compiling-to-execution-procedures/executors"
                         "common/utils"
                         "common/match-utils")))
  ((name literal-function)
   (definers
    ("combining-arithmetics/standard-arith"
     "automatic-differentiation/literal-functions"))
   (referrers ()))
  ((name load) (definers ()) (referrers ("common/utils")))
  ((name load-inline-test) (definers ("common/simple-tests")) (referrers ()))
  ((name load-inline-test-1) (definers ("common/simple-tests"))
                             (referrers ()))
  ((name load-library)
   (definers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl"))
   (referrers ()))
  ((name load-option) (definers ())
                      (referrers ("regular-expressions/regexp")))
  ((name load-quietly) (definers ("common/utils")) (referrers ()))
  ((name local-possessive) (definers ("user-defined-types/adventure-world"))
                           (referrers ()))
  ((name log) (definers ())
              (referrers ("automatic-differentiation/handlers")))
  ((name log-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name look-around) (definers ("user-defined-types/adventure-objects"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name look-in-bag) (definers ("user-defined-types/adventure-world"))
                      (referrers ()))
  ((name lookup-scheme-value) (definers ("generic-interpreter/shared-rtdata"))
                              (referrers ()))
  ((name lookup-variable-value)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name lset-adjoin)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "propagation/value-sets"
                                              "propagation/scheduler"
                                              "propagation/premises"
                                              "propagation/hierarchy"
                                              "propagation/cells"
                                              "dependencies/support-sets"
                                              "common/utils"
                                              "abstracting-a-domain/pmove")))
  ((name lset-difference)
   (definers ())
   (referrers
    ("user-defined-types/predicates" "dependencies/support-sets"
                                     "common/utils")))
  ((name lset-intersection) (definers ())
                            (referrers ("pattern-matching-on-graphs/graph")))
  ((name lset-memoizer) (definers ("common/memoizers")) (referrers ()))
  ((name lset-union)
   (definers ())
   (referrers
    ("propagation/reasons" "layers/layered-data"
                           "dependencies/support-sets"
                           "common/arith"
                           "common/applicability")))
  ((name lset<=) (definers ()) (referrers ("dependencies/support-sets")))
  ((name lset=)
   (definers ())
   (referrers
    ("user-defined-types/values" "regular-expressions/regexp"
                                 "dependencies/support-sets"
                                 "common/package"
                                 "common/memoizers")))
  ((name make-address) (definers ("pattern-matching-on-graphs/chess-board"))
                       (referrers ()))
  ((name make-alist-store)
   (definers ("common/collections"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/predicates")))
  ((name make-annotation-layer)
   (definers ("layers/layered-data"))
   (referrers
    ("propagation/reasons" "layers/units" "dependencies/support-layer")))
  ((name make-applicable-object-metadata)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name make-apply-hook) (definers ()) (referrers ("wrappers/units")))
  ((name make-arithmetic)
   (definers ("common/arith"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/standard-arith"
     "propagation/primitive-propagators"
     "propagation/examples/intervals"
     "layers/units"
     "layers/layered-data"
     "generic-procedures/generic-arith"
     "common/numeric-arith"
     "combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants"
     "automatic-differentiation/utils")))
  ((name make-arithmetic-1)
   (definers ("combining-arithmetics/standard-arith"))
   (referrers ()))
  ((name make-avatar) (definers ("user-defined-types/adventure-objects"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name make-bag) (definers ("user-defined-types/adventure-objects"))
                   (referrers ()))
  ((name make-begin) (definers ("generic-interpreter/shared-syntax"))
                     (referrers ()))
  ((name make-begin-expr) (definers ("unification/type-resolver"))
                          (referrers ()))
  ((name make-board) (definers ("abstracting-a-domain/board"))
                     (referrers ("abstracting-a-domain/checkers-shared")))
  ((name make-bundle-predicate)
   (definers ("common/utils"))
   (referrers
    ("propagation/scheduler" "propagation/propagators"
                             "propagation/premises"
                             "propagation/hierarchy"
                             "propagation/cells"
                             "pattern-matching-on-graphs/graph"
                             "layers/layered-data"
                             "compiling-to-execution-procedures/executors"
                             "common/simple-tests")))
  ((name make-cached-chaining-dispatch-store)
   (definers ("user-defined-types/generics"))
   (referrers ()))
  ((name make-cached-most-specific-dispatch-store)
   (definers ("user-defined-types/generics"))
   (referrers ()))
  ((name make-cell)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/sugar" "propagation/examples/puzzle-utilities"
                         "propagation/examples/example-support"
                         "propagation/constraint-propagators")))
  ((name make-chaining-dispatch-store)
   (definers ("user-defined-types/generics"))
   (referrers ("user-defined-types/tagging")))
  ((name make-change) (definers ("abstracting-a-domain/pmove"))
                      (referrers ()))
  ((name make-checkers)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name make-chess-board)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name make-chess-board-internal)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name make-circular-buffer)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name make-clock) (definers ("user-defined-types/adventure-substrate"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name make-combination-expr) (definers ("unification/type-resolver"))
                                (referrers ()))
  ((name make-compound-procedure)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name make-compound-tag) (definers ("user-defined-types/predicates"))
                            (referrers ()))
  ((name make-compound-token) (definers ("common/pretty-printer"))
                              (referrers ()))
  ((name make-converter) (definers ("wrappers/units")) (referrers ()))
  ((name make-coords)
   (definers ("abstracting-a-domain/coords"))
   (referrers
    ("abstracting-a-domain/game-repl" "abstracting-a-domain/checkers-shared"
                                      "abstracting-a-domain/board")))
  ((name make-cursor) (definers ("common/pretty-printer")) (referrers ()))
  ((name make-default-dispatch-store)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/generics"
     "efficient-generic-procedures/trie-generics"
     "efficient-generic-procedures/cached-generics")))
  ((name make-define-expr) (definers ("unification/type-resolver"))
                           (referrers ()))
  ((name make-deque) (definers ("continuations-to-amb/deque"))
                     (referrers ("continuations-to-amb/ambsch")))
  ((name make-diff-term)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name make-differential)
   (definers ("automatic-differentiation/derivatives"))
   (referrers
    ("automatic-differentiation/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name make-endo-function-arithmetic)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name make-endo-function-predicate)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name make-entity) (definers ())
                      (referrers ("pattern-matching-on-graphs/graph")))
  ((name make-equal-hash-table)
   (definers ())
   (referrers ("wrappers/units" "user-defined-types/predicates")))
  ((name make-executor)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers
    ("exploratory-behavior/analyze"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/analyze")))
  ((name make-exit) (definers ("user-defined-types/adventure-objects"))
                    (referrers ("user-defined-types/adventure-world")))
  ((name make-expectation-context) (definers ("common/simple-tests"))
                                   (referrers ()))
  ((name make-expectation-rule) (definers ("common/simple-tests"))
                                (referrers ()))
  ((name make-function-arithmetic)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name make-function-predicate)
   (definers ("user-defined-types/functions"))
   (referrers
    ("user-defined-types/standard-arith" "user-defined-types/operations")))
  ((name make-game) (definers ("abstracting-a-domain/game"))
                    (referrers ("abstracting-a-domain/checkers-shared")))
  ((name make-generic-arithmetic)
   (definers ("generic-procedures/generic-arith"))
   (referrers ("automatic-differentiation/utils")))
  ((name make-generic-metadata) (definers ("common/generic-procedures"))
                                (referrers ()))
  ((name make-global-environment)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ("generic-interpreter/shared-repl")))
  ((name make-graph-edge) (definers ("pattern-matching-on-graphs/graph"))
                          (referrers ()))
  ((name make-graph-node)
   (definers ("pattern-matching-on-graphs/graph"))
   (referrers
    ("pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/chess-board")))
  ((name make-graph-view)
   (definers ("pattern-matching-on-graphs/graph"))
   (referrers ("pattern-matching-on-graphs/chess-board")))
  ((name make-hash-table) (definers ()) (referrers ("common/memoizers")))
  ((name make-hash-table-store) (definers ("common/collections"))
                                (referrers ()))
  ((name make-histogram) (definers ("propagation/search")) (referrers ()))
  ((name make-house-master)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ("user-defined-types/adventure-world")))
  ((name make-hypotheticals) (definers ("propagation/premises"))
                             (referrers ("propagation/search")))
  ((name make-if) (definers ("generic-interpreter/shared-syntax"))
                  (referrers ()))
  ((name make-if-expr) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name make-infinitesimal)
   (definers ("automatic-differentiation/derivatives"))
   (referrers ()))
  ((name make-initialized-vector)
   (definers ())
   (referrers ("automatic-differentiation/extractor")))
  ((name make-installable-operation-procedure)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("common/arith")))
  ((name make-installable-procedure) (definers ("common/arith"))
                                     (referrers ()))
  ((name make-instance-data)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name make-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name make-jump) (definers ("abstracting-a-domain/checkers-original"))
                    (referrers ()))
  ((name make-key-weak-eqv-hash-table)
   (definers ())
   (referrers
    ("user-defined-types/tags" "propagation/premises"
                               "common/predicate-counter"
                               "common/generic-procedures"
                               "common/collections"
                               "combinators/function-combinators"
                               "automatic-differentiation/utils")))
  ((name make-lambda) (definers ("generic-interpreter/shared-syntax"))
                      (referrers ()))
  ((name make-lambda-expr) (definers ("unification/type-resolver"))
                           (referrers ()))
  ((name make-layered-datum) (definers ("layers/layered-data"))
                             (referrers ()))
  ((name make-layered-metadata) (definers ("layers/layered-data"))
                                (referrers ()))
  ((name make-layered-procedure)
   (definers ("layers/layered-data"))
   (referrers ("propagation/primitive-propagators" "propagation/data-model")))
  ((name make-list)
   (definers ())
   (referrers
    ("regular-expressions/regexp"
     "compiling-to-execution-procedures/executors"
     "common/applicability")))
  ((name make-list-hash) (definers ("common/memoizers")) (referrers ()))
  ((name make-list-memoizer) (definers ("common/memoizers")) (referrers ()))
  ((name make-list=) (definers ("common/memoizers")) (referrers ()))
  ((name make-listish-memoizer) (definers ("user-defined-types/predicates"))
                                (referrers ()))
  ((name make-lset=) (definers ("common/memoizers")) (referrers ()))
  ((name make-memoizer-table) (definers ("common/memoizers")) (referrers ()))
  ((name make-metadata-association)
   (definers ("common/collections"))
   (referrers
    ("user-defined-types/values" "user-defined-types/adventure-substrate"
                                 "term-rewriting/pattern-operator"
                                 "layers/layered-data"
                                 "compiling-to-execution-procedures/executors"
                                 "common/predicates"
                                 "common/generic-procedures"
                                 "common/arith")))
  ((name make-mobile-thing)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ("user-defined-types/adventure-world")))
  ((name make-most-specific-dispatch-store)
   (definers ("user-defined-types/generics"))
   (referrers ()))
  ((name make-new-dx) (definers ("automatic-differentiation/derivatives"))
                      (referrers ("automatic-differentiation/extractor")))
  ((name make-object-applicable)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name make-object-union) (definers ("user-defined-types/values"))
                            (referrers ("user-defined-types/functions")))
  ((name make-operation)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers
    ("propagation/examples/intervals"
     "layers/layered-data"
     "combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants")))
  ((name make-package)
   (definers ("common/package"))
   (referrers ("propagation/primitive-propagators" "common/arith")))
  ((name make-parameter)
   (definers ())
   (referrers
    ("propagation/scheduler" "propagation/reasons"
                             "propagation/hierarchy"
                             "continuations-to-amb/ambsch"
                             "common/simple-tests"
                             "common/predicate-counter"
                             "common/generic-procedures"
                             "automatic-differentiation/simplifier")))
  ((name make-parameter-binding) (definers ("user-defined-types/templates"))
                                 (referrers ()))
  ((name make-parametric-tag) (definers ("user-defined-types/predicates"))
                              (referrers ("user-defined-types/templates")))
  ((name make-pattern-operator) (definers ("term-rewriting/pattern-operator"))
                                (referrers ()))
  ((name make-permutation) (definers ("combinators/function-combinators"))
                           (referrers ()))
  ((name make-piece)
   (definers
    ("pattern-matching-on-graphs/chess-board" "abstracting-a-domain/piece"))
   (referrers ("abstracting-a-domain/checkers-shared")))
  ((name make-place) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name make-predicate-template)
   (definers ("user-defined-types/templates"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith"
                                       "user-defined-types/functions")))
  ((name make-predicate-template-tag-instantiator)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name make-premise-metadata) (definers ("propagation/premises"))
                                (referrers ()))
  ((name make-promise) (definers ())
                       (referrers ("pattern-matching-on-graphs/lists")))
  ((name make-property) (definers ("user-defined-types/adventure-substrate"))
                        (referrers ("user-defined-types/adventure-objects")))
  ((name make-record-type)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "pattern-matching-on-graphs/graph"
                      "generic-interpreter/shared-rtdata"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/generic-procedures"
                      "common/arith"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name make-reified-fail) (definers ("continuations/analyze-extra"))
                            (referrers ()))
  ((name make-reified-succeed) (definers ("continuations/analyze-extra"))
                               (referrers ()))
  ((name make-relations)
   (definers ("propagation/hierarchy"))
   (referrers
    ("propagation/propagators" "propagation/premises" "propagation/cells")))
  ((name make-rule)
   (definers ("term-rewriting/rule-implementation"))
   (referrers
    ("term-rewriting/rules" "automatic-differentiation/simplifier")))
  ((name make-screen) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name make-signature-selector)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/vector-arith")))
  ((name make-simple-dispatch-store)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/generics" "automatic-differentiation/utils")))
  ((name make-simple-function)
   (definers ("user-defined-types/functions"))
   (referrers
    ("user-defined-types/standard-arith" "user-defined-types/operations")))
  ((name make-simple-function-metadata)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name make-simple-list-memoizer) (definers ("common/memoizers"))
                                    (referrers ()))
  ((name make-simple-move)
   (definers ("abstracting-a-domain/checkers-original"))
   (referrers ()))
  ((name make-simple-operation)
   (definers ("user-defined-types/operations"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith")))
  ((name make-simple-predicate) (definers ("user-defined-types/predicates"))
                                (referrers ("user-defined-types/tags")))
  ((name make-simple-tag) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name make-simple-token) (definers ("common/pretty-printer"))
                            (referrers ()))
  ((name make-strong-eq-hash-table) (definers ())
                                    (referrers ("common/utils")))
  ((name make-student) (definers ("user-defined-types/adventure-objects"))
                       (referrers ("user-defined-types/adventure-world")))
  ((name make-subsetting-dispatch-store-maker)
   (definers ("user-defined-types/generics"))
   (referrers ()))
  ((name make-support-set) (definers ("dependencies/support-sets"))
                           (referrers ("propagation/ui")))
  ((name make-symbolic-arithmetic)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name make-symbolic-predicate)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name make-tag-shared) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name make-texpr) (definers ("unification/type-resolver")) (referrers ()))
  ((name make-thing) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name make-top-level-env-frame) (definers ("unification/type-resolver"))
                                   (referrers ()))
  ((name make-trie) (definers ("common/trie"))
                    (referrers ("common/generic-procedures")))
  ((name make-trie-dispatch-store)
   (definers ("common/generic-procedures"))
   (referrers
    ("efficient-generic-procedures/trie-generics"
     "efficient-generic-procedures/cached-generics")))
  ((name make-troll) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name make-type) (definers ("user-defined-types/adventure-substrate"))
                    (referrers ("user-defined-types/adventure-objects")))
  ((name make-type-cell) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name make-unforced-promise)
   (definers ())
   (referrers ("pattern-matching-on-graphs/lists")))
  ((name make-unit-conversion) (definers ("wrappers/units")) (referrers ()))
  ((name make-unit-conversion-record) (definers ("wrappers/units"))
                                      (referrers ()))
  ((name make-value-set) (definers ("propagation/value-sets")) (referrers ()))
  ((name make-vector-arithmetic)
   (definers ("user-defined-types/vector-arith"))
   (referrers ()))
  ((name make-vector-handler) (definers ("user-defined-types/vector-arith"))
                              (referrers ()))
  ((name make-vector-predicate) (definers ("user-defined-types/vector-arith"))
                                (referrers ()))
  ((name make-weak-alist-store) (definers ("common/collections"))
                                (referrers ("layers/layered-data")))
  ((name make-weak-eq-set) (definers ("common/collections"))
                           (referrers ("user-defined-types/predicates")))
  ((name mandate-jumps) (definers ("abstracting-a-domain/checkers-original"))
                        (referrers ()))
  ((name map)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/standard-arith"
                      "user-defined-types/predicates"
                      "user-defined-types/operations"
                      "user-defined-types/generics"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-world"
                      "user-defined-types/adventure-substrate"
                      "user-defined-types/adventure-objects"
                      "unification/type-resolver"
                      "term-rewriting/rules"
                      "propagation/value-sets"
                      "propagation/ui"
                      "propagation/sugar"
                      "propagation/search"
                      "propagation/reasons"
                      "propagation/propagators"
                      "propagation/primitive-propagators"
                      "propagation/premises"
                      "propagation/hierarchy"
                      "propagation/examples/time"
                      "propagation/examples/puzzle-utilities"
                      "propagation/examples/intervals"
                      "pattern-matching-on-graphs/graph-match"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-moves"
                      "pattern-matching-on-graphs/chess-board"
                      "non-strict-arguments/general-procedures"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "generic-interpreter/interp"
                      "exploratory-behavior/analyze"
                      "design-of-the-matcher/matcher"
                      "dependencies/support-sets"
                      "dependencies/support-layer"
                      "continuations-to-amb/ambsch"
                      "compiling-to-execution-procedures/analyze"
                      "common/utils"
                      "common/trie"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/predicate-metadata"
                      "common/package"
                      "common/operators"
                      "common/operations"
                      "common/memoizers"
                      "common/match-utils"
                      "common/generic-procedures"
                      "common/collections"
                      "common/arith"
                      "combining-arithmetics/standard-arith"
                      "combining-arithmetics/function-variants"
                      "combinators/function-combinators"
                      "automatic-differentiation/utils"
                      "automatic-differentiation/simplifier"
                      "automatic-differentiation/literal-functions"
                      "automatic-differentiation/extractor"
                      "automatic-differentiation/derivatives"
                      "abstracting-a-domain/game-interpreter"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-shared"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/checkers-new"
                      "abstracting-a-domain/board")))
  ((name map-function) (definers ("user-defined-types/functions"))
                       (referrers ()))
  ((name map-object-union) (definers ("user-defined-types/values"))
                           (referrers ()))
  ((name map-template-pattern) (definers ("user-defined-types/templates"))
                               (referrers ()))
  ((name map-value-set) (definers ("propagation/value-sets")) (referrers ()))
  ((name mark-premise-in!)
   (definers ("propagation/premises"))
   (referrers ("propagation/ui" "propagation/search")))
  ((name mark-premise-out!)
   (definers ("propagation/premises"))
   (referrers ("propagation/ui" "propagation/search")))
  ((name match-args)
   (definers ("common/applicability"))
   (referrers
    ("user-defined-types/values"
     "user-defined-types/tagging"
     "user-defined-types/predicates"
     "user-defined-types/operations"
     "user-defined-types/functions"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/unify"
     "unification/type-resolver"
     "propagation/value-sets"
     "propagation/support-extra"
     "propagation/examples/intervals"
     "propagation/data-model"
     "propagation/cells"
     "pattern-matching-on-graphs/graph-match"
     "non-strict-arguments/general-procedures"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/shared-repl"
     "generic-interpreter/interp"
     "exploratory-behavior/repl"
     "exploratory-behavior/analyze"
     "continuations/analyze-extra"
     "compiling-to-execution-procedures/repl"
     "compiling-to-execution-procedures/analyze"
     "common/pretty-printer"
     "common/match-utils"
     "common/generic-procedures"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name match-head) (definers ("common/simple-tests")) (referrers ()))
  ((name match-list?) (definers ("pattern-matching-on-graphs/graph-match"))
                      (referrers ()))
  ((name match-template-pattern) (definers ("user-defined-types/templates"))
                                 (referrers ()))
  ((name match:all-values) (definers ("common/match-utils"))
                           (referrers ("term-rewriting/rule-implementation")))
  ((name match:binding-name)
   (definers ("common/match-utils"))
   (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name match:binding-type)
   (definers ("common/match-utils"))
   (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name match:binding-value)
   (definers ("common/match-utils"))
   (referrers
    ("pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/chess-board"
     "design-of-the-matcher/matcher")))
  ((name match:bindings) (definers ("common/match-utils"))
                         (referrers ("design-of-the-matcher/matcher")))
  ((name match:compile-pattern)
   (definers ("design-of-the-matcher/matcher"))
   (referrers ("term-rewriting/rule-implementation")))
  ((name match:dict->procedure) (definers ("common/match-utils"))
                                (referrers ()))
  ((name match:dict-substitution)
   (definers ("common/match-utils"))
   (referrers ("unification/unify" "unification/type-resolver")))
  ((name match:dict?) (definers ("common/match-utils")) (referrers ()))
  ((name match:element) (definers ("design-of-the-matcher/matcher"))
                        (referrers ()))
  ((name match:element-no-restriction)
   (definers ("design-of-the-matcher/matcher"))
   (referrers ()))
  ((name match:element-var?)
   (definers ("common/match-utils"))
   (referrers ("unification/unify" "pattern-matching-on-graphs/graph-match")))
  ((name match:equivalent-patterns?) (definers ("common/match-utils"))
                                     (referrers ()))
  ((name match:eqv) (definers ("design-of-the-matcher/matcher"))
                    (referrers ()))
  ((name match:extend-dict)
   (definers ("common/match-utils"))
   (referrers
    ("unification/unify" "pattern-matching-on-graphs/graph-match"
                         "pattern-matching-on-graphs/chess-board"
                         "design-of-the-matcher/matcher")))
  ((name match:get-value)
   (definers ("common/match-utils"))
   (referrers
    ("unification/unify" "pattern-matching-on-graphs/chess-moves"
                         "pattern-matching-on-graphs/chess-board")))
  ((name match:has-binding?) (definers ("common/match-utils"))
                             (referrers ("unification/unify")))
  ((name match:list) (definers ("design-of-the-matcher/matcher"))
                     (referrers ()))
  ((name match:lookup)
   (definers ("common/match-utils"))
   (referrers
    ("pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/chess-board"
     "design-of-the-matcher/matcher")))
  ((name match:make-binding) (definers ("common/match-utils")) (referrers ()))
  ((name match:make-var)
   (definers ("common/match-utils"))
   (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name match:map-binding-value)
   (definers ("common/match-utils"))
   (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name match:map-bindings)
   (definers ("common/match-utils"))
   (referrers ("pattern-matching-on-graphs/graph-match")))
  ((name match:map-dict-values) (definers ("common/match-utils"))
                                (referrers ("unification/unify")))
  ((name match:map-vars) (definers ("common/match-utils")) (referrers ()))
  ((name match:named-var?) (definers ("common/match-utils")) (referrers ()))
  ((name match:new-bindings) (definers ("common/match-utils")) (referrers ()))
  ((name match:new-dict)
   (definers ("common/match-utils"))
   (referrers
    ("unification/unify" "pattern-matching-on-graphs/chess-board"
                         "design-of-the-matcher/matcher")))
  ((name match:occurs-in?) (definers ("common/match-utils"))
                           (referrers ("unification/unify")))
  ((name match:pattern-names)
   (definers ("design-of-the-matcher/matcher"))
   (referrers ("term-rewriting/rule-implementation")))
  ((name match:satisfies-restriction?)
   (definers ("common/match-utils"))
   (referrers ("unification/unify" "design-of-the-matcher/matcher")))
  ((name match:segment) (definers ("design-of-the-matcher/matcher"))
                        (referrers ()))
  ((name match:segment-equal?) (definers ("design-of-the-matcher/matcher"))
                               (referrers ()))
  ((name match:segment-var?) (definers ("common/match-utils"))
                             (referrers ("unification/unify")))
  ((name match:single-substitution) (definers ("common/match-utils"))
                                    (referrers ("unification/unify")))
  ((name match:var-has-restriction?) (definers ("common/match-utils"))
                                     (referrers ()))
  ((name match:var-name)
   (definers ("common/match-utils"))
   (referrers
    ("pattern-matching-on-graphs/graph-match"
     "design-of-the-matcher/matcher")))
  ((name match:var-restriction) (definers ("common/match-utils"))
                                (referrers ()))
  ((name match:var-type)
   (definers ("common/match-utils"))
   (referrers
    ("pattern-matching-on-graphs/graph-match"
     "design-of-the-matcher/matcher")))
  ((name match:var-type?) (definers ("common/match-utils")) (referrers ()))
  ((name match:var-types) (definers ("common/match-utils")) (referrers ()))
  ((name match:var?)
   (definers ("common/match-utils"))
   (referrers
    ("unification/unify" "pattern-matching-on-graphs/graph-match"
                         "pattern-matching-on-graphs/chess-moves"
                         "design-of-the-matcher/matcher")))
  ((name match:vars-equal?) (definers ("common/match-utils"))
                            (referrers ("unification/unify")))
  ((name matcher) (definers ("design-of-the-matcher/matcher")) (referrers ()))
  ((name max) (definers ()) (referrers ("common/pretty-printer")))
  ((name maximal-factor)
   (definers ("automatic-differentiation/handlers"))
   (referrers ("automatic-differentiation/literal-functions")))
  ((name maybe-grab-segment) (definers ("unification/unify")) (referrers ()))
  ((name maybe-kick-out) (definers ("propagation/search")) (referrers ()))
  ((name maybe-opponent) (definers ("pattern-matching-on-graphs/chess-moves"))
                         (referrers ()))
  ((name maybe-register-compound-predicate!) (definers ("common/predicates"))
                                             (referrers ()))
  ((name maybe-set!) (definers ("continuations-to-amb/ambsch"))
                     (referrers ()))
  ((name maybe-show-test-expression) (definers ("common/simple-tests"))
                                     (referrers ()))
  ((name maybe-substitute) (definers ("unification/unify")) (referrers ()))
  ((name member) (definers ()) (referrers ("common/simple-tests")))
  ((name memoize-multi-arg-equal) (definers ("common/memoizers"))
                                  (referrers ()))
  ((name memoize-multi-arg-eqv) (definers ("common/memoizers"))
                                (referrers ()))
  ((name memoize-simplifier) (definers ("term-rewriting/rules"))
                             (referrers ()))
  ((name memq)
   (definers ())
   (referrers
    ("user-defined-types/templates" "user-defined-types/functions"
                                    "unification/type-resolver"
                                    "pattern-matching-on-graphs/chess-moves"
                                    "pattern-matching-on-graphs/chess-board"
                                    "generic-interpreter/shared-syntax"
                                    "continuations-to-amb/deque"
                                    "common/match-utils"
                                    "automatic-differentiation/extractor"
                                    "abstracting-a-domain/pmove"
                                    "abstracting-a-domain/board")))
  ((name memv)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "regular-expressions/regexp"
     "design-of-the-matcher/matcher"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor")))
  ((name merge) (definers ("propagation/data-model"))
                (referrers ("propagation/examples/intervals")))
  ((name merge-interval-real) (definers ("propagation/examples/intervals"))
                              (referrers ()))
  ((name merge-intervals) (definers ("propagation/examples/intervals"))
                          (referrers ()))
  ((name merge-layered)
   (definers ("propagation/data-model"))
   (referrers
    ("propagation/value-sets" "propagation/support-extra"
                              "propagation/reasons")))
  ((name merge-metadata) (definers ("propagation/data-model"))
                         (referrers ("propagation/primitive-propagators")))
  ((name merge-metadata-layered)
   (definers ("propagation/data-model"))
   (referrers ("propagation/reasons" "propagation/primitive-propagators")))
  ((name merge-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name merge-value-sets)
   (definers ("propagation/value-sets"))
   (referrers ("propagation/ui" "propagation/examples/time")))
  ((name message?) (definers ("user-defined-types/adventure-substrate"))
                   (referrers ("user-defined-types/adventure-objects")))
  ((name microcode-type) (definers ()) (referrers ("common/utils")))
  ((name microcode-type/code->name) (definers ("common/utils"))
                                    (referrers ()))
  ((name min-like) (definers ("common/arith")) (referrers ()))
  ((name mobile-thing:origin)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name mobile-thing?) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name modulo)
   (definers ())
   (referrers ("common/memoizers" "abstracting-a-domain/board")))
  ((name most-specific-generic-procedure)
   (definers ("user-defined-types/generics"))
   (referrers
    ("user-defined-types/tagging" "user-defined-types/adventure-substrate"
                                  "user-defined-types/adventure-objects")))
  ((name move) (definers ("abstracting-a-domain/game-repl")) (referrers ()))
  ((name move!) (definers ("user-defined-types/adventure-objects"))
                (referrers ()))
  ((name move-and-take-stuff!)
   (definers ("user-defined-types/adventure-objects"))
   (referrers ()))
  ((name move-internal!) (definers ("user-defined-types/adventure-objects"))
                         (referrers ()))
  ((name move-somewhere!) (definers ("user-defined-types/adventure-objects"))
                          (referrers ()))
  ((name moves-generator) (definers ("abstracting-a-domain/game"))
                          (referrers ("abstracting-a-domain/board")))
  ((name mul-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name multiple-dwelling)
   (definers ("propagation/examples/example-support"))
   (referrers ("propagation/examples/time")))
  ((name my-avatar) (definers ("user-defined-types/adventure-world"))
                    (referrers ()))
  ((name n:*)
   (definers ("common/overrides"))
   (referrers
    ("propagation/primitive-propagators"
     "propagation/examples/intervals"
     "propagation/examples/example-support"
     "layers/units"
     "common/utils")))
  ((name n:+)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate"
     "propagation/search"
     "propagation/examples/intervals"
     "layers/units"
     "common/utils"
     "common/memoizers"
     "common/indexes")))
  ((name n:-)
   (definers ("common/overrides"))
   (referrers
    ("wrappers/units" "propagation/examples/intervals"
                      "propagation/examples/example-support"
                      "layers/units"
                      "common/utils"
                      "common/indexes")))
  ((name n:/)
   (definers ("common/overrides"))
   (referrers
    ("wrappers/units" "user-defined-types/adventure-substrate"
                      "propagation/examples/intervals")))
  ((name n:<)
   (definers ("common/overrides"))
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/adventure-world"
                      "propagation/examples/intervals"
                      "common/utils"
                      "common/indexes"
                      "common/arith")))
  ((name n:<=)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/adventure-substrate"
     "propagation/primitive-propagators"
     "propagation/examples/intervals"
     "common/utils")))
  ((name n:=)
   (definers ("common/overrides"))
   (referrers
    ("wrappers/units" "user-defined-types/vector-arith"
                      "user-defined-types/templates"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "propagation/ui"
                      "propagation/search"
                      "propagation/reasons"
                      "propagation/primitive-propagators"
                      "propagation/examples/puzzle-utilities"
                      "propagation/examples/intervals"
                      "non-strict-arguments/general-procedures"
                      "layers/units"
                      "generic-interpreter/interp"
                      "exploratory-behavior/analyze"
                      "continuations/analyze-extra"
                      "compiling-to-execution-procedures/analyze"
                      "common/utils"
                      "common/simple-tests"
                      "common/operations"
                      "common/arith"
                      "common/applicability")))
  ((name n:>)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/adventure-objects"
     "propagation/examples/puzzle-utilities"
     "propagation/examples/intervals"
     "common/utils")))
  ((name n:>=)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/adventure-substrate"
     "propagation/examples/intervals"
     "pattern-matching-on-graphs/graph-match"
     "common/simple-tests"
     "common/match-utils")))
  ((name n:abs) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:acos) (definers ("common/overrides"))
                 (referrers ("propagation/examples/intervals")))
  ((name n:angle) (definers ("common/overrides")) (referrers ()))
  ((name n:asin) (definers ("common/overrides"))
                 (referrers ("propagation/examples/intervals")))
  ((name n:atan)
   (definers ("common/overrides"))
   (referrers
    ("propagation/examples/intervals"
     "propagation/examples/example-support")))
  ((name n:boolean?) (definers ("common/overrides"))
                     (referrers ("user-defined-types/tags")))
  ((name n:ceiling) (definers ("common/overrides")) (referrers ()))
  ((name n:cell?) (definers ("common/overrides")) (referrers ()))
  ((name n:complex?) (definers ("common/overrides"))
                     (referrers ("user-defined-types/tags")))
  ((name n:cos) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:exact-integer?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/tags" "user-defined-types/adventure-objects")))
  ((name n:exact-nonnegative-integer?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/tags" "user-defined-types/functions"
                               "common/indexes"
                               "common/generic-procedures")))
  ((name n:exact-positive-integer?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/tags" "user-defined-types/adventure-objects")))
  ((name n:exact-rational?) (definers ("common/overrides"))
                            (referrers ("user-defined-types/tags")))
  ((name n:exp) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:expt) (definers ("common/overrides"))
                 (referrers ("common/utils" "common/indexes")))
  ((name n:floor) (definers ("common/overrides")) (referrers ()))
  ((name n:imag-part) (definers ("common/overrides")) (referrers ()))
  ((name n:integer?) (definers ("common/overrides"))
                     (referrers ("user-defined-types/tags")))
  ((name n:invert) (definers ("common/overrides")) (referrers ()))
  ((name n:list?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/values" "user-defined-types/templates"
                                 "user-defined-types/tags"
                                 "user-defined-types/predicates"
                                 "user-defined-types/adventure-substrate"
                                 "user-defined-types/adventure-objects"
                                 "layers/layered-data"
                                 "common/utils"
                                 "common/predicates"
                                 "common/operations"
                                 "common/applicability")))
  ((name n:log) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:magnitude)
   (definers ("common/overrides"))
   (referrers ("propagation/primitive-propagators" "common/utils")))
  ((name n:make-bundle-predicate) (definers ("common/overrides"))
                                  (referrers ("common/utils")))
  ((name n:make-cell) (definers ("common/overrides")) (referrers ()))
  ((name n:make-polar) (definers ("common/overrides")) (referrers ()))
  ((name n:make-rectangular) (definers ("common/overrides")) (referrers ()))
  ((name n:max) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals" "common/utils")))
  ((name n:min)
   (definers ("common/overrides"))
   (referrers ("propagation/search" "propagation/examples/intervals")))
  ((name n:negate) (definers ("common/overrides"))
                   (referrers ("wrappers/units")))
  ((name n:negative?) (definers ("common/overrides")) (referrers ()))
  ((name n:non-empty-list?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/templates" "user-defined-types/tags"
                                    "common/utils")))
  ((name n:null?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/values" "user-defined-types/templates"
                                 "user-defined-types/tags"
                                 "user-defined-types/functions"
                                 "user-defined-types/adventure-objects"
                                 "common/arith")))
  ((name n:number?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/tags" "propagation/primitive-propagators"
                               "propagation/data-model"
                               "dependencies/support-layer")))
  ((name n:pair?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/tags"
     "user-defined-types/generics"
     "user-defined-types/functions"
     "user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "layers/layered-data"
     "common/utils"
     "common/trie"
     "common/predicates"
     "common/operations"
     "common/memoizers"
     "common/arith"
     "common/applicability")))
  ((name n:positive?) (definers ("common/overrides")) (referrers ()))
  ((name n:pp) (definers ("common/overrides")) (referrers ()))
  ((name n:pretty-print) (definers ("common/overrides"))
                         (referrers ("pattern-matching-on-graphs/graph")))
  ((name n:procedure?) (definers ("common/overrides")) (referrers ()))
  ((name n:rational?) (definers ("common/overrides"))
                      (referrers ("user-defined-types/tags")))
  ((name n:real-part) (definers ("common/overrides")) (referrers ()))
  ((name n:real?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/tags" "user-defined-types/adventure-substrate")))
  ((name n:remainder) (definers ("common/overrides")) (referrers ()))
  ((name n:round) (definers ("common/overrides")) (referrers ()))
  ((name n:sign) (definers ("common/overrides"))
                 (referrers ("propagation/examples/intervals")))
  ((name n:sin) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:sqrt) (definers ("common/overrides"))
                 (referrers ("propagation/examples/intervals")))
  ((name n:square) (definers ("common/overrides"))
                   (referrers ("propagation/examples/intervals")))
  ((name n:string?) (definers ("common/overrides"))
                    (referrers ("user-defined-types/tags")))
  ((name n:symbol?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/templates" "user-defined-types/tags"
                                    "user-defined-types/adventure-substrate"
                                    "common/package")))
  ((name n:tan) (definers ("common/overrides"))
                (referrers ("propagation/examples/intervals")))
  ((name n:truncate) (definers ("common/overrides")) (referrers ()))
  ((name n:vector?)
   (definers ("common/overrides"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/values"
                                       "user-defined-types/tags")))
  ((name n:zero?) (definers ("common/overrides"))
                  (referrers ("dependencies/support-layer")))
  ((name narrate!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name nearest-repl/environment) (definers ())
                                   (referrers ("common/simple-tests")))
  ((name negate-interval) (definers ("propagation/examples/intervals"))
                          (referrers ()))
  ((name negative?) (definers ()) (referrers ("common/utils")))
  ((name new-board) (definers ("abstracting-a-domain/game-repl"))
                    (referrers ()))
  ((name new-checkers-game)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers ()))
  ((name new-frame) (definers ("unification/type-resolver")) (referrers ()))
  ((name new-game) (definers ("abstracting-a-domain/game-repl"))
                   (referrers ("abstracting-a-domain/checkers-shared")))
  ((name new-piece-position)
   (definers ("abstracting-a-domain/pmove"))
   (referrers ("abstracting-a-domain/checkers-new")))
  ((name new-piece-type) (definers ("abstracting-a-domain/pmove"))
                         (referrers ()))
  ((name newline)
   (definers ())
   (referrers
    ("propagation/ui" "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-board"
                      "exploratory-behavior/repl"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/generic-procedures"
                      "abstracting-a-domain/game-repl")))
  ((name nil) (definers ("pattern-matching-on-graphs/lists")) (referrers ()))
  ((name no-args?) (definers ("generic-interpreter/shared-syntax"))
                   (referrers ()))
  ((name no-object?) (definers ("user-defined-types/predicates"))
                     (referrers ()))
  ((name no-operands?) (definers ("generic-interpreter/shared-syntax"))
                       (referrers ()))
  ((name no-piece-or-opponent?)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name noisy-infer-program-types) (definers ("unification/type-resolver"))
                                    (referrers ()))
  ((name non-bottom-tag?) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name non-empty-list?) (definers ("user-defined-types/tags"))
                          (referrers ()))
  ((name non-top-tag?) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name normalize-let-clauses) (definers ("propagation/sugar"))
                                (referrers ()))
  ((name not)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/values"
     "user-defined-types/templates"
     "user-defined-types/tags"
     "user-defined-types/tagging"
     "user-defined-types/predicates"
     "user-defined-types/functions"
     "user-defined-types/adventure-world"
     "user-defined-types/adventure-substrate"
     "user-defined-types/adventure-objects"
     "unification/unify"
     "unification/type-resolver"
     "regular-expressions/regexp"
     "propagation/ui"
     "propagation/search"
     "propagation/scheduler"
     "propagation/reasons"
     "propagation/propagators"
     "propagation/primitive-propagators"
     "propagation/premises"
     "propagation/hierarchy"
     "propagation/examples/time"
     "propagation/examples/intervals"
     "pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/graph"
     "pattern-matching-on-graphs/chess-moves"
     "pattern-matching-on-graphs/chess-board"
     "non-strict-arguments/general-procedures"
     "layers/units"
     "generic-interpreter/shared-syntax"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/repl"
     "generic-interpreter/interp"
     "exploratory-behavior/repl"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/general"
     "dependencies/support-sets"
     "continuations/analyze-extra"
     "continuations-to-amb/deque"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/repl"
     "compiling-to-execution-procedures/executors"
     "compiling-to-execution-procedures/analyze"
     "common/utils"
     "common/simple-tests"
     "common/predicates"
     "common/operations"
     "common/memoizers"
     "common/match-utils"
     "common/generic-procedures"
     "common/collections"
     "common/arith"
     "common/applicability"
     "combining-arithmetics/standard-arith"
     "combinators/function-combinators"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/game"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new"
     "abstracting-a-domain/board")))
  ((name nothing?)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/value-sets" "propagation/reasons"
                              "propagation/data-model")))
  ((name notification-output-port) (definers ())
                                   (referrers ("common/predicate-counter")))
  ((name null?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("user-defined-types/predicates"
     "unification/unify"
     "unification/type-resolver"
     "term-rewriting/rules"
     "propagation/ui"
     "propagation/sugar"
     "propagation/search"
     "propagation/scheduler"
     "propagation/propagators"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/graph"
     "pattern-matching-on-graphs/chess-moves"
     "layers/units"
     "layers/layered-data"
     "generic-interpreter/shared-syntax"
     "generic-interpreter/shared-rtdata"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/matcher"
     "dependencies/support-sets"
     "continuations/analyze-extra"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/analyze"
     "common/utils"
     "common/simple-tests"
     "common/pretty-printer"
     "common/match-utils"
     "automatic-differentiation/utils"
     "automatic-differentiation/simplifier"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/game-repl"
     "abstracting-a-domain/game"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name number?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("unification/type-resolver"
     "term-rewriting/rules"
     "generic-interpreter/shared-syntax"
     "common/predicate-metadata"
     "common/operators"
     "common/numeric-arith"
     "automatic-differentiation/utils"
     "automatic-differentiation/simplifier"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/handlers"
     "automatic-differentiation/derivatives")))
  ((name numeric-arithmetic)
   (definers ("common/numeric-arith"))
   (referrers
    ("propagation/ui" "propagation/examples/intervals"
                      "propagation/examples/example-support"
                      "combining-arithmetics/standard-arith"
                      "automatic-differentiation/utils")))
  ((name numeric-simplifier-forwarding)
   (definers ("automatic-differentiation/utils"))
   (referrers ()))
  ((name numeric-type) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name numeric-type?) (definers ("unification/type-resolver"))
                        (referrers ()))
  ((name numerical-simplifier-wrapper)
   (definers ("automatic-differentiation/utils"))
   (referrers ()))
  ((name object->description) (definers ("common/predicates")) (referrers ()))
  ((name object->string) (definers ("common/pretty-printer"))
                         (referrers ("propagation/premises")))
  ((name object-type) (definers ()) (referrers ("common/utils")))
  ((name object-type?) (definers ()) (referrers ("common/utils")))
  ((name object-union) (definers ("user-defined-types/values"))
                       (referrers ("user-defined-types/operations")))
  ((name object-union*)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name object-union-components)
   (definers ("user-defined-types/values"))
   (referrers ("user-defined-types/functions")))
  ((name object-union-tag) (definers ("user-defined-types/values"))
                           (referrers ()))
  ((name object-union=) (definers ("user-defined-types/values"))
                        (referrers ()))
  ((name object-union?) (definers ("user-defined-types/values"))
                        (referrers ("user-defined-types/functions")))
  ((name object:description)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name object:name) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name object?) (definers ("user-defined-types/adventure-substrate"))
                  (referrers ("user-defined-types/adventure-objects")))
  ((name occupied-by) (definers ("pattern-matching-on-graphs/chess-moves"))
                      (referrers ()))
  ((name odd?) (definers ()) (referrers ("common/utils" "common/indexes")))
  ((name offset*) (definers ("abstracting-a-domain/coords"))
                  (referrers ("abstracting-a-domain/pmove")))
  ((name offset->direction) (definers ("abstracting-a-domain/coords"))
                            (referrers ()))
  ((name offset/) (definers ("abstracting-a-domain/coords")) (referrers ()))
  ((name one-of) (definers ("propagation/examples/puzzle-utilities"))
                 (referrers ()))
  ((name one-of-the-cells)
   (definers ("propagation/examples/puzzle-utilities"))
   (referrers ()))
  ((name open-input-string) (definers ()) (referrers ("common/simple-tests")))
  ((name open-output-string)
   (definers ())
   (referrers ("regular-expressions/regexp" "common/simple-tests")))
  ((name operand?) (definers ("generic-interpreter/shared-syntax"))
                   (referrers ("non-strict-arguments/general-procedures")))
  ((name operands)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name operands?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("non-strict-arguments/general-procedures" "generic-interpreter/interp")))
  ((name operation-applicability)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("generic-procedures/generic-arith")))
  ((name operation-codomain)
   (definers ("user-defined-types/operations"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith")))
  ((name operation-components)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ()))
  ((name operation-domains)
   (definers ("user-defined-types/operations"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith")))
  ((name operation-operator) (definers ("common/operations"))
                             (referrers ("user-defined-types/operations")))
  ((name operation-procedure)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers
    ("user-defined-types/vector-arith" "propagation/primitive-propagators"
                                       "layers/layered-data"
                                       "generic-procedures/generic-arith"
                                       "common/arith"
                                       "automatic-differentiation/utils")))
  ((name operation-union)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("common/arith")))
  ((name operation-union*)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("user-defined-types/vector-arith")))
  ((name operation-union-dispatch) (definers ("common/operations"))
                                   (referrers ()))
  ((name operation?)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ()))
  ((name operator)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name operator->procedure-name) (definers ("common/operators"))
                                   (referrers ("common/numeric-arith")))
  ((name operator-arity)
   (definers ("common/operators"))
   (referrers
    ("user-defined-types/vector-arith"
     "propagation/examples/intervals"
     "layers/units"
     "layers/layered-data"
     "generic-procedures/generic-arith"
     "common/operations"
     "combining-arithmetics/standard-arith"
     "combining-arithmetics/function-variants")))
  ((name operator-codomain) (definers ("common/operators"))
                            (referrers ("layers/units")))
  ((name operator-domains) (definers ("common/operators")) (referrers ()))
  ((name operator-installable?) (definers ("common/operators"))
                                (referrers ("common/arith")))
  ((name operator-names) (definers ("common/operators"))
                         (referrers ("common/arith")))
  ((name operator-signature) (definers ("common/operators"))
                             (referrers ("user-defined-types/operations")))
  ((name operator?) (definers ("common/operators"))
                    (referrers ("layers/units" "common/operations")))
  ((name ordered-intersect)
   (definers ("automatic-differentiation/utils"))
   (referrers ("automatic-differentiation/derivatives")))
  ((name ordered-union) (definers ("automatic-differentiation/utils"))
                        (referrers ("automatic-differentiation/derivatives")))
  ((name output-port/x-size) (definers ())
                             (referrers ("common/pretty-printer")))
  ((name output-port?) (definers ())
                       (referrers ("user-defined-types/adventure-substrate")))
  ((name output-prompt) (definers ("exploratory-behavior/repl"))
                        (referrers ()))
  ((name override-rule!) (definers ("term-rewriting/pattern-operator"))
                         (referrers ()))
  ((name p:*)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:+)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:-)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:->)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:/)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:<) (definers ("propagation/primitive-propagators"))
              (referrers ("propagation/examples/example-support")))
  ((name p:<=) (definers ("propagation/primitive-propagators"))
               (referrers ()))
  ((name p:=)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/puzzle-utilities"
     "propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:>) (definers ("propagation/primitive-propagators"))
              (referrers ("propagation/examples/example-support")))
  ((name p:>=) (definers ("propagation/primitive-propagators"))
               (referrers ()))
  ((name p:abs)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:acos) (definers ("propagation/primitive-propagators"))
                 (referrers ("propagation/constraint-propagators")))
  ((name p:amb)
   (definers ("propagation/search"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:and) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:angle) (definers ("propagation/primitive-propagators"))
                  (referrers ()))
  ((name p:asin) (definers ("propagation/primitive-propagators"))
                 (referrers ("propagation/constraint-propagators")))
  ((name p:atan) (definers ("propagation/primitive-propagators"))
                 (referrers ("propagation/constraint-propagators")))
  ((name p:ceiling) (definers ("propagation/primitive-propagators"))
                    (referrers ()))
  ((name p:conditional) (definers ("propagation/primitive-propagators"))
                        (referrers ("propagation/examples/puzzle-utilities")))
  ((name p:conjoiner-dumb) (definers ("propagation/primitive-propagators"))
                           (referrers ()))
  ((name p:cos) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:disjoiner-dumb) (definers ("propagation/primitive-propagators"))
                           (referrers ()))
  ((name p:dna) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:exp) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:expt) (definers ("propagation/primitive-propagators"))
                 (referrers ()))
  ((name p:floor) (definers ("propagation/primitive-propagators"))
                  (referrers ()))
  ((name p:honest-sqrt) (definers ("propagation/constraint-propagators"))
                        (referrers ()))
  ((name p:imag-part) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:imp) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:invert) (definers ("propagation/primitive-propagators"))
                   (referrers ("propagation/constraint-propagators")))
  ((name p:log) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:magnitude) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:make-polar) (definers ("propagation/primitive-propagators"))
                       (referrers ()))
  ((name p:make-rectangular) (definers ("propagation/primitive-propagators"))
                             (referrers ()))
  ((name p:max) (definers ("propagation/primitive-propagators"))
                (referrers ()))
  ((name p:min) (definers ("propagation/primitive-propagators"))
                (referrers ()))
  ((name p:negate) (definers ("propagation/primitive-propagators"))
                   (referrers ("propagation/constraint-propagators")))
  ((name p:negative?) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:not)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:or) (definers ("propagation/primitive-propagators"))
               (referrers ("propagation/constraint-propagators")))
  ((name p:pmi) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:positive?) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:real-part) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:remainder) (definers ("propagation/primitive-propagators"))
                      (referrers ()))
  ((name p:ro) (definers ("propagation/primitive-propagators"))
               (referrers ("propagation/constraint-propagators")))
  ((name p:round) (definers ("propagation/primitive-propagators"))
                  (referrers ()))
  ((name p:sin) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:spdt-switch) (definers ("propagation/primitive-propagators"))
                        (referrers ()))
  ((name p:spst-switch)
   (definers ("propagation/primitive-propagators"))
   (referrers
    ("propagation/examples/example-support"
     "propagation/constraint-propagators")))
  ((name p:sqrt) (definers ("propagation/primitive-propagators"))
                 (referrers ("propagation/constraint-propagators")))
  ((name p:square) (definers ("propagation/primitive-propagators"))
                   (referrers ("propagation/constraint-propagators")))
  ((name p:tan) (definers ("propagation/primitive-propagators"))
                (referrers ("propagation/constraint-propagators")))
  ((name p:truncate) (definers ("propagation/primitive-propagators"))
                     (referrers ()))
  ((name p:zero?) (definers ("propagation/primitive-propagators"))
                  (referrers ()))
  ((name package-bindings) (definers ("common/package")) (referrers ()))
  ((name package-debug-name) (definers ("common/package")) (referrers ()))
  ((name package-installer) (definers ("common/package")) (referrers ()))
  ((name package-names) (definers ("common/package")) (referrers ()))
  ((name package-value) (definers ("common/package")) (referrers ()))
  ((name package?) (definers ("common/package")) (referrers ()))
  ((name pair?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("user-defined-types/standard-arith"
     "user-defined-types/predicates"
     "user-defined-types/generics"
     "user-defined-types/adventure-substrate"
     "unification/unify"
     "unification/type-resolver"
     "term-rewriting/pattern-operator"
     "regular-expressions/regexp"
     "propagation/ui"
     "propagation/sugar"
     "propagation/hierarchy"
     "pattern-matching-on-graphs/lists"
     "pattern-matching-on-graphs/graph-match"
     "pattern-matching-on-graphs/chess-moves"
     "non-strict-arguments/general-procedures"
     "layers/units"
     "generic-interpreter/shared-syntax"
     "exploratory-behavior/analyze"
     "design-of-the-matcher/matcher"
     "dependencies/support-sets"
     "continuations-to-amb/deque"
     "continuations-to-amb/ambsch"
     "compiling-to-execution-procedures/analyze"
     "common/utils"
     "common/simple-tests"
     "common/pretty-printer"
     "common/match-utils"
     "common/generic-procedures"
     "common/collections"
     "combining-arithmetics/standard-arith"
     "combinators/function-combinators"
     "automatic-differentiation/handlers"
     "automatic-differentiation/extractor"
     "automatic-differentiation/derivatives"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original"
     "abstracting-a-domain/board")))
  ((name pairwise) (definers ("common/arith")) (referrers ()))
  ((name pairwise-union) (definers ("propagation/search")) (referrers ()))
  ((name parallel-apply) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name parallel-combine) (definers ("combinators/function-combinators"))
                           (referrers ()))
  ((name param:flonum-printer-cutoff) (definers ())
                                      (referrers ("propagation/ui")))
  ((name param:pp-forced-x-size) (definers ()) (referrers ("common/utils")))
  ((name param:print-hash-number-in-objects?) (definers ())
                                              (referrers ("common/utils")))
  ((name param:suppress-loading-message?) (definers ())
                                          (referrers ("common/utils")))
  ((name parameter-binding-element)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name parameter-binding-name) (definers ("user-defined-types/templates"))
                                 (referrers ()))
  ((name parameter-binding-polarity)
   (definers ("user-defined-types/templates"))
   (referrers ("user-defined-types/predicates")))
  ((name parameter-binding-value) (definers ("user-defined-types/templates"))
                                  (referrers ()))
  ((name parameter-binding-values)
   (definers ("user-defined-types/templates"))
   (referrers ("user-defined-types/predicates")))
  ((name parameter-binding?) (definers ("user-defined-types/templates"))
                             (referrers ()))
  ((name parameter-name) (definers ("generic-interpreter/shared-syntax"))
                         (referrers ()))
  ((name parameterize*)
   (definers ())
   (referrers
    ("propagation/ui" "propagation/scheduler"
                      "propagation/propagators"
                      "propagation/premises"
                      "propagation/cells"
                      "continuations-to-amb/ambsch"
                      "common/utils"
                      "common/simple-tests"
                      "common/predicate-counter"
                      "common/generic-procedures"
                      "automatic-differentiation/simplifier")))
  ((name parametric-predicate-template)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/templates")))
  ((name parametric-predicate?) (definers ("user-defined-types/predicates"))
                                (referrers ("user-defined-types/templates")))
  ((name parametric-tag-bindings)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/templates")))
  ((name parametric-tag-shared) (definers ("user-defined-types/predicates"))
                                (referrers ()))
  ((name parametric-tag-template) (definers ("user-defined-types/predicates"))
                                  (referrers ()))
  ((name parametric-tag?) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name parametric-type-operands) (definers ("unification/type-resolver"))
                                   (referrers ()))
  ((name parametric-type-operator) (definers ("unification/type-resolver"))
                                   (referrers ()))
  ((name parametric-type-operators) (definers ("unification/type-resolver"))
                                    (referrers ()))
  ((name parametric-type-predicate) (definers ("unification/type-resolver"))
                                    (referrers ()))
  ((name parametric-type?) (definers ("unification/type-resolver"))
                           (referrers ()))
  ((name parse-expectation) (definers ("common/simple-tests")) (referrers ()))
  ((name parse-expectations) (definers ("common/simple-tests"))
                             (referrers ()))
  ((name parse-plist) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name partial) (definers ("automatic-differentiation/derivatives"))
                  (referrers ()))
  ((name partition-by-key) (definers ("common/utils")) (referrers ()))
  ((name path->thing) (definers ("propagation/hierarchy")) (referrers ()))
  ((name path-contains-jumps?)
   (definers ("abstracting-a-domain/checkers-original"))
   (referrers ()))
  ((name path-of)
   (definers ("propagation/hierarchy"))
   (referrers
    ("propagation/ui" "propagation/reasons" "propagation/premises")))
  ((name pathname-default-type) (definers ())
                                (referrers ("common/simple-tests")))
  ((name pattern-metadata) (definers ("term-rewriting/pattern-operator"))
                           (referrers ()))
  ((name people-here) (definers ("user-defined-types/adventure-objects"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name people-in-place) (definers ("user-defined-types/adventure-objects"))
                          (referrers ()))
  ((name peoples-things) (definers ("user-defined-types/adventure-objects"))
                         (referrers ()))
  ((name permute-arguments) (definers ("combinators/function-combinators"))
                            (referrers ()))
  ((name person-or-place-name)
   (definers ("user-defined-types/adventure-world"))
   (referrers ()))
  ((name person-or-place-things)
   (definers ("user-defined-types/adventure-world"))
   (referrers ()))
  ((name person:bag) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name person:health) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name person?) (definers ("user-defined-types/adventure-objects"))
                  (referrers ("user-defined-types/adventure-substrate")))
  ((name pg) (definers ("pattern-matching-on-graphs/graph")) (referrers ()))
  ((name piece->string) (definers ("pattern-matching-on-graphs/chess-board"))
                        (referrers ()))
  ((name piece-color)
   (definers
    ("pattern-matching-on-graphs/chess-board" "abstracting-a-domain/piece"))
   (referrers
    ("abstracting-a-domain/checkers-shared" "abstracting-a-domain/board")))
  ((name piece-color?) (definers ("pattern-matching-on-graphs/chess-board"))
                       (referrers ()))
  ((name piece-coords)
   (definers ("abstracting-a-domain/piece"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-shared"
                                  "abstracting-a-domain/checkers-original"
                                  "abstracting-a-domain/board")))
  ((name piece-has-type?) (definers ("abstracting-a-domain/pmove"))
                          (referrers ()))
  ((name piece-in) (definers ("pattern-matching-on-graphs/chess-moves"))
                   (referrers ()))
  ((name piece-is-king?) (definers ("abstracting-a-domain/checkers-shared"))
                         (referrers ()))
  ((name piece-is-opponent?)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name piece-move)
   (definers ("abstracting-a-domain/piece"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-original")))
  ((name piece-new-type)
   (definers ("abstracting-a-domain/piece"))
   (referrers
    ("abstracting-a-domain/pmove" "abstracting-a-domain/checkers-shared")))
  ((name piece-summarizer) (definers ("abstracting-a-domain/game"))
                           (referrers ("abstracting-a-domain/board")))
  ((name piece-type)
   (definers
    ("pattern-matching-on-graphs/chess-board" "abstracting-a-domain/piece"))
   (referrers
    ("pattern-matching-on-graphs/chess-moves"
     "abstracting-a-domain/pmove"
     "abstracting-a-domain/checkers-shared")))
  ((name piece-type?) (definers ("pattern-matching-on-graphs/chess-board"))
                      (referrers ()))
  ((name piece=?) (definers ("abstracting-a-domain/piece"))
                  (referrers ("abstracting-a-domain/board")))
  ((name piece?) (definers ("abstracting-a-domain/piece"))
                 (referrers ("abstracting-a-domain/pmove")))
  ((name place:exits) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name place:vistas) (definers ("user-defined-types/adventure-objects"))
                       (referrers ()))
  ((name place?) (definers ("user-defined-types/adventure-objects"))
                 (referrers ("user-defined-types/adventure-world")))
  ((name plist->alist)
   (definers ("common/utils"))
   (referrers
    ("pattern-matching-on-graphs/graph" "layers/units"
                                        "layers/layered-data")))
  ((name plist-value) (definers ("common/utils"))
                      (referrers ("user-defined-types/adventure-substrate")))
  ((name plist?)
   (definers ("common/utils"))
   (referrers ("user-defined-types/adventure-substrate" "layers/units")))
  ((name pmove->list) (definers ("abstracting-a-domain/pmove"))
                      (referrers ("abstracting-a-domain/checkers-shared")))
  ((name pmove?) (definers ("abstracting-a-domain/pmove"))
                 (referrers ("abstracting-a-domain/game-interpreter")))
  ((name polarity?) (definers ("user-defined-types/templates"))
                    (referrers ()))
  ((name pop!) (definers ("continuations-to-amb/deque"))
               (referrers ("continuations-to-amb/ambsch")))
  ((name populate-sides) (definers ("pattern-matching-on-graphs/chess-board"))
                         (referrers ()))
  ((name position-info)
   (definers ("abstracting-a-domain/board"))
   (referrers ("abstracting-a-domain/checkers-original")))
  ((name positive-number?) (definers ("automatic-differentiation/simplifier"))
                           (referrers ()))
  ((name positive?)
   (definers ())
   (referrers ("common/utils" "automatic-differentiation/handlers")))
  ((name possessive)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name possible-directions)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name postpone)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name postpone-memo)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name postponed-environment)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name postponed-expression)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name postponed-memo?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name postponed?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name pound-to-newton) (definers ("wrappers/units")) (referrers ()))
  ((name pp)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("user-defined-types/values" "unification/type-resolver"
                                 "propagation/cells"
                                 "pattern-matching-on-graphs/graph"
                                 "non-strict-arguments/general-procedures"
                                 "exploratory-behavior/repl"
                                 "design-of-the-matcher/matcher"
                                 "design-of-the-matcher/general"
                                 "compiling-to-execution-procedures/repl"
                                 "common/utils"
                                 "common/simple-tests")))
  ((name pp-to-string) (definers ("common/utils"))
                       (referrers ("common/simple-tests")))
  ((name predicate->tag)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/values" "user-defined-types/templates"
                                 "user-defined-types/tags"
                                 "user-defined-types/functions")))
  ((name predicate-accessor)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name predicate-constructor)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/standard-arith"
     "user-defined-types/adventure-substrate")))
  ((name predicate-description) (definers ("common/predicates"))
                                (referrers ()))
  ((name predicate-name)
   (definers ("user-defined-types/predicates" "common/predicate-metadata"))
   (referrers ("common/trie" "common/predicates" "common/predicate-counter")))
  ((name predicate-supersets) (definers ("user-defined-types/predicates"))
                              (referrers ()))
  ((name predicate-template-accessor)
   (definers ("user-defined-types/templates"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith"
                                       "user-defined-types/functions")))
  ((name predicate-template-instantiator)
   (definers ("user-defined-types/templates"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith"
                                       "user-defined-types/functions")))
  ((name predicate-template-name) (definers ("user-defined-types/templates"))
                                  (referrers ()))
  ((name predicate-template-parameter-names)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name predicate-template-pattern)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name predicate-template-predicate)
   (definers ("user-defined-types/templates"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith"
                                       "user-defined-types/functions")))
  ((name predicate-template-tag-instantiator)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name predicate-template?) (definers ("user-defined-types/templates"))
                              (referrers ()))
  ((name predicate<=)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/generics" "user-defined-types/functions"
                                   "propagation/hierarchy")))
  ((name predicate=) (definers ("user-defined-types/predicates"))
                     (referrers ()))
  ((name predicate>=) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name predicate?)
   (definers ("common/predicates"))
   (referrers
    ("user-defined-types/values" "user-defined-types/tags"
                                 "user-defined-types/predicates"
                                 "user-defined-types/operations"
                                 "user-defined-types/functions"
                                 "common/arith")))
  ((name predicates-match?)
   (definers ("common/applicability"))
   (referrers ("user-defined-types/generics" "common/generic-procedures")))
  ((name premise-in?) (definers ("propagation/premises")) (referrers ()))
  ((name premise-metadata-table) (definers ("propagation/premises"))
                                 (referrers ()))
  ((name premise-metadata?) (definers ("propagation/premises"))
                            (referrers ()))
  ((name premise-nogoods) (definers ("propagation/premises"))
                          (referrers ("propagation/search")))
  ((name premise-out?) (definers ("propagation/premises"))
                       (referrers ("propagation/support-extra")))
  ((name premise?) (definers ("propagation/premises"))
                   (referrers ("propagation/ui")))
  ((name presentation-base-value) (definers ("propagation/ui"))
                                  (referrers ()))
  ((name presentation-value) (definers ("propagation/ui")) (referrers ()))
  ((name pretty-print) (definers ("common/pretty-printer")) (referrers ()))
  ((name previous-pmove) (definers ("abstracting-a-domain/pmove"))
                         (referrers ()))
  ((name primitive-predicate) (definers ("user-defined-types/tags"))
                              (referrers ()))
  ((name primitive-predicates) (definers ("unification/type-resolver"))
                               (referrers ()))
  ((name primitive-propagator)
   (definers ("propagation/propagators"))
   (referrers ("propagation/primitive-propagators")))
  ((name primitive-propagators-package)
   (definers ("propagation/primitive-propagators"))
   (referrers ()))
  ((name primitive-type) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name primitive-type?) (definers ("unification/type-resolver"))
                          (referrers ()))
  ((name print-all-matches) (definers ("design-of-the-matcher/matcher"))
                            (referrers ()))
  ((name print-chess-board)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name print-close) (definers ("common/pretty-printer")) (referrers ()))
  ((name print-compound-token:as-column) (definers ("common/pretty-printer"))
                                         (referrers ()))
  ((name print-compound-token:flat) (definers ("common/pretty-printer"))
                                    (referrers ()))
  ((name print-open) (definers ("common/pretty-printer")) (referrers ()))
  ((name print-run-result) (definers ("propagation/ui")) (referrers ()))
  ((name print-separator) (definers ("common/pretty-printer")) (referrers ()))
  ((name print-supported) (definers ("propagation/ui")) (referrers ()))
  ((name print-token) (definers ("common/pretty-printer")) (referrers ()))
  ((name print-token:flat) (definers ("common/pretty-printer"))
                           (referrers ()))
  ((name procedure-arity) (definers ())
                          (referrers ("combinators/function-combinators")))
  ((name procedure-arity-max)
   (definers ())
   (referrers ("combinators/function-combinators")))
  ((name procedure-arity-min)
   (definers ())
   (referrers ("combinators/function-combinators")))
  ((name procedure-body)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name procedure-environment)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name procedure-parameter-name)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name procedure-parameters)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name procedure-printable-representation)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ("generic-interpreter/shared-repl")))
  ((name procedure-type) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name procedure-type-codomain) (definers ("unification/type-resolver"))
                                  (referrers ()))
  ((name procedure-type-domains) (definers ("unification/type-resolver"))
                                 (referrers ()))
  ((name procedure-type?) (definers ("unification/type-resolver"))
                          (referrers ()))
  ((name procedure?)
   (definers ())
   (referrers
    ("user-defined-types/values" "user-defined-types/tags"
                                 "user-defined-types/predicates"
                                 "user-defined-types/adventure-substrate"
                                 "pattern-matching-on-graphs/graph-match"
                                 "layers/layered-data"
                                 "generic-interpreter/shared-rtdata"
                                 "exploratory-behavior/rtdata"
                                 "common/operations"
                                 "common/applicability"
                                 "combining-arithmetics/standard-arith"
                                 "abstracting-a-domain/game")))
  ((name process-contradictions) (definers ("propagation/search"))
                                 (referrers ("propagation/ui")))
  ((name program-constraints) (definers ("unification/type-resolver"))
                              (referrers ()))
  ((name program-constraints-1) (definers ("unification/type-resolver"))
                                (referrers ()))
  ((name promise-forced?) (definers ())
                          (referrers ("pattern-matching-on-graphs/graph")))
  ((name promise?) (definers ())
                   (referrers ("pattern-matching-on-graphs/graph")))
  ((name prompt-for-command-expression)
   (definers ())
   (referrers
    ("generic-interpreter/shared-repl" "exploratory-behavior/repl")))
  ((name propagation-reason) (definers ("propagation/reasons"))
                             (referrers ()))
  ((name propagator)
   (definers ("propagation/propagators"))
   (referrers ("propagation/search" "propagation/primitive-propagators")))
  ((name propagator-inputs) (definers ("propagation/propagators"))
                            (referrers ("propagation/reasons")))
  ((name propagator-outputs) (definers ("propagation/propagators"))
                             (referrers ()))
  ((name propagator-set) (definers ("propagation/scheduler")) (referrers ()))
  ((name propagator-set?) (definers ("propagation/scheduler")) (referrers ()))
  ((name propagator?)
   (definers ("propagation/propagators"))
   (referrers ("propagation/scheduler" "propagation/reasons")))
  ((name propagators-ever-alerted) (definers ("propagation/scheduler"))
                                   (referrers ()))
  ((name property-adder) (definers ("user-defined-types/adventure-substrate"))
                         (referrers ("user-defined-types/adventure-objects")))
  ((name property-default-keywords)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-default-supplier)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-getter)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name property-keywords)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-list?) (definers ("user-defined-types/adventure-substrate"))
                         (referrers ()))
  ((name property-modifier)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-name) (definers ("user-defined-types/adventure-substrate"))
                        (referrers ()))
  ((name property-optional?)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-predicate)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name property-remover)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name property-setter)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name property?) (definers ("user-defined-types/adventure-substrate"))
                    (referrers ()))
  ((name pt) (definers ("user-defined-types/values")) (referrers ()))
  ((name pto) (definers ("user-defined-types/values")) (referrers ()))
  ((name pure-function-extender)
   (definers ("combining-arithmetics/function-variants"))
   (referrers ()))
  ((name push!) (definers ("continuations-to-amb/deque"))
                (referrers ("continuations-to-amb/ambsch")))
  ((name pythagorean-1) (definers ("propagation/examples/example-support"))
                        (referrers ()))
  ((name pythagorean-2) (definers ("propagation/examples/example-support"))
                        (referrers ()))
  ((name pythagorean-3) (definers ("propagation/examples/example-support"))
                        (referrers ()))
  ((name pythagorean-4) (definers ("propagation/examples/example-support"))
                        (referrers ()))
  ((name quotation-text) (definers ("common/simple-tests")) (referrers ()))
  ((name quote-bracketed-contents) (definers ("regular-expressions/regexp"))
                                   (referrers ()))
  ((name quoted?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name quotient) (definers ())
                   (referrers ("common/utils" "common/indexes")))
  ((name r:alt) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:bol) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:char-from) (definers ("regular-expressions/regexp"))
                      (referrers ()))
  ((name r:char-not-from) (definers ("regular-expressions/regexp"))
                          (referrers ()))
  ((name r:dot) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:eol) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:grep) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:quote) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:repeat) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:repeat-from-text) (definers ("regular-expressions/regexp"))
                             (referrers ()))
  ((name r:seq) (definers ("regular-expressions/regexp")) (referrers ()))
  ((name r:split-lines) (definers ("regular-expressions/regexp"))
                        (referrers ()))
  ((name radians->degrees) (definers ("propagation/examples/hms-dms-radians"))
                           (referrers ()))
  ((name radians->dms) (definers ("propagation/examples/hms-dms-radians"))
                       (referrers ()))
  ((name radians->hms) (definers ("propagation/examples/hms-dms-radians"))
                       (referrers ()))
  ((name radians->hours) (definers ("propagation/examples/hms-dms-radians"))
                         (referrers ()))
  ((name random)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "propagation/search")))
  ((name random-bias) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name random-choice)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name random-number) (definers ("user-defined-types/adventure-substrate"))
                        (referrers ("user-defined-types/adventure-objects")))
  ((name rational?) (definers ("user-defined-types/tags")) (referrers ()))
  ((name read)
   (definers ())
   (referrers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl"
                                "common/simple-tests")))
  ((name read-char) (definers ()) (referrers ("common/simple-tests")))
  ((name read-file) (definers ()) (referrers ("common/simple-tests")))
  ((name read-line) (definers ()) (referrers ("common/simple-tests")))
  ((name read-test-expressions) (definers ("common/simple-tests"))
                                (referrers ()))
  ((name read-written-value) (definers ("common/simple-tests"))
                             (referrers ()))
  ((name real->diff-terms) (definers ("automatic-differentiation/utils"))
                           (referrers ()))
  ((name real?) (definers ("user-defined-types/tags"))
                (referrers ("propagation/examples/intervals")))
  ((name reason-args) (definers ("propagation/reasons")) (referrers ()))
  ((name reason-is-absolute?) (definers ("propagation/reasons"))
                              (referrers ()))
  ((name reason-is-merge?) (definers ("propagation/reasons")) (referrers ()))
  ((name reason-is-propagation?) (definers ("propagation/reasons"))
                                 (referrers ()))
  ((name reason-layer) (definers ("propagation/reasons"))
                       (referrers ("propagation/ui")))
  ((name reason-layer-value) (definers ("propagation/reasons"))
                             (referrers ("propagation/ui")))
  ((name reason-source) (definers ("propagation/reasons")) (referrers ()))
  ((name record-constructor)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "pattern-matching-on-graphs/graph"
                      "generic-interpreter/shared-rtdata"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/generic-procedures"
                      "common/arith"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name record-predicate)
   (definers ())
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tagging"
                      "user-defined-types/predicates"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "pattern-matching-on-graphs/graph"
                      "generic-interpreter/shared-rtdata"
                      "continuations/analyze-extra"
                      "continuations-to-amb/deque"
                      "common/utils"
                      "common/trie"
                      "common/pretty-printer"
                      "common/package"
                      "common/generic-procedures"
                      "common/arith"
                      "abstracting-a-domain/pmove"
                      "abstracting-a-domain/piece"
                      "abstracting-a-domain/game"
                      "abstracting-a-domain/checkers-original"
                      "abstracting-a-domain/board")))
  ((name record-type-descriptor) (definers ()) (referrers ("common/utils")))
  ((name record-type-name) (definers ()) (referrers ("common/utils")))
  ((name recursive-substitute) (definers ("common/utils")) (referrers ()))
  ((name reduce)
   (definers ())
   (referrers
    ("propagation/ui" "automatic-differentiation/derivatives"
                      "abstracting-a-domain/game-interpreter")))
  ((name reduce-right)
   (definers ())
   (referrers
    ("propagation/search" "exploratory-behavior/analyze"
                          "compiling-to-execution-procedures/analyze"
                          "common/utils")))
  ((name reflect-ew) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name reflect-ns) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ()))
  ((name register-compound-predicate!)
   (definers ("user-defined-types/predicates" "common/predicate-metadata"))
   (referrers ("common/predicates")))
  ((name register-expt-conversion) (definers ("wrappers/units"))
                                   (referrers ()))
  ((name register-predicate!)
   (definers ("user-defined-types/predicates" "common/predicate-metadata"))
   (referrers
    ("wrappers/units" "user-defined-types/values"
                      "user-defined-types/templates"
                      "user-defined-types/tags"
                      "user-defined-types/operations"
                      "user-defined-types/functions"
                      "user-defined-types/adventure-substrate"
                      "propagation/value-sets"
                      "propagation/hierarchy"
                      "propagation/examples/intervals"
                      "pattern-matching-on-graphs/graph"
                      "pattern-matching-on-graphs/chess-board"
                      "layers/units"
                      "layers/layered-data"
                      "generic-interpreter/shared-syntax"
                      "generic-interpreter/shared-rtdata"
                      "exploratory-behavior/rtdata"
                      "dependencies/support-sets"
                      "continuations/analyze-extra"
                      "compiling-to-execution-procedures/executors"
                      "common/utils"
                      "common/predicates"
                      "combining-arithmetics/standard-arith")))
  ((name register-premise!) (definers ("propagation/premises"))
                            (referrers ("propagation/ui")))
  ((name register-unit-conversion) (definers ("wrappers/units"))
                                   (referrers ()))
  ((name register-with-clock!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name reified-fail-procedure) (definers ("continuations/analyze-extra"))
                                 (referrers ()))
  ((name reified-fail?) (definers ("continuations/analyze-extra"))
                        (referrers ()))
  ((name reified-succeed-procedure) (definers ("continuations/analyze-extra"))
                                    (referrers ()))
  ((name reified-succeed?) (definers ("continuations/analyze-extra"))
                           (referrers ()))
  ((name relatable?)
   (definers ("propagation/hierarchy"))
   (referrers
    ("propagation/reasons" "propagation/propagators"
                           "propagation/premises"
                           "propagation/cells")))
  ((name relations?) (definers ("propagation/hierarchy")) (referrers ()))
  ((name remove)
   (definers ())
   (referrers
    ("user-defined-types/adventure-objects"
     "regular-expressions/regexp"
     "propagation/value-sets"
     "propagation/reasons"
     "common/operations"
     "common/arith"
     "automatic-differentiation/handlers")))
  ((name remove!) (definers ()) (referrers ("common/collections")))
  ((name remove-piece) (definers ("abstracting-a-domain/pmove"))
                       (referrers ()))
  ((name remove-thing!) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name repl)
   (definers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl"))
   (referrers ("generic-interpreter/shared-repl")))
  ((name repl:write-result-hash-numbers?) (definers ())
                                          (referrers ("common/utils")))
  ((name replace-dx)
   (definers ("automatic-differentiation/extractor"))
   (referrers ("automatic-differentiation/replace-dx-differential")))
  ((name replace-dx-default)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name replace-dx-differential)
   (definers
    ("automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor"))
   (referrers ()))
  ((name replace-dx-function)
   (definers ("automatic-differentiation/extractor"))
   (referrers ()))
  ((name replace-piece) (definers ("abstracting-a-domain/checkers-original"))
                        (referrers ()))
  ((name require)
   (definers ("propagation/search" "continuations-to-amb/ambsch"))
   (referrers ()))
  ((name require-distinct)
   (definers ("propagation/examples/puzzle-utilities"))
   (referrers ("propagation/examples/example-support")))
  ((name reset-deque!) (definers ("continuations-to-amb/deque"))
                       (referrers ("continuations-to-amb/ambsch")))
  ((name reset-predicate-counts!) (definers ("common/predicate-counter"))
                                  (referrers ()))
  ((name rest-operands) (definers ("generic-interpreter/shared-syntax"))
                        (referrers ()))
  ((name restart-board) (definers ("abstracting-a-domain/game-repl"))
                        (referrers ()))
  ((name restrict-arity) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name restriction-error) (definers ("user-defined-types/values"))
                            (referrers ()))
  ((name resurrect!) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name retract!) (definers ("propagation/ui")) (referrers ()))
  ((name reverse)
   (definers ())
   (referrers
    ("regular-expressions/regexp" "propagation/hierarchy"
                                  "pattern-matching-on-graphs/graph-match"
                                  "pattern-matching-on-graphs/chess-board"
                                  "design-of-the-matcher/matcher"
                                  "continuations-to-amb/ambsch"
                                  "common/simple-tests"
                                  "common/match-utils"
                                  "abstracting-a-domain/pmove"
                                  "abstracting-a-domain/game-repl"
                                  "abstracting-a-domain/checkers-original")))
  ((name reverse!) (definers ()) (referrers ("propagation/scheduler")))
  ((name rewrite-path-edges)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name rewrite-tags) (definers ("user-defined-types/values"))
                       (referrers ()))
  ((name right-direction) (definers ("abstracting-a-domain/coords"))
                          (referrers ()))
  ((name rotate-180) (definers ("pattern-matching-on-graphs/chess-board"))
                     (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name rotate-180-view)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name rotate-45) (definers ("pattern-matching-on-graphs/chess-board"))
                    (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name rotate-90) (definers ("pattern-matching-on-graphs/chess-board"))
                    (referrers ("pattern-matching-on-graphs/chess-moves")))
  ((name rule) (definers ("term-rewriting/rule-implementation"))
               (referrers ()))
  ((name rule-simplifier)
   (definers ("term-rewriting/rules"))
   (referrers ("automatic-differentiation/simplifier")))
  ((name rule<) (definers ("user-defined-types/generics")) (referrers ()))
  ((name run) (definers ("propagation/scheduler"))
              (referrers ("propagation/ui" "propagation/examples/time")))
  ((name run-alerted) (definers ("propagation/scheduler")) (referrers ()))
  ((name run-matcher) (definers ("design-of-the-matcher/matcher"))
                      (referrers ("term-rewriting/rule-implementation")))
  ((name run-shell-command) (definers ())
                            (referrers ("regular-expressions/regexp")))
  ((name run-timed-test) (definers ("propagation/examples/time"))
                         (referrers ()))
  ((name same-color?) (definers ("abstracting-a-domain/piece"))
                      (referrers ()))
  ((name same-dimension?) (definers ("user-defined-types/vector-arith"))
                          (referrers ()))
  ((name same-variable?) (definers ("generic-interpreter/shared-syntax"))
                         (referrers ()))
  ((name save-environment!) (definers ("common/utils")) (referrers ()))
  ((name save-nogood!) (definers ("propagation/search")) (referrers ()))
  ((name say) (definers ("user-defined-types/adventure-world"))
              (referrers ()))
  ((name say!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name screen:port) (definers ("user-defined-types/adventure-substrate"))
                      (referrers ()))
  ((name screen?) (definers ("user-defined-types/adventure-substrate"))
                  (referrers ("user-defined-types/adventure-objects")))
  ((name second-compose) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name selectively-extend-function-predicate)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name self-evaluating?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name send-message!) (definers ("user-defined-types/adventure-substrate"))
                        (referrers ("user-defined-types/adventure-objects")))
  ((name sequence->begin) (definers ("generic-interpreter/shared-syntax"))
                          (referrers ()))
  ((name set-applicable-object-metadata!)
   (definers ("user-defined-types/values"))
   (referrers ()))
  ((name set-apply-hook-extra!) (definers ()) (referrers ("wrappers/units")))
  ((name set-arithmetic-procedure-metadata!) (definers ("common/arith"))
                                             (referrers ()))
  ((name set-car!)
   (definers ())
   (referrers
    ("unification/type-resolver" "generic-interpreter/shared-rtdata"
                                 "compiling-to-execution-procedures/executors"
                                 "common/simple-tests")))
  ((name set-cdr!)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate"
     "term-rewriting/pattern-operator"
     "propagation/search"
     "generic-procedures/generic-arith"
     "generic-interpreter/shared-rtdata"
     "continuations-to-amb/deque"
     "compiling-to-execution-procedures/executors"
     "common/utils"
     "common/generic-procedures"
     "common/collections"
     "automatic-differentiation/simplifier"
     "abstracting-a-domain/game")))
  ((name set-cell-probe!) (definers ("propagation/cells")) (referrers ()))
  ((name set-clock-things!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name set-current-time!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name set-deque-back!) (definers ("continuations-to-amb/deque"))
                          (referrers ()))
  ((name set-deque-front!) (definers ("continuations-to-amb/deque"))
                           (referrers ()))
  ((name set-executor-metadata!)
   (definers ("compiling-to-execution-procedures/executors"))
   (referrers ()))
  ((name set-generic-procedure-metadata!)
   (definers ("common/generic-procedures"))
   (referrers ()))
  ((name set-health!) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name set-holder!) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name set-layered-procedure-metadata!) (definers ("layers/layered-data"))
                                          (referrers ()))
  ((name set-location!) (definers ("user-defined-types/adventure-objects"))
                        (referrers ()))
  ((name set-path-value!) (definers ("common/trie"))
                          (referrers ("common/generic-procedures")))
  ((name set-pattern-metadata!) (definers ("term-rewriting/pattern-operator"))
                                (referrers ()))
  ((name set-predicate-metadata!)
   (definers ("common/predicates"))
   (referrers ("user-defined-types/predicates" "common/predicate-metadata")))
  ((name set-predicate<=!)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/templates" "user-defined-types/tags"
                                    "user-defined-types/functions"
                                    "user-defined-types/adventure-substrate"
                                    "user-defined-types/adventure-objects"
                                    "propagation/propagators"
                                    "propagation/premises"
                                    "propagation/hierarchy"
                                    "propagation/cells")))
  ((name set-premise-nogoods!) (definers ("propagation/premises"))
                               (referrers ("propagation/search")))
  ((name set-property-value!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name set-tag<=!) (definers ("user-defined-types/predicates"))
                     (referrers ()))
  ((name set-trie-edge-alist!) (definers ("common/trie")) (referrers ()))
  ((name set-trie-value!) (definers ("common/trie")) (referrers ()))
  ((name set-up!) (definers ("user-defined-types/adventure-substrate"))
                  (referrers ("user-defined-types/adventure-objects")))
  ((name set-variable-value!)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name set-vector-handler!) (definers ("user-defined-types/vector-arith"))
                              (referrers ()))
  ((name setup-propagator-system) (definers ("propagation/ui"))
                                  (referrers ()))
  ((name shallow-fluid-bind)
   (definers ())
   (referrers
    ("common/simple-tests" "common/package"
                           "automatic-differentiation/extractor")))
  ((name shortcut-boolean-propagators)
   (definers ("propagation/primitive-propagators"))
   (referrers ()))
  ((name should-be-crowned?)
   (definers ("abstracting-a-domain/checkers-shared"))
   (referrers
    ("abstracting-a-domain/checkers-original"
     "abstracting-a-domain/checkers-new")))
  ((name show-board) (definers ("abstracting-a-domain/game-repl"))
                     (referrers ()))
  ((name show-reason-merges) (definers ("propagation/reasons"))
                             (referrers ()))
  ((name show-reason-merges?) (definers ("propagation/reasons"))
                              (referrers ()))
  ((name show-test-expressions?) (definers ("common/simple-tests"))
                                 (referrers ()))
  ((name show-time) (definers ()) (referrers ("propagation/examples/time")))
  ((name sign) (definers ("common/utils"))
               (referrers ("abstracting-a-domain/coords")))
  ((name sign-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name similar-packages?) (definers ("common/package")) (referrers ()))
  ((name simple-abstract-predicate)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name simple-compose) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name simple-endo-function-domain)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name simple-endo-function?) (definers ("user-defined-types/functions"))
                                (referrers ()))
  ((name simple-function-apply-fit)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/generics")))
  ((name simple-function-arity) (definers ("user-defined-types/functions"))
                                (referrers ()))
  ((name simple-function-codomain) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name simple-function-domains)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/operations")))
  ((name simple-function-metadata-name)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name simple-function-metadata-procedure)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name simple-function-metadata?)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name simple-function-name) (definers ("user-defined-types/functions"))
                               (referrers ("user-defined-types/values")))
  ((name simple-function-predicate)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name simple-function-procedure)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/values" "user-defined-types/operations")))
  ((name simple-function-tag) (definers ("user-defined-types/functions"))
                              (referrers ("user-defined-types/values")))
  ((name simple-function?)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/values" "user-defined-types/generics")))
  ((name simple-generic-function?) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name simple-generic-procedure)
   (definers ("common/generic-procedures"))
   (referrers
    ("user-defined-types/values" "user-defined-types/tagging"
                                 "user-defined-types/predicates"
                                 "unification/unify"
                                 "unification/type-resolver"
                                 "propagation/ui"
                                 "propagation/data-model"
                                 "non-strict-arguments/general-procedures"
                                 "generic-interpreter/shared-syntax"
                                 "generic-interpreter/shared-rtdata"
                                 "generic-interpreter/shared-repl"
                                 "generic-interpreter/interp"
                                 "exploratory-behavior/analyze"
                                 "compiling-to-execution-procedures/analyze"
                                 "common/pretty-printer"
                                 "common/match-utils"
                                 "automatic-differentiation/extractor")))
  ((name simple-list-memoizer)
   (definers ("common/memoizers"))
   (referrers
    ("user-defined-types/templates" "user-defined-types/predicates"
                                    "common/generic-procedures")))
  ((name simple-lset-memoizer) (definers ("common/memoizers"))
                               (referrers ("user-defined-types/predicates")))
  ((name simple-move) (definers ("pattern-matching-on-graphs/chess-board"))
                      (referrers ()))
  ((name simple-operation)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers
    ("layers/units" "generic-procedures/generic-arith"
                    "common/numeric-arith"
                    "combining-arithmetics/standard-arith"
                    "combining-arithmetics/function-variants")))
  ((name simple-operation-procedure)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers ("generic-procedures/generic-arith")))
  ((name simple-parallel-combine)
   (definers ("combinators/function-combinators"))
   (referrers ()))
  ((name simple-predicate?) (definers ("user-defined-types/predicates"))
                            (referrers ()))
  ((name simple-probe) (definers ("propagation/cells")) (referrers ()))
  ((name simple-propagator-projector)
   (definers ("propagation/primitive-propagators"))
   (referrers ()))
  ((name simple-spread-combine)
   (definers ("combinators/function-combinators"))
   (referrers ()))
  ((name simple-tag-shared) (definers ("user-defined-types/predicates"))
                            (referrers ()))
  ((name simple-tag?) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name simple-token-string) (definers ("common/pretty-printer"))
                              (referrers ()))
  ((name simple-token-width) (definers ("common/pretty-printer"))
                             (referrers ()))
  ((name simple-token?) (definers ("common/pretty-printer")) (referrers ()))
  ((name simplify)
   (definers
    ("automatic-differentiation/utils"
     "automatic-differentiation/simplifier"))
   (referrers ()))
  ((name simplify-annotated-program) (definers ("unification/type-resolver"))
                                     (referrers ()))
  ((name simplify-annotated-program-1)
   (definers ("unification/type-resolver"))
   (referrers ()))
  ((name simplify:*) (definers ("automatic-differentiation/utils"))
                     (referrers ()))
  ((name simplify:+) (definers ("automatic-differentiation/utils"))
                     (referrers ()))
  ((name simplify:expt) (definers ("automatic-differentiation/utils"))
                        (referrers ()))
  ((name sin) (definers ())
              (referrers ("automatic-differentiation/handlers")))
  ((name sin-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name skeletal-test-results) (definers ("common/simple-tests"))
                                (referrers ()))
  ((name sort)
   (definers ())
   (referrers
    ("user-defined-types/generics"
     "layers/units"
     "common/utils"
     "automatic-differentiation/replace-dx-differential"
     "automatic-differentiation/extractor")))
  ((name sort-by) (definers ("common/utils"))
                  (referrers ("propagation/search")))
  ((name sorted-alist-repeated-key?) (definers ("layers/units"))
                                     (referrers ()))
  ((name space-width) (definers ("common/pretty-printer")) (referrers ()))
  ((name splice-begin) (definers ("unification/type-resolver"))
                       (referrers ()))
  ((name spread-apply) (definers ("combinators/function-combinators"))
                       (referrers ()))
  ((name spread-combine) (definers ("combinators/function-combinators"))
                         (referrers ()))
  ((name sqrt)
   (definers ())
   (referrers
    ("automatic-differentiation/simplifier"
     "automatic-differentiation/handlers")))
  ((name sqrt-interval) (definers ("propagation/examples/intervals"))
                        (referrers ()))
  ((name sqrt-iter) (definers ("propagation/examples/example-support"))
                    (referrers ()))
  ((name sqrt-network) (definers ("propagation/examples/example-support"))
                       (referrers ()))
  ((name square) (definers ())
                 (referrers ("automatic-differentiation/handlers")))
  ((name square-interval) (definers ("propagation/examples/intervals"))
                          (referrers ()))
  ((name standard-compound-tag) (definers ("user-defined-types/predicates"))
                                (referrers ()))
  ((name standard-print-method)
   (definers ())
   (referrers ("user-defined-types/tagging" "common/utils")))
  ((name start-adventure) (definers ("user-defined-types/adventure-world"))
                          (referrers ()))
  ((name start-chess-game)
   (definers ("pattern-matching-on-graphs/chess-board"))
   (referrers ()))
  ((name step-board) (definers ("abstracting-a-domain/checkers-original"))
                     (referrers ()))
  ((name step-from) (definers ("abstracting-a-domain/checkers-original"))
                    (referrers ()))
  ((name step-is-jump?) (definers ("abstracting-a-domain/checkers-original"))
                        (referrers ()))
  ((name step-to) (definers ("abstracting-a-domain/checkers-original"))
                  (referrers ()))
  ((name step?) (definers ("abstracting-a-domain/checkers-original"))
                (referrers ()))
  ((name strict-compound-procedure?) (definers ("generic-interpreter/interp"))
                                     (referrers ()))
  ((name strict-primitive-procedure?)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name string)
   (definers ())
   (referrers
    ("user-defined-types/tagging" "pattern-matching-on-graphs/chess-board"
                                  "abstracting-a-domain/checkers-shared")))
  ((name string->list) (definers ())
                       (referrers ("regular-expressions/regexp")))
  ((name string-append)
   (definers ())
   (referrers
    ("user-defined-types/adventure-substrate" "regular-expressions/regexp"
                                              "common/simple-tests"
                                              "common/predicates")))
  ((name string-find-next-char) (definers ()) (referrers ("common/utils")))
  ((name string-length)
   (definers ())
   (referrers ("regular-expressions/regexp" "common/pretty-printer")))
  ((name string-trim) (definers ()) (referrers ("common/utils")))
  ((name string?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("generic-interpreter/shared-syntax" "common/simple-tests"
                                         "common/pretty-printer")))
  ((name strip-applicable-wrapper) (definers ("user-defined-types/values"))
                                   (referrers ()))
  ((name strip-tags) (definers ("user-defined-types/values"))
                     (referrers ("user-defined-types/standard-arith")))
  ((name strongest-consequence) (definers ("propagation/value-sets"))
                                (referrers ()))
  ((name strongest-value)
   (definers ("propagation/data-model"))
   (referrers
    ("propagation/value-sets" "propagation/ui"
                              "propagation/support-extra"
                              "propagation/reasons"
                              "propagation/cells")))
  ((name student?) (definers ("user-defined-types/adventure-objects"))
                   (referrers ()))
  ((name sub-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name subinterval?) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name substitute)
   (definers ("automatic-differentiation/extractor"))
   (referrers ("automatic-differentiation/replace-dx-differential")))
  ((name substring) (definers ()) (referrers ("regular-expressions/regexp")))
  ((name substring-find-next-char) (definers ())
                                   (referrers ("regular-expressions/regexp")))
  ((name subsuming-adjoiner) (definers ("common/utils"))
                             (referrers ("propagation/premises")))
  ((name success?)
   (definers ("exploratory-behavior/rtdata"))
   (referrers ("exploratory-behavior/analyze" "continuations/analyze-extra")))
  ((name suffer!) (definers ("user-defined-types/adventure-objects"))
                  (referrers ()))
  ((name summarize-failing-result) (definers ("common/simple-tests"))
                                   (referrers ()))
  ((name summarize-failing-results) (definers ("common/simple-tests"))
                                    (referrers ()))
  ((name summarize-location) (definers ("abstracting-a-domain/board"))
                             (referrers ("abstracting-a-domain/game-repl")))
  ((name summarize-move)
   (definers
    ("abstracting-a-domain/checkers-shared"
     "abstracting-a-domain/checkers-original"))
   (referrers ("abstracting-a-domain/game-repl")))
  ((name summarize-test-results) (definers ("common/simple-tests"))
                                 (referrers ()))
  ((name support-layer)
   (definers ("dependencies/support-layer"))
   (referrers ("propagation/ui" "propagation/support-extra")))
  ((name support-layer-value)
   (definers ("dependencies/support-layer"))
   (referrers
    ("propagation/value-sets" "propagation/ui"
                              "propagation/support-extra"
                              "propagation/search")))
  ((name support-set)
   (definers ("dependencies/support-sets"))
   (referrers
    ("propagation/ui" "propagation/search"
                      "propagation/premises"
                      "dependencies/support-layer")))
  ((name support-set-adjoin) (definers ("dependencies/support-sets"))
                             (referrers ()))
  ((name support-set-any) (definers ("dependencies/support-sets"))
                          (referrers ("propagation/support-extra")))
  ((name support-set-elements)
   (definers ("dependencies/support-sets"))
   (referrers
    ("propagation/ui" "propagation/search" "dependencies/support-layer")))
  ((name support-set-empty?)
   (definers ("dependencies/support-sets"))
   (referrers ("propagation/ui" "propagation/search")))
  ((name support-set-every) (definers ("dependencies/support-sets"))
                            (referrers ("propagation/premises")))
  ((name support-set-filter) (definers ("dependencies/support-sets"))
                             (referrers ("propagation/search")))
  ((name support-set-remove) (definers ("dependencies/support-sets"))
                             (referrers ("propagation/search")))
  ((name support-set-union)
   (definers ("dependencies/support-sets"))
   (referrers
    ("propagation/ui" "propagation/support-extra"
                      "propagation/search"
                      "dependencies/support-layer")))
  ((name support-set<) (definers ("dependencies/support-sets"))
                       (referrers ()))
  ((name support-set<=)
   (definers ("dependencies/support-sets"))
   (referrers ("propagation/value-sets" "propagation/premises")))
  ((name support-set=)
   (definers ("dependencies/support-sets"))
   (referrers ("propagation/support-extra" "propagation/premises")))
  ((name support-set?) (definers ("dependencies/support-sets"))
                       (referrers ("propagation/ui")))
  ((name support:*) (definers ("dependencies/support-layer")) (referrers ()))
  ((name support:/) (definers ("dependencies/support-layer")) (referrers ()))
  ((name support:atan2) (definers ("dependencies/support-layer"))
                        (referrers ()))
  ((name support:default-procedure) (definers ("dependencies/support-layer"))
                                    (referrers ()))
  ((name support:merge) (definers ("propagation/support-extra"))
                        (referrers ()))
  ((name supported) (definers ("propagation/ui"))
                    (referrers ("propagation/search" "propagation/premises")))
  ((name supported-value-description) (definers ("propagation/ui"))
                                      (referrers ()))
  ((name symbol)
   (definers ())
   (referrers
    ("user-defined-types/templates" "user-defined-types/tags"
                                    "user-defined-types/adventure-substrate"
                                    "unification/type-resolver"
                                    "propagation/primitive-propagators"
                                    "propagation/premises"
                                    "layers/layered-data")))
  ((name symbol<?) (definers ())
                   (referrers ("term-rewriting/rules" "layers/units")))
  ((name symbol>?) (definers ())
                   (referrers ("automatic-differentiation/derivatives")))
  ((name symbol?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("user-defined-types/operations" "unification/type-resolver"
                                     "term-rewriting/rules"
                                     "propagation/reasons"
                                     "propagation/hierarchy"
                                     "pattern-matching-on-graphs/graph-match"
                                     "pattern-matching-on-graphs/chess-moves"
                                     "non-strict-arguments/general-procedures"
                                     "layers/units"
                                     "generic-procedures/generic-arith"
                                     "generic-interpreter/shared-syntax"
                                     "generic-interpreter/interp"
                                     "common/predicate-metadata"
                                     "common/match-utils"
                                     "combining-arithmetics/standard-arith")))
  ((name symbolic-arithmetic-1)
   (definers ("combining-arithmetics/standard-arith"))
   (referrers ()))
  ((name symbolic-constructor)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name symbolic-extender)
   (definers ("combining-arithmetics/standard-arith"))
   (referrers ("automatic-differentiation/utils")))
  ((name symbolic-predicate-base)
   (definers ("user-defined-types/standard-arith"))
   (referrers ()))
  ((name symbolic-predicate?) (definers ("user-defined-types/standard-arith"))
                              (referrers ()))
  ((name symbolic-template) (definers ("user-defined-types/standard-arith"))
                            (referrers ()))
  ((name symbolic?) (definers ("combining-arithmetics/standard-arith"))
                    (referrers ()))
  ((name symmetrize-move)
   (definers ("pattern-matching-on-graphs/chess-moves"))
   (referrers ()))
  ((name system-global-environment)
   (definers ())
   (referrers
    ("layers/units" "common/utils" "common/overrides" "common/operators")))
  ((name tag->predicate)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/values"
                                       "user-defined-types/templates"
                                       "user-defined-types/tagging"
                                       "user-defined-types/functions")))
  ((name tag-accessor) (definers ("user-defined-types/predicates"))
                       (referrers ()))
  ((name tag-active?) (definers ("automatic-differentiation/extractor"))
                      (referrers ()))
  ((name tag-constructor) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name tag-data) (definers ("user-defined-types/predicates"))
                   (referrers ()))
  ((name tag-name)
   (definers ("user-defined-types/predicates"))
   (referrers
    ("user-defined-types/values" "user-defined-types/templates"
                                 "user-defined-types/tagging")))
  ((name tag-shared-accessor) (definers ("user-defined-types/predicates"))
                              (referrers ()))
  ((name tag-shared-constructor) (definers ("user-defined-types/predicates"))
                                 (referrers ()))
  ((name tag-shared-name) (definers ("user-defined-types/predicates"))
                          (referrers ()))
  ((name tag-shared-predicate) (definers ("user-defined-types/predicates"))
                               (referrers ()))
  ((name tag-shared-supersets) (definers ("user-defined-types/predicates"))
                               (referrers ()))
  ((name tag-shared?) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name tag-supersets) (definers ("user-defined-types/predicates"))
                        (referrers ()))
  ((name tag<=)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/tagging" "user-defined-types/functions")))
  ((name tag<=-cache) (definers ("user-defined-types/predicates"))
                      (referrers ()))
  ((name tag=) (definers ("user-defined-types/predicates")) (referrers ()))
  ((name tag>=) (definers ("user-defined-types/predicates")) (referrers ()))
  ((name tag?)
   (definers ("user-defined-types/predicates"))
   (referrers ("user-defined-types/values" "user-defined-types/templates")))
  ((name tagged-data-data)
   (definers ("user-defined-types/tagging"))
   (referrers
    ("user-defined-types/vector-arith"
     "user-defined-types/values"
     "user-defined-types/adventure-substrate")))
  ((name tagged-data-description)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name tagged-data-representation)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/adventure-substrate")))
  ((name tagged-data-tag) (definers ("user-defined-types/tagging"))
                          (referrers ("user-defined-types/values")))
  ((name tagged-data=) (definers ("user-defined-types/tagging"))
                       (referrers ()))
  ((name tagged-data?)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/values" "user-defined-types/predicates")))
  ((name tagged-list?) (definers ("generic-interpreter/shared-syntax"))
                       (referrers ()))
  ((name tagging-strategy:always)
   (definers ("user-defined-types/tagging"))
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/standard-arith"
                                       "user-defined-types/predicates")))
  ((name tagging-strategy:never)
   (definers ("user-defined-types/tagging"))
   (referrers
    ("user-defined-types/predicates" "user-defined-types/functions")))
  ((name tagging-strategy:optional)
   (definers ("user-defined-types/tagging"))
   (referrers ("user-defined-types/tags" "user-defined-types/predicates")))
  ((name tags->predicates) (definers ("user-defined-types/predicates"))
                           (referrers ("user-defined-types/templates")))
  ((name tags-of) (definers ("user-defined-types/values")) (referrers ()))
  ((name take) (definers ()) (referrers ("common/utils")))
  ((name take-exit!) (definers ("user-defined-types/adventure-objects"))
                     (referrers ("user-defined-types/adventure-world")))
  ((name take-something!) (definers ("user-defined-types/adventure-objects"))
                          (referrers ()))
  ((name take-thing) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name take-thing!) (definers ("user-defined-types/adventure-objects"))
                      (referrers ("user-defined-types/adventure-world")))
  ((name takeable-things) (definers ("user-defined-types/adventure-objects"))
                          (referrers ()))
  ((name tan-interval) (definers ("propagation/examples/intervals"))
                       (referrers ()))
  ((name tear-down!) (definers ("user-defined-types/adventure-substrate"))
                     (referrers ("user-defined-types/adventure-objects")))
  ((name tell) (definers ("user-defined-types/adventure-world"))
               (referrers ()))
  ((name tell!)
   (definers ("user-defined-types/adventure-substrate" "propagation/ui"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name template-pattern->names) (definers ("user-defined-types/templates"))
                                  (referrers ()))
  ((name template-pattern-element-name)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern-element-operator)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern-element-polarity)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern-element-single-valued?)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern-element?)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern-name?) (definers ("user-defined-types/templates"))
                                 (referrers ()))
  ((name template-pattern-operator?)
   (definers ("user-defined-types/templates"))
   (referrers ()))
  ((name template-pattern?) (definers ("user-defined-types/templates"))
                            (referrers ()))
  ((name test-cell-content!) (definers ("propagation/cells"))
                             (referrers ("propagation/premises")))
  ((name texpr-expr) (definers ("unification/type-resolver")) (referrers ()))
  ((name texpr-type) (definers ("unification/type-resolver")) (referrers ()))
  ((name texpr?) (definers ("unification/type-resolver")) (referrers ()))
  ((name text-of-quotation)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name the-board) (definers ("pattern-matching-on-graphs/chess-board"))
                    (referrers ()))
  ((name the-clock) (definers ("user-defined-types/adventure-world"))
                    (referrers ()))
  ((name the-contradiction)
   (definers ("propagation/cells"))
   (referrers ("propagation/examples/intervals" "propagation/data-model")))
  ((name the-empty-environment)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ("continuations/analyze-extra")))
  ((name the-global-environment)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("generic-interpreter/repl" "exploratory-behavior/repl"
                                "compiling-to-execution-procedures/repl")))
  ((name the-nothing)
   (definers ("propagation/cells"))
   (referrers
    ("propagation/value-sets" "propagation/support-extra"
                              "propagation/primitive-propagators")))
  ((name the-unspecified-value)
   (definers ("generic-interpreter/shared-rtdata"))
   (referrers ()))
  ((name thing:location) (definers ("user-defined-types/adventure-objects"))
                         (referrers ()))
  ((name thing?) (definers ("user-defined-types/adventure-objects"))
                 (referrers ()))
  ((name things-here) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name things-in-place) (definers ("user-defined-types/adventure-objects"))
                          (referrers ()))
  ((name tick!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers
    ("user-defined-types/adventure-world"
     "user-defined-types/adventure-objects")))
  ((name token->tree) (definers ("common/pretty-printer")) (referrers ()))
  ((name token-width) (definers ("common/pretty-printer")) (referrers ()))
  ((name token?) (definers ("common/pretty-printer")) (referrers ()))
  ((name tokenize) (definers ("common/pretty-printer")) (referrers ()))
  ((name top-level-env) (definers ("unification/type-resolver"))
                        (referrers ()))
  ((name top-level-parent?) (definers ("propagation/hierarchy"))
                            (referrers ()))
  ((name top-tag) (definers ("user-defined-types/predicates")) (referrers ()))
  ((name top-tag?) (definers ("user-defined-types/predicates"))
                   (referrers ()))
  ((name trace-generic-dispatch) (definers ("common/generic-procedures"))
                                 (referrers ()))
  ((name trace-generic-dispatch?) (definers ("common/generic-procedures"))
                                  (referrers ()))
  ((name trace-output-port) (definers ())
                            (referrers ("common/generic-procedures")))
  ((name transform-operation-procedure)
   (definers ("user-defined-types/operations" "common/operations"))
   (referrers
    ("propagation/primitive-propagators" "automatic-differentiation/utils")))
  ((name trie-edge-alist) (definers ("common/trie")) (referrers ()))
  ((name trie-entries) (definers ("common/trie")) (referrers ()))
  ((name trie-has-value?) (definers ("common/trie")) (referrers ()))
  ((name trie-value) (definers ("common/trie")) (referrers ()))
  ((name trie?) (definers ("common/trie")) (referrers ()))
  ((name troll:hunger) (definers ("user-defined-types/adventure-objects"))
                       (referrers ()))
  ((name troll?) (definers ("user-defined-types/adventure-objects"))
                 (referrers ()))
  ((name true-tag<=) (definers ("user-defined-types/predicates"))
                     (referrers ()))
  ((name true?) (definers ("generic-interpreter/shared-rtdata"))
                (referrers ()))
  ((name truncate) (definers ())
                   (referrers ("propagation/examples/hms-dms-radians")))
  ((name try-history) (definers ("abstracting-a-domain/game-repl"))
                      (referrers ()))
  ((name try-rule) (definers ("term-rewriting/rules"))
                   (referrers ("term-rewriting/pattern-operator")))
  ((name try-rules) (definers ("term-rewriting/rules"))
                    (referrers ("term-rewriting/pattern-operator")))
  ((name try-step) (definers ("abstracting-a-domain/checkers-original"))
                   (referrers ()))
  ((name type-expression?) (definers ("unification/type-resolver"))
                           (referrers ()))
  ((name type-instantiator)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name type-properties)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ()))
  ((name type-variable) (definers ("unification/type-resolver"))
                        (referrers ()))
  ((name type-variable-name) (definers ("unification/type-resolver"))
                             (referrers ()))
  ((name type-variable?) (definers ("unification/type-resolver"))
                         (referrers ()))
  ((name type?) (definers ("user-defined-types/adventure-substrate"))
                (referrers ()))
  ((name uncached-tag<=) (definers ("user-defined-types/predicates"))
                         (referrers ()))
  ((name undo) (definers ("abstracting-a-domain/game-repl")) (referrers ()))
  ((name undoable-assignment?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers ("exploratory-behavior/analyze")))
  ((name unifier) (definers ("unification/unify")) (referrers ()))
  ((name unify) (definers ("unification/unify"))
                (referrers ("unification/type-resolver")))
  ((name unify-constraints) (definers ("unification/type-resolver"))
                            (referrers ()))
  ((name unify:constant-terms) (definers ("unification/unify"))
                               (referrers ()))
  ((name unify:dispatch) (definers ("unification/unify")) (referrers ()))
  ((name unify:fail) (definers ("unification/unify")) (referrers ()))
  ((name unify:gdispatch) (definers ("unification/unify")) (referrers ()))
  ((name unify:internal) (definers ("unification/unify")) (referrers ()))
  ((name unify:list-terms) (definers ("unification/unify")) (referrers ()))
  ((name unify:segment-var-var) (definers ("unification/unify"))
                                (referrers ()))
  ((name uninterned-symbol?)
   (definers ())
   (referrers ("automatic-differentiation/derivatives")))
  ((name union-function) (definers ("user-defined-types/functions"))
                         (referrers ("user-defined-types/operations")))
  ((name union-function*)
   (definers ("user-defined-types/functions"))
   (referrers ("user-defined-types/values" "user-defined-types/operations")))
  ((name union-function-apply-fit) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name union-function-component-fits)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name union-function-components)
   (definers ("user-defined-types/functions"))
   (referrers ()))
  ((name union-function-name) (definers ("user-defined-types/functions"))
                              (referrers ()))
  ((name union-function-predicate) (definers ("user-defined-types/functions"))
                                   (referrers ()))
  ((name union-function?) (definers ("user-defined-types/functions"))
                          (referrers ()))
  ((name unit) (definers ("layers/units")) (referrers ()))
  ((name unit->alist) (definers ("layers/units")) (referrers ()))
  ((name unit-arithmetic) (definers ("layers/units")) (referrers ()))
  ((name unit-conversion-record-inverse) (definers ("wrappers/units"))
                                         (referrers ()))
  ((name unit-conversion-record?) (definers ("wrappers/units"))
                                  (referrers ()))
  ((name unit-conversion-table) (definers ("wrappers/units")) (referrers ()))
  ((name unit-conversion?) (definers ("wrappers/units")) (referrers ()))
  ((name unit-layer) (definers ("layers/units")) (referrers ()))
  ((name unit-procedure) (definers ("layers/units")) (referrers ()))
  ((name unit-specializer) (definers ("wrappers/units")) (referrers ()))
  ((name unit:*) (definers ("wrappers/units" "layers/units")) (referrers ()))
  ((name unit:/) (definers ("wrappers/units" "layers/units")) (referrers ()))
  ((name unit:atan) (definers ("layers/units")) (referrers ()))
  ((name unit:binary-comparison) (definers ("layers/units")) (referrers ()))
  ((name unit:expt) (definers ("wrappers/units" "layers/units"))
                    (referrers ()))
  ((name unit:invert) (definers ("wrappers/units" "layers/units"))
                      (referrers ()))
  ((name unit:none) (definers ("layers/units")) (referrers ()))
  ((name unit:remainder) (definers ("layers/units")) (referrers ()))
  ((name unit:simple-binary-operation) (definers ("layers/units"))
                                       (referrers ()))
  ((name unit:simple-unary-operation) (definers ("layers/units"))
                                      (referrers ()))
  ((name unit:sqrt) (definers ("layers/units")) (referrers ()))
  ((name unit:square) (definers ("layers/units")) (referrers ()))
  ((name unit:unary-comparison) (definers ("layers/units")) (referrers ()))
  ((name unit:unitless-operation) (definers ("layers/units")) (referrers ()))
  ((name unit=?) (definers ("layers/units")) (referrers ()))
  ((name unit?) (definers ("layers/units")) (referrers ()))
  ((name unitless?) (definers ("layers/units")) (referrers ()))
  ((name universal-ancestor) (definers ("propagation/hierarchy"))
                             (referrers ()))
  ((name unknown-reason) (definers ("propagation/reasons")) (referrers ()))
  ((name unoccupied) (definers ("pattern-matching-on-graphs/chess-moves"))
                     (referrers ()))
  ((name unregister-with-clock!)
   (definers ("user-defined-types/adventure-substrate"))
   (referrers ("user-defined-types/adventure-objects")))
  ((name unusable-value?)
   (definers ("propagation/data-model"))
   (referrers
    ("propagation/value-sets" "propagation/support-extra"
                              "propagation/propagators"
                              "propagation/primitive-propagators"
                              "propagation/cells")))
  ((name update-board) (definers ("abstracting-a-domain/board"))
                       (referrers ()))
  ((name update-failure-count!) (definers ("propagation/search"))
                                (referrers ()))
  ((name update-piece) (definers ("abstracting-a-domain/pmove"))
                       (referrers ("abstracting-a-domain/checkers-new")))
  ((name user-initial-environment)
   (definers ())
   (referrers ("generic-interpreter/shared-repl")))
  ((name v:map1) (definers ("user-defined-types/vector-arith"))
                 (referrers ()))
  ((name v:map2) (definers ("user-defined-types/vector-arith"))
                 (referrers ()))
  ((name value-fit)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name value-implies?)
   (definers ("propagation/data-model"))
   (referrers ("propagation/value-sets" "propagation/examples/intervals")))
  ((name value-restriction)
   (definers ("user-defined-types/values"))
   (referrers
    ("user-defined-types/operations" "user-defined-types/functions")))
  ((name value-set) (definers ("propagation/value-sets")) (referrers ()))
  ((name value-set-adjoin) (definers ("propagation/value-sets"))
                           (referrers ()))
  ((name value-set-elements) (definers ("propagation/value-sets"))
                             (referrers ("propagation/ui")))
  ((name value-set?) (definers ("propagation/value-sets"))
                     (referrers ("propagation/ui")))
  ((name values)
   (definers ())
   (referrers
    ("unification/type-resolver" "propagation/search"
                                 "common/simple-tests"
                                 "common/operators"
                                 "combinators/function-combinators")))
  ((name variable?)
   (definers ("generic-interpreter/shared-syntax"))
   (referrers
    ("generic-interpreter/interp"
     "exploratory-behavior/analyze"
     "compiling-to-execution-procedures/analyze")))
  ((name vector) (definers ())
                 (referrers ("generic-interpreter/shared-rtdata")))
  ((name vector->list)
   (definers ())
   (referrers ("user-defined-types/vector-arith" "common/pretty-printer")))
  ((name vector-constructor) (definers ("user-defined-types/vector-arith"))
                             (referrers ()))
  ((name vector-dimension) (definers ("user-defined-types/vector-arith"))
                           (referrers ()))
  ((name vector-elt) (definers ("user-defined-types/vector-arith"))
                     (referrers ()))
  ((name vector-elts) (definers ("user-defined-types/vector-arith"))
                      (referrers ()))
  ((name vector-length)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "automatic-differentiation/extractor")))
  ((name vector-map)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith" "user-defined-types/values")))
  ((name vector-predicate-element)
   (definers ("user-defined-types/vector-arith"))
   (referrers ()))
  ((name vector-predicate?) (definers ("user-defined-types/vector-arith"))
                            (referrers ()))
  ((name vector-ref)
   (definers ())
   (referrers
    ("user-defined-types/vector-arith"
     "generic-interpreter/shared-rtdata"
     "automatic-differentiation/extractor")))
  ((name vector-set!)
   (definers ())
   (referrers
    ("generic-interpreter/shared-rtdata" "exploratory-behavior/rtdata")))
  ((name vector-template) (definers ("user-defined-types/vector-arith"))
                          (referrers ()))
  ((name vector?)
   (definers ("user-defined-types/tags"))
   (referrers
    ("generic-interpreter/shared-rtdata"
     "common/pretty-printer"
     "automatic-differentiation/extractor")))
  ((name vistas-here) (definers ("user-defined-types/adventure-objects"))
                      (referrers ()))
  ((name warn)
   (definers ())
   (referrers
    ("propagation/search" "propagation/premises"
                          "automatic-differentiation/extractor")))
  ((name weak-car) (definers ()) (referrers ("common/collections")))
  ((name weak-cdr) (definers ()) (referrers ("common/collections")))
  ((name weak-cons) (definers ()) (referrers ("common/collections")))
  ((name weak-list->list) (definers ()) (referrers ("common/collections")))
  ((name weak-memq) (definers ()) (referrers ("common/collections")))
  ((name weak-pair/car?) (definers ()) (referrers ("common/collections")))
  ((name weak-set-cdr!) (definers ()) (referrers ("common/collections")))
  ((name what-is-in) (definers ("propagation/ui")) (referrers ()))
  ((name what-is-this) (definers ("propagation/ui")) (referrers ()))
  ((name whats-here) (definers ("user-defined-types/adventure-world"))
                     (referrers ()))
  ((name when-alive) (definers ("user-defined-types/adventure-objects"))
                     (referrers ()))
  ((name with-active-tag) (definers ("automatic-differentiation/extractor"))
                          (referrers ()))
  ((name with-arithmetic) (definers ("common/arith")) (referrers ()))
  ((name with-breadth-first-schedule)
   (definers ("continuations-to-amb/ambsch"))
   (referrers ()))
  ((name with-depth-first-schedule) (definers ("continuations-to-amb/ambsch"))
                                    (referrers ()))
  ((name with-installed-package!) (definers ("common/package"))
                                  (referrers ("common/arith")))
  ((name with-notification) (definers ()) (referrers ("common/simple-tests")))
  ((name with-output-to-port) (definers ())
                              (referrers ("common/simple-tests")))
  ((name with-predicate-counts) (definers ("common/predicate-counter"))
                                (referrers ()))
  ((name with-string-output-port) (definers ())
                                  (referrers ("common/pretty-printer")))
  ((name within-continuation) (definers ())
                              (referrers ("continuations-to-amb/ambsch")))
  ((name within-interval?) (definers ("propagation/examples/intervals"))
                           (referrers ()))
  ((name wrap-simplifier) (definers ("automatic-differentiation/utils"))
                          (referrers ()))
  ((name write)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("propagation/ui" "pattern-matching-on-graphs/chess-board"
                      "non-strict-arguments/general-procedures"
                      "layers/units"
                      "exploratory-behavior/repl"
                      "continuations-to-amb/ambsch"
                      "compiling-to-execution-procedures/repl"
                      "common/simple-tests"
                      "common/pretty-printer"
                      "common/predicates"
                      "common/generic-procedures"
                      "abstracting-a-domain/game-repl")))
  ((name write-bourne-shell-grep-command)
   (definers ("regular-expressions/regexp"))
   (referrers ()))
  ((name write-char)
   (definers ())
   (referrers ("common/pretty-printer" "abstracting-a-domain/game-repl")))
  ((name write-labeled) (definers ("propagation/ui")) (referrers ()))
  ((name write-line)
   (definers ("generic-interpreter/shared-repl"))
   (referrers
    ("non-strict-arguments/general-procedures"
     "generic-interpreter/repl"
     "exploratory-behavior/repl"
     "compiling-to-execution-procedures/repl"
     "common/predicate-counter")))
  ((name write-string)
   (definers ())
   (referrers
    ("pattern-matching-on-graphs/chess-board"
     "common/pretty-printer"
     "abstracting-a-domain/game-repl")))
  ((name write-to-string) (definers ()) (referrers ("common/simple-tests")))
  ((name x->xms) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name x:advance) (definers ("compiling-to-execution-procedures/analyze"))
                    (referrers ("compiling-to-execution-procedures/repl")))
  ((name x:analyze) (definers ("compiling-to-execution-procedures/analyze"))
                    (referrers ()))
  ((name x:apply) (definers ("compiling-to-execution-procedures/analyze"))
                  (referrers ()))
  ((name x:eval) (definers ("compiling-to-execution-procedures/analyze"))
                 (referrers ("compiling-to-execution-procedures/repl")))
  ((name x:handle-operand)
   (definers ("compiling-to-execution-procedures/analyze"))
   (referrers ()))
  ((name xms->x) (definers ("propagation/examples/hms-dms-radians"))
                 (referrers ()))
  ((name yield) (definers ("continuations-to-amb/ambsch")) (referrers ()))
  ((name zero?) (definers ())
                (referrers ("automatic-differentiation/handlers")))
  ((name ~<?) (definers ("common/utils"))
              (referrers ("propagation/examples/intervals")))
  ((name ~=?)
   (definers ("common/utils"))
   (referrers ("propagation/examples/intervals" "propagation/data-model")))
  ((name ~>?) (definers ("common/utils"))
              (referrers ("propagation/examples/intervals")))
  ((name ~zero?) (definers ("propagation/primitive-propagators"))
                 (referrers ()))))
